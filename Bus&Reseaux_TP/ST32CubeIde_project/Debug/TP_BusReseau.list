
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009644  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08009818  08009818  0000a818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d64  08009d64  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d64  08009d64  0000ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d6c  08009d6c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d6c  08009d6c  0000ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009d74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  08009f48  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08009f48  0000b3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d23d  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fd  00000000  00000000  00018441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0001a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089c  00000000  00000000  0001b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228a7  00000000  00000000  0001b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fce0  00000000  00000000  0003e2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf16  00000000  00000000  0004df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ae99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  0011aedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011eca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080097fc 	.word	0x080097fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080097fc 	.word	0x080097fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9d3 	b.w	8000fb0 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a25      	ldr	r2, [pc, #148]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <MX_GPIO_Init+0xd0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	4812      	ldr	r0, [pc, #72]	@ (8001088 <MX_GPIO_Init+0xd4>)
 8001040:	f001 fbc8 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	@ (800108c <MX_GPIO_Init+0xd8>)
 800105c:	f001 fa26 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001060:	2320      	movs	r3, #32
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MX_GPIO_Init+0xd4>)
 8001078:	f001 fa18 	bl	80024ac <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020800 	.word	0x40020800

08001090 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_I2C1_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <MX_I2C1_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_I2C1_Init+0x50>)
 800109c:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <MX_I2C1_Init+0x58>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_I2C1_Init+0x50>)
 80010ce:	f001 fb9b 	bl	8002808 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 fda8 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	40005400 	.word	0x40005400
 80010e8:	000186a0 	.word	0x000186a0

080010ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <HAL_I2C_MspInit+0xa4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d13c      	bne.n	8001188 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <HAL_I2C_MspInit+0xa8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <HAL_I2C_MspInit+0xa8>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <HAL_I2C_MspInit+0xa8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001130:	2312      	movs	r3, #18
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113c:	2304      	movs	r3, #4
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	@ (8001198 <HAL_I2C_MspInit+0xac>)
 8001148:	f001 f9b0 	bl	80024ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_I2C_MspInit+0xa8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <HAL_I2C_MspInit+0xa8>)
 8001156:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115a:	6413      	str	r3, [r2, #64]	@ 0x40
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_I2C_MspInit+0xa8>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	201f      	movs	r0, #31
 800116e:	f001 f8c6 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001172:	201f      	movs	r0, #31
 8001174:	f001 f8df 	bl	8002336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2020      	movs	r0, #32
 800117e:	f001 f8be 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001182:	2020      	movs	r0, #32
 8001184:	f001 f8d7 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40005400 	.word	0x40005400
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400

0800119c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 80011a4:	1d39      	adds	r1, r7, #4
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	2201      	movs	r2, #1
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <__io_putchar+0x20>)
 80011ae:	f004 fe6b 	bl	8005e88 <HAL_UART_Transmit>
	return chr;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000248 	.word	0x20000248

080011c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c4:	b0e9      	sub	sp, #420	@ 0x1a4
 80011c6:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c8:	f000 ff28 	bl	800201c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011cc:	f000 fcc0 	bl	8001b50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d0:	f7ff fef0 	bl	8000fb4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011d4:	f000 fe7e 	bl	8001ed4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80011d8:	f7ff ff5a 	bl	8001090 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("\n=== Initialisation du BMP280... ===\r\n");
 80011dc:	4812      	ldr	r0, [pc, #72]	@ (8001228 <main+0x68>)
 80011de:	f006 fb9b 	bl	8007918 <puts>

	/* Variables */
	uint8_t id_reg = REG_ID;
 80011e2:	23d0      	movs	r3, #208	@ 0xd0
 80011e4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
	uint16_t dig_P1;
	int16_t dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
	int32_t t_fine;

	/* 1 - Présence du capteur */
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDR, &id_reg, 1, HAL_MAX_DELAY);
 80011e8:	f207 1247 	addw	r2, r7, #327	@ 0x147
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	21ee      	movs	r1, #238	@ 0xee
 80011f6:	480d      	ldr	r0, [pc, #52]	@ (800122c <main+0x6c>)
 80011f8:	f001 fc60 	bl	8002abc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDR, &id, 1, HAL_MAX_DELAY);
 80011fc:	f507 72a3 	add.w	r2, r7, #326	@ 0x146
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	21ee      	movs	r1, #238	@ 0xee
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <main+0x6c>)
 800120c:	f001 fd54 	bl	8002cb8 <HAL_I2C_Master_Receive>

	if (id == 0x58)
 8001210:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 8001214:	2b58      	cmp	r3, #88	@ 0x58
 8001216:	d10d      	bne.n	8001234 <main+0x74>
		printf("BMP280 détecté (ID = 0x%02X)\r\n", id);
 8001218:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 800121c:	4619      	mov	r1, r3
 800121e:	4804      	ldr	r0, [pc, #16]	@ (8001230 <main+0x70>)
 8001220:	f006 fb12 	bl	8007848 <iprintf>
 8001224:	e00c      	b.n	8001240 <main+0x80>
 8001226:	bf00      	nop
 8001228:	08009818 	.word	0x08009818
 800122c:	200001f0 	.word	0x200001f0
 8001230:	08009840 	.word	0x08009840
	else
		printf("Erreur : BMP280 non détecté (ID lu = 0x%02X)\r\n", id);
 8001234:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 8001238:	4619      	mov	r1, r3
 800123a:	48dc      	ldr	r0, [pc, #880]	@ (80015ac <main+0x3ec>)
 800123c:	f006 fb04 	bl	8007848 <iprintf>

	/* 2 - Configuration du capteur */
	buf[0] = REG_CTRL_MEAS;
 8001240:	23f4      	movs	r3, #244	@ 0xf4
 8001242:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
	buf[1] = 0x57;
 8001246:	2357      	movs	r3, #87	@ 0x57
 8001248:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDR, buf, 2, HAL_MAX_DELAY);
 800124c:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2302      	movs	r3, #2
 8001258:	21ee      	movs	r1, #238	@ 0xee
 800125a:	48d5      	ldr	r0, [pc, #852]	@ (80015b0 <main+0x3f0>)
 800125c:	f001 fc2e 	bl	8002abc <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001260:	2064      	movs	r0, #100	@ 0x64
 8001262:	f000 ff4d 	bl	8002100 <HAL_Delay>

	/* 3 - Coefficients d'étalonage */
	uint8_t reg_calib = REG_CALIB;
 8001266:	2388      	movs	r3, #136	@ 0x88
 8001268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDR, &reg_calib, 1, HAL_MAX_DELAY);
 800126c:	f207 121f 	addw	r2, r7, #287	@ 0x11f
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	21ee      	movs	r1, #238	@ 0xee
 800127a:	48cd      	ldr	r0, [pc, #820]	@ (80015b0 <main+0x3f0>)
 800127c:	f001 fc1e 	bl	8002abc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDR, calib, CALIB_LENGTH, HAL_MAX_DELAY);
 8001280:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	231a      	movs	r3, #26
 800128c:	21ee      	movs	r1, #238	@ 0xee
 800128e:	48c8      	ldr	r0, [pc, #800]	@ (80015b0 <main+0x3f0>)
 8001290:	f001 fd12 	bl	8002cb8 <HAL_I2C_Master_Receive>

	/* Cf Datasheet */
	dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 8001294:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 8001298:	b21b      	sxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21a      	sxth	r2, r3
 800129e:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	f8a7 3196 	strh.w	r3, [r7, #406]	@ 0x196
	dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 80012ac:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	f8a7 3194 	strh.w	r3, [r7, #404]	@ 0x194
	dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 80012c2:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
	dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 80012d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80012dc:	b21b      	sxth	r3, r3
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	f8a7 3190 	strh.w	r3, [r7, #400]	@ 0x190
	dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 80012f0:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	f897 3130 	ldrb.w	r3, [r7, #304]	@ 0x130
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
	dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 8001306:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800130a:	b21b      	sxth	r3, r3
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	f8a7 318c 	strh.w	r3, [r7, #396]	@ 0x18c
	dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 800131c:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8001320:	b21b      	sxth	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	f8a7 318a 	strh.w	r3, [r7, #394]	@ 0x18a
	dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 8001332:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8001336:	b21b      	sxth	r3, r3
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	f8a7 3188 	strh.w	r3, [r7, #392]	@ 0x188
	dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 8001348:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 800134c:	b21b      	sxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b21a      	sxth	r2, r3
 8001352:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
	dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 800135e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8001362:	b21b      	sxth	r3, r3
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	f8a7 3184 	strh.w	r3, [r7, #388]	@ 0x184
	dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 8001374:	f897 313d 	ldrb.w	r3, [r7, #317]	@ 0x13d
 8001378:	b21b      	sxth	r3, r3
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	f897 313c 	ldrb.w	r3, [r7, #316]	@ 0x13c
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	f8a7 3182 	strh.w	r3, [r7, #386]	@ 0x182
	dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 800138a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800138e:	b21b      	sxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	f897 313e 	ldrb.w	r3, [r7, #318]	@ 0x13e
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	f8a7 3180 	strh.w	r3, [r7, #384]	@ 0x180

	printf("\n== Coefficients d’étalonnage lus ==\r\n");
 80013a0:	4884      	ldr	r0, [pc, #528]	@ (80015b4 <main+0x3f4>)
 80013a2:	f006 fab9 	bl	8007918 <puts>

	printf("dig_T1 = %u\r\n", dig_T1);
 80013a6:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 80013aa:	4619      	mov	r1, r3
 80013ac:	4882      	ldr	r0, [pc, #520]	@ (80015b8 <main+0x3f8>)
 80013ae:	f006 fa4b 	bl	8007848 <iprintf>
	printf("dig_T2 = %d\r\n", dig_T2);
 80013b2:	f9b7 3194 	ldrsh.w	r3, [r7, #404]	@ 0x194
 80013b6:	4619      	mov	r1, r3
 80013b8:	4880      	ldr	r0, [pc, #512]	@ (80015bc <main+0x3fc>)
 80013ba:	f006 fa45 	bl	8007848 <iprintf>
	printf("dig_T3 = %d\r\n", dig_T3);
 80013be:	f9b7 3192 	ldrsh.w	r3, [r7, #402]	@ 0x192
 80013c2:	4619      	mov	r1, r3
 80013c4:	487e      	ldr	r0, [pc, #504]	@ (80015c0 <main+0x400>)
 80013c6:	f006 fa3f 	bl	8007848 <iprintf>

	printf("dig_P1 = %u\r\n", dig_P1);
 80013ca:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80013ce:	4619      	mov	r1, r3
 80013d0:	487c      	ldr	r0, [pc, #496]	@ (80015c4 <main+0x404>)
 80013d2:	f006 fa39 	bl	8007848 <iprintf>
	printf("dig_P2 = %d\r\n", dig_P2);
 80013d6:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	@ 0x18e
 80013da:	4619      	mov	r1, r3
 80013dc:	487a      	ldr	r0, [pc, #488]	@ (80015c8 <main+0x408>)
 80013de:	f006 fa33 	bl	8007848 <iprintf>
	printf("dig_P3 = %d\r\n", dig_P3);
 80013e2:	f9b7 318c 	ldrsh.w	r3, [r7, #396]	@ 0x18c
 80013e6:	4619      	mov	r1, r3
 80013e8:	4878      	ldr	r0, [pc, #480]	@ (80015cc <main+0x40c>)
 80013ea:	f006 fa2d 	bl	8007848 <iprintf>
	printf("dig_P4 = %d\r\n", dig_P4);
 80013ee:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	@ 0x18a
 80013f2:	4619      	mov	r1, r3
 80013f4:	4876      	ldr	r0, [pc, #472]	@ (80015d0 <main+0x410>)
 80013f6:	f006 fa27 	bl	8007848 <iprintf>
	printf("dig_P5 = %d\r\n", dig_P5);
 80013fa:	f9b7 3188 	ldrsh.w	r3, [r7, #392]	@ 0x188
 80013fe:	4619      	mov	r1, r3
 8001400:	4874      	ldr	r0, [pc, #464]	@ (80015d4 <main+0x414>)
 8001402:	f006 fa21 	bl	8007848 <iprintf>
	printf("dig_P6 = %d\r\n", dig_P6);
 8001406:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800140a:	4619      	mov	r1, r3
 800140c:	4872      	ldr	r0, [pc, #456]	@ (80015d8 <main+0x418>)
 800140e:	f006 fa1b 	bl	8007848 <iprintf>
	printf("dig_P7 = %d\r\n", dig_P7);
 8001412:	f9b7 3184 	ldrsh.w	r3, [r7, #388]	@ 0x184
 8001416:	4619      	mov	r1, r3
 8001418:	4870      	ldr	r0, [pc, #448]	@ (80015dc <main+0x41c>)
 800141a:	f006 fa15 	bl	8007848 <iprintf>
	printf("dig_P8 = %d\r\n", dig_P8);
 800141e:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	@ 0x182
 8001422:	4619      	mov	r1, r3
 8001424:	486e      	ldr	r0, [pc, #440]	@ (80015e0 <main+0x420>)
 8001426:	f006 fa0f 	bl	8007848 <iprintf>
	printf("dig_P9 = %d\r\n", dig_P9);
 800142a:	f9b7 3180 	ldrsh.w	r3, [r7, #384]	@ 0x180
 800142e:	4619      	mov	r1, r3
 8001430:	486c      	ldr	r0, [pc, #432]	@ (80015e4 <main+0x424>)
 8001432:	f006 fa09 	bl	8007848 <iprintf>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/* 4 -  Lecture des datas */
		printf("\n=== Lecture des données === \r\n");
 8001436:	486c      	ldr	r0, [pc, #432]	@ (80015e8 <main+0x428>)
 8001438:	f006 fa6e 	bl	8007918 <puts>
		uint8_t reg_data = REG_PRESS_MSB;
 800143c:	23f7      	movs	r3, #247	@ 0xf7
 800143e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

		HAL_I2C_Master_Transmit(&hi2c1, BMP280_I2C_ADDR, &reg_data, 1, HAL_MAX_DELAY);
 8001442:	f507 728f 	add.w	r2, r7, #286	@ 0x11e
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	21ee      	movs	r1, #238	@ 0xee
 8001450:	4857      	ldr	r0, [pc, #348]	@ (80015b0 <main+0x3f0>)
 8001452:	f001 fb33 	bl	8002abc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, BMP280_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 8001456:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2306      	movs	r3, #6
 8001462:	21ee      	movs	r1, #238	@ 0xee
 8001464:	4852      	ldr	r0, [pc, #328]	@ (80015b0 <main+0x3f0>)
 8001466:	f001 fc27 	bl	8002cb8 <HAL_I2C_Master_Receive>

		uint32_t adc_P = ((uint32_t)data[0] << 12) | ((uint32_t)data[1] << 4) | (data[2] >> 4);
 800146a:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 800146e:	031a      	lsls	r2, r3, #12
 8001470:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	431a      	orrs	r2, r3
 8001478:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
		uint32_t adc_T = ((uint32_t)data[3] << 12) | ((uint32_t)data[4] << 4) | (data[5] >> 4);
 8001486:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800148a:	031a      	lsls	r2, r3, #12
 800148c:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	431a      	orrs	r2, r3
 8001494:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

		/* 5 - Température compensée */
		int32_t var1, var2, T;

		var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 80014a2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	1ad2      	subs	r2, r2, r3
 80014b0:	f9b7 3194 	ldrsh.w	r3, [r7, #404]	@ 0x194
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	0adb      	lsrs	r3, r3, #11
 80014ba:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
		var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80014be:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80014c2:	091a      	lsrs	r2, r3, #4
 80014c4:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 80014c8:	1ad1      	subs	r1, r2, r3
 80014ca:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80014ce:	091a      	lsrs	r2, r3, #4
 80014d0:	f8b7 3196 	ldrh.w	r3, [r7, #406]	@ 0x196
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	0b1a      	lsrs	r2, r3, #12
 80014dc:	f9b7 3192 	ldrsh.w	r3, [r7, #402]	@ 0x192
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	0b9b      	lsrs	r3, r3, #14
 80014e6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		t_fine = var1 + var2;
 80014ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80014ee:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80014f2:	4413      	add	r3, r2
 80014f4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

		T = (t_fine * 5 + 128) >> 8;
 80014f8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3380      	adds	r3, #128	@ 0x80
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

		int64_t var1_p, var2_p, p;

		var1_p = ((int64_t)t_fine) - 128000;
 800150a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800150e:	17da      	asrs	r2, r3, #31
 8001510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001514:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001518:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800151c:	460b      	mov	r3, r1
 800151e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001524:	4613      	mov	r3, r2
 8001526:	f143 33ff 	adc.w	r3, r3, #4294967295
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800152c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001530:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
		var2_p = var1_p * var1_p * (int64_t)dig_P6;
 8001534:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8001538:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800153c:	fb03 f102 	mul.w	r1, r3, r2
 8001540:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8001544:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	18ca      	adds	r2, r1, r3
 800154e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001552:	fba3 1303 	umull	r1, r3, r3, r3
 8001556:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800155a:	460b      	mov	r3, r1
 800155c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800156a:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800156e:	17da      	asrs	r2, r3, #31
 8001570:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001574:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001578:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800157c:	462b      	mov	r3, r5
 800157e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001582:	4602      	mov	r2, r0
 8001584:	fb02 f203 	mul.w	r2, r2, r3
 8001588:	e9c7 0140 	strd	r0, r1, [r7, #256]	@ 0x100
 800158c:	460b      	mov	r3, r1
 800158e:	4621      	mov	r1, r4
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	4622      	mov	r2, r4
 8001598:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800159c:	fba2 1201 	umull	r1, r2, r2, r1
 80015a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80015a4:	460a      	mov	r2, r1
 80015a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80015aa:	e01f      	b.n	80015ec <main+0x42c>
 80015ac:	08009864 	.word	0x08009864
 80015b0:	200001f0 	.word	0x200001f0
 80015b4:	08009898 	.word	0x08009898
 80015b8:	080098c4 	.word	0x080098c4
 80015bc:	080098d4 	.word	0x080098d4
 80015c0:	080098e4 	.word	0x080098e4
 80015c4:	080098f4 	.word	0x080098f4
 80015c8:	08009904 	.word	0x08009904
 80015cc:	08009914 	.word	0x08009914
 80015d0:	08009924 	.word	0x08009924
 80015d4:	08009934 	.word	0x08009934
 80015d8:	08009944 	.word	0x08009944
 80015dc:	08009954 	.word	0x08009954
 80015e0:	08009964 	.word	0x08009964
 80015e4:	08009974 	.word	0x08009974
 80015e8:	08009984 	.word	0x08009984
 80015ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80015f0:	4413      	add	r3, r2
 80015f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80015f6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80015fa:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
 80015fe:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		var2_p = var2_p + ((var1_p * (int64_t)dig_P5) << 17);
 8001602:	f9b7 3188 	ldrsh.w	r3, [r7, #392]	@ 0x188
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800160c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001610:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001614:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001618:	462a      	mov	r2, r5
 800161a:	fb02 f203 	mul.w	r2, r2, r3
 800161e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001622:	4621      	mov	r1, r4
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	441a      	add	r2, r3
 800162a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800162e:	4621      	mov	r1, r4
 8001630:	fba3 1301 	umull	r1, r3, r3, r1
 8001634:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001638:	460b      	mov	r3, r1
 800163a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800163e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001642:	18d3      	adds	r3, r2, r3
 8001644:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001654:	462b      	mov	r3, r5
 8001656:	0459      	lsls	r1, r3, #17
 8001658:	4623      	mov	r3, r4
 800165a:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800165e:	4623      	mov	r3, r4
 8001660:	0458      	lsls	r0, r3, #17
 8001662:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001666:	1814      	adds	r4, r2, r0
 8001668:	633c      	str	r4, [r7, #48]	@ 0x30
 800166a:	414b      	adcs	r3, r1
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
 800166e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001672:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		var2_p = var2_p + (((int64_t)dig_P4) << 35);
 8001676:	f9b7 318a 	ldrsh.w	r3, [r7, #394]	@ 0x18a
 800167a:	17da      	asrs	r2, r3, #31
 800167c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001680:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001684:	f04f 0000 	mov.w	r0, #0
 8001688:	f04f 0100 	mov.w	r1, #0
 800168c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001690:	00d9      	lsls	r1, r3, #3
 8001692:	2000      	movs	r0, #0
 8001694:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001698:	1814      	adds	r4, r2, r0
 800169a:	62bc      	str	r4, [r7, #40]	@ 0x28
 800169c:	414b      	adcs	r3, r1
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80016a4:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		var1_p = ((var1_p * var1_p * (int64_t)dig_P3) >> 8) + ((var1_p * (int64_t)dig_P2) << 12);
 80016a8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80016ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80016b0:	fb03 f102 	mul.w	r1, r3, r2
 80016b4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80016b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	18ca      	adds	r2, r1, r3
 80016c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80016c6:	fba3 1303 	umull	r1, r3, r3, r3
 80016ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016ce:	460b      	mov	r3, r1
 80016d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80016d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016de:	f9b7 318c 	ldrsh.w	r3, [r7, #396]	@ 0x18c
 80016e2:	17da      	asrs	r2, r3, #31
 80016e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80016e8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80016ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016f0:	462b      	mov	r3, r5
 80016f2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80016f6:	4602      	mov	r2, r0
 80016f8:	fb02 f203 	mul.w	r2, r2, r3
 80016fc:	e9c7 013a 	strd	r0, r1, [r7, #232]	@ 0xe8
 8001700:	460b      	mov	r3, r1
 8001702:	4621      	mov	r1, r4
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	4622      	mov	r2, r4
 800170c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8001710:	fba2 1201 	umull	r1, r2, r2, r1
 8001714:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001718:	460a      	mov	r2, r1
 800171a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800171e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001722:	4413      	add	r3, r2
 8001724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001734:	4623      	mov	r3, r4
 8001736:	0a18      	lsrs	r0, r3, #8
 8001738:	462b      	mov	r3, r5
 800173a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800173e:	462b      	mov	r3, r5
 8001740:	1219      	asrs	r1, r3, #8
 8001742:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	@ 0x18e
 8001746:	17da      	asrs	r2, r3, #31
 8001748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800174c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001750:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001754:	e9d7 5622 	ldrd	r5, r6, [r7, #136]	@ 0x88
 8001758:	4632      	mov	r2, r6
 800175a:	fb02 f203 	mul.w	r2, r2, r3
 800175e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001762:	462c      	mov	r4, r5
 8001764:	fb04 f303 	mul.w	r3, r4, r3
 8001768:	441a      	add	r2, r3
 800176a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800176e:	462c      	mov	r4, r5
 8001770:	fba3 4304 	umull	r4, r3, r3, r4
 8001774:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001778:	4623      	mov	r3, r4
 800177a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800177e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001782:	18d3      	adds	r3, r2, r3
 8001784:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 5636 	ldrd	r5, r6, [r7, #216]	@ 0xd8
 8001794:	4634      	mov	r4, r6
 8001796:	0323      	lsls	r3, r4, #12
 8001798:	462c      	mov	r4, r5
 800179a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800179e:	462c      	mov	r4, r5
 80017a0:	0322      	lsls	r2, r4, #12
 80017a2:	1884      	adds	r4, r0, r2
 80017a4:	623c      	str	r4, [r7, #32]
 80017a6:	eb41 0303 	adc.w	r3, r1, r3
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017b0:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
		var1_p = (((((int64_t)1) << 47) + var1_p) * ((int64_t)dig_P1)) >> 33;
 80017b4:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80017b8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017bc:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80017c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80017c4:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 80017c8:	2200      	movs	r2, #0
 80017ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80017ce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80017d2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80017d6:	462b      	mov	r3, r5
 80017d8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80017dc:	4602      	mov	r2, r0
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4621      	mov	r1, r4
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	4622      	mov	r2, r4
 80017f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80017f6:	fba2 1201 	umull	r1, r2, r2, r1
 80017fa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80017fe:	460a      	mov	r2, r1
 8001800:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001804:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001808:	4413      	add	r3, r2
 800180a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800181a:	4629      	mov	r1, r5
 800181c:	104a      	asrs	r2, r1, #1
 800181e:	4629      	mov	r1, r5
 8001820:	17cb      	asrs	r3, r1, #31
 8001822:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

		if (var1_p == 0) continue;
 8001826:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800182a:	4313      	orrs	r3, r2
 800182c:	f000 818a 	beq.w	8001b44 <main+0x984>
		p = 1048576 - adc_P;
 8001830:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001834:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001838:	2200      	movs	r2, #0
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	61fa      	str	r2, [r7, #28]
 800183e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001842:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
		p = (((p << 31) - var2_p) * 3125) / var1_p;
 8001846:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800184e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001852:	07db      	lsls	r3, r3, #31
 8001854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001856:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800185a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800185e:	4621      	mov	r1, r4
 8001860:	1a89      	subs	r1, r1, r2
 8001862:	6739      	str	r1, [r7, #112]	@ 0x70
 8001864:	4629      	mov	r1, r5
 8001866:	eb61 0303 	sbc.w	r3, r1, r3
 800186a:	677b      	str	r3, [r7, #116]	@ 0x74
 800186c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001870:	4622      	mov	r2, r4
 8001872:	462b      	mov	r3, r5
 8001874:	1891      	adds	r1, r2, r2
 8001876:	6139      	str	r1, [r7, #16]
 8001878:	415b      	adcs	r3, r3
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001880:	4621      	mov	r1, r4
 8001882:	1851      	adds	r1, r2, r1
 8001884:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001888:	4629      	mov	r1, r5
 800188a:	414b      	adcs	r3, r1
 800188c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800189c:	018b      	lsls	r3, r1, #6
 800189e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80018aa:	018a      	lsls	r2, r1, #6
 80018ac:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80018b0:	eb11 0802 	adds.w	r8, r1, r2
 80018b4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80018b8:	eb41 0903 	adc.w	r9, r1, r3
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80018c8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80018cc:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80018d0:	4690      	mov	r8, r2
 80018d2:	4699      	mov	r9, r3
 80018d4:	4623      	mov	r3, r4
 80018d6:	eb18 0a03 	adds.w	sl, r8, r3
 80018da:	462b      	mov	r3, r5
 80018dc:	eb49 0b03 	adc.w	fp, r9, r3
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80018ec:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80018f0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80018f4:	4692      	mov	sl, r2
 80018f6:	469b      	mov	fp, r3
 80018f8:	4623      	mov	r3, r4
 80018fa:	eb1a 0303 	adds.w	r3, sl, r3
 80018fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001900:	462b      	mov	r3, r5
 8001902:	eb4b 0303 	adc.w	r3, fp, r3
 8001906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001908:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800190c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001910:	f7ff f96a 	bl	8000be8 <__aeabi_ldivmod>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
		var1_p = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 800191c:	f9b7 3180 	ldrsh.w	r3, [r7, #384]	@ 0x180
 8001920:	17da      	asrs	r2, r3, #31
 8001922:	663b      	str	r3, [r7, #96]	@ 0x60
 8001924:	667a      	str	r2, [r7, #100]	@ 0x64
 8001926:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	0b50      	lsrs	r0, r2, #13
 8001934:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001938:	1359      	asrs	r1, r3, #13
 800193a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800193e:	462b      	mov	r3, r5
 8001940:	fb00 f203 	mul.w	r2, r0, r3
 8001944:	4623      	mov	r3, r4
 8001946:	fb03 f301 	mul.w	r3, r3, r1
 800194a:	4413      	add	r3, r2
 800194c:	4622      	mov	r2, r4
 800194e:	fba2 1200 	umull	r1, r2, r2, r0
 8001952:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001956:	460a      	mov	r2, r1
 8001958:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800195c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001966:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0b50      	lsrs	r0, r2, #13
 8001974:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001978:	1359      	asrs	r1, r3, #13
 800197a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800197e:	462b      	mov	r3, r5
 8001980:	fb00 f203 	mul.w	r2, r0, r3
 8001984:	4623      	mov	r3, r4
 8001986:	fb03 f301 	mul.w	r3, r3, r1
 800198a:	4413      	add	r3, r2
 800198c:	4622      	mov	r2, r4
 800198e:	fba2 1200 	umull	r1, r2, r2, r0
 8001992:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001996:	460a      	mov	r2, r1
 8001998:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800199c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80019a0:	4413      	add	r3, r2
 80019a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80019b2:	4621      	mov	r1, r4
 80019b4:	0e4a      	lsrs	r2, r1, #25
 80019b6:	4629      	mov	r1, r5
 80019b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019bc:	4629      	mov	r1, r5
 80019be:	164b      	asrs	r3, r1, #25
 80019c0:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
		var2_p = (((int64_t)dig_P8) * p) >> 19;
 80019c4:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	@ 0x182
 80019c8:	17da      	asrs	r2, r3, #31
 80019ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019cc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019d2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80019d6:	462a      	mov	r2, r5
 80019d8:	fb02 f203 	mul.w	r2, r2, r3
 80019dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80019e0:	4621      	mov	r1, r4
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	441a      	add	r2, r3
 80019e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019ec:	4621      	mov	r1, r4
 80019ee:	fba3 1301 	umull	r1, r3, r3, r1
 80019f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019f6:	460b      	mov	r3, r1
 80019f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001a12:	4621      	mov	r1, r4
 8001a14:	0cca      	lsrs	r2, r1, #19
 8001a16:	4629      	mov	r1, r5
 8001a18:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	14cb      	asrs	r3, r1, #19
 8001a20:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		p = ((p + var1_p + var2_p) >> 8) + (((int64_t)dig_P7) << 4);
 8001a24:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8001a28:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8001a2c:	1884      	adds	r4, r0, r2
 8001a2e:	653c      	str	r4, [r7, #80]	@ 0x50
 8001a30:	eb41 0303 	adc.w	r3, r1, r3
 8001a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a36:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001a3a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1889      	adds	r1, r1, r2
 8001a42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001a44:	4629      	mov	r1, r5
 8001a46:	eb41 0303 	adc.w	r3, r1, r3
 8001a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a58:	4623      	mov	r3, r4
 8001a5a:	0a18      	lsrs	r0, r3, #8
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a62:	462b      	mov	r3, r5
 8001a64:	1219      	asrs	r1, r3, #8
 8001a66:	f9b7 3184 	ldrsh.w	r3, [r7, #388]	@ 0x184
 8001a6a:	17da      	asrs	r2, r3, #31
 8001a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	@ 0x40
 8001a7c:	4634      	mov	r4, r6
 8001a7e:	0123      	lsls	r3, r4, #4
 8001a80:	462c      	mov	r4, r5
 8001a82:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a86:	462c      	mov	r4, r5
 8001a88:	0122      	lsls	r2, r4, #4
 8001a8a:	1884      	adds	r4, r0, r2
 8001a8c:	60bc      	str	r4, [r7, #8]
 8001a8e:	eb41 0303 	adc.w	r3, r1, r3
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a98:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150

		/* --- 6 : Conversion et affichage en virgule fixe --- */
		int32_t temperature_centi = T;               // Température en centi-degrés
 8001a9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001aa0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		int32_t pression_centi_hPa = (int32_t)(p / 256); // Pression en centi-hPa
 8001aa4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da07      	bge.n	8001abc <main+0x8fc>
 8001aac:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	f143 0300 	adc.w	r3, r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0a10      	lsrs	r0, r2, #8
 8001ac6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001aca:	1219      	asrs	r1, r3, #8
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

		printf("Temp = %ld.%02ld °C | Pression = %ld.%02ld hPa\r\n",
 8001ad6:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <main+0x988>)
 8001adc:	fb83 2301 	smull	r2, r3, r3, r1
 8001ae0:	115a      	asrs	r2, r3, #5
 8001ae2:	17cb      	asrs	r3, r1, #31
 8001ae4:	1ad5      	subs	r5, r2, r3
				temperature_centi / 100, abs(temperature_centi % 100),
 8001ae6:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8001aea:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <main+0x988>)
 8001aec:	fb83 2301 	smull	r2, r3, r3, r1
 8001af0:	115a      	asrs	r2, r3, #5
 8001af2:	17cb      	asrs	r3, r1, #31
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2264      	movs	r2, #100	@ 0x64
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	1acb      	subs	r3, r1, r3
		printf("Temp = %ld.%02ld °C | Pression = %ld.%02ld hPa\r\n",
 8001afe:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8001b02:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8001b06:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <main+0x988>)
 8001b0c:	fb83 2301 	smull	r2, r3, r3, r1
 8001b10:	115a      	asrs	r2, r3, #5
 8001b12:	17cb      	asrs	r3, r1, #31
 8001b14:	1ad0      	subs	r0, r2, r3
				pression_centi_hPa / 100, abs(pression_centi_hPa % 100));
 8001b16:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <main+0x988>)
 8001b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8001b20:	115a      	asrs	r2, r3, #5
 8001b22:	17cb      	asrs	r3, r1, #31
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2264      	movs	r2, #100	@ 0x64
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	1acb      	subs	r3, r1, r3
		printf("Temp = %ld.%02ld °C | Pression = %ld.%02ld hPa\r\n",
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bfb8      	it	lt
 8001b32:	425b      	neglt	r3, r3
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	4603      	mov	r3, r0
 8001b38:	4622      	mov	r2, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <main+0x98c>)
 8001b3e:	f005 fe83 	bl	8007848 <iprintf>
 8001b42:	e478      	b.n	8001436 <main+0x276>
		if (var1_p == 0) continue;
 8001b44:	bf00      	nop
	{
 8001b46:	e476      	b.n	8001436 <main+0x276>
 8001b48:	51eb851f 	.word	0x51eb851f
 8001b4c:	080099a4 	.word	0x080099a4

08001b50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	@ 0x50
 8001b54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	2234      	movs	r2, #52	@ 0x34
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 ffba 	bl	8007ad8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	4b2a      	ldr	r3, [pc, #168]	@ (8001c24 <SystemClock_Config+0xd4>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <SystemClock_Config+0xd4>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b84:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <SystemClock_Config+0xd4>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <SystemClock_Config+0xd8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b9c:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <SystemClock_Config+0xd8>)
 8001b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <SystemClock_Config+0xd8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001bc8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bcc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fe64 	bl	80058ac <HAL_RCC_OscConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001bea:	f000 f81f 	bl	8001c2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	230f      	movs	r3, #15
 8001bf0:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bfe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fb04 	bl	8005218 <HAL_RCC_ClockConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0xca>
	{
		Error_Handler();
 8001c16:	f000 f809 	bl	8001c2c <Error_Handler>
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	3750      	adds	r7, #80	@ 0x50
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000

08001c2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <Error_Handler+0x8>

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c76:	2007      	movs	r0, #7
 8001c78:	f000 fb36 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <NMI_Handler+0x4>

08001c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <MemManage_Handler+0x4>

08001ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <UsageFault_Handler+0x4>

08001cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cde:	f000 f9ef 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <I2C1_EV_IRQHandler+0x10>)
 8001cee:	f001 fa15 	bl	800311c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001f0 	.word	0x200001f0

08001cfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <I2C1_ER_IRQHandler+0x10>)
 8001d02:	f001 fb7c 	bl	80033fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001f0 	.word	0x200001f0

08001d10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <USART2_IRQHandler+0x10>)
 8001d16:	f004 f943 	bl	8005fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000248 	.word	0x20000248

08001d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_kill>:

int _kill(int pid, int sig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d3e:	f005 ff1d 	bl	8007b7c <__errno>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2216      	movs	r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
  return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_exit>:

void _exit (int status)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffe7 	bl	8001d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d66:	bf00      	nop
 8001d68:	e7fd      	b.n	8001d66 <_exit+0x12>

08001d6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e00a      	b.n	8001d92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7c:	f3af 8000 	nop.w
 8001d80:	4601      	mov	r1, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	b2ca      	uxtb	r2, r1
 8001d8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbf0      	blt.n	8001d7c <_read+0x12>
  }

  return len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e009      	b.n	8001dca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	60ba      	str	r2, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f9ec 	bl	800119c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf1      	blt.n	8001db6 <_write+0x12>
  }
  return len;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_close>:

int _close(int file)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e04:	605a      	str	r2, [r3, #4]
  return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_isatty>:

int _isatty(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f005 fe82 	bl	8007b7c <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20020000 	.word	0x20020000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	20000244 	.word	0x20000244
 8001eac:	200003e0 	.word	0x200003e0

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <MX_USART2_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	f003 ff6c 	bl	8005de8 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f7ff fe89 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000248 	.word	0x20000248
 8001f24:	40004400 	.word	0x40004400

08001f28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_UART_MspInit+0x94>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d133      	bne.n	8001fb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <HAL_UART_MspInit+0x98>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc0 <HAL_UART_MspInit+0x98>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_UART_MspInit+0x98>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_UART_MspInit+0x98>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <HAL_UART_MspInit+0x98>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <HAL_UART_MspInit+0x98>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f82:	230c      	movs	r3, #12
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f92:	2307      	movs	r3, #7
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <HAL_UART_MspInit+0x9c>)
 8001f9e:	f000 fa85 	bl	80024ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2026      	movs	r0, #38	@ 0x26
 8001fa8:	f000 f9a9 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fac:	2026      	movs	r0, #38	@ 0x26
 8001fae:	f000 f9c2 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	@ 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40004400 	.word	0x40004400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002000 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fcc:	f7ff ff70 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480c      	ldr	r0, [pc, #48]	@ (8002004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd2:	490d      	ldr	r1, [pc, #52]	@ (8002008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8002014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f005 fdc7 	bl	8007b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7ff f8e1 	bl	80011c0 <main>
  bx  lr    
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800200c:	08009d74 	.word	0x08009d74
  ldr r2, =_sbss
 8002010:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002014:	200003e0 	.word	0x200003e0

08002018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_Init+0x40>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <HAL_Init+0x40>)
 8002026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800202a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_Init+0x40>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a07      	ldr	r2, [pc, #28]	@ (800205c <HAL_Init+0x40>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 f94f 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	2000      	movs	r0, #0
 800204c:	f000 f808 	bl	8002060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002050:	f7ff fdf2 	bl	8001c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00

08002060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_InitTick+0x54>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_InitTick+0x58>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	fbb3 f3f1 	udiv	r3, r3, r1
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f967 	bl	8002352 <HAL_SYSTICK_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00e      	b.n	80020ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b0f      	cmp	r3, #15
 8002092:	d80a      	bhi.n	80020aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f000 f92f 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a0:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <HAL_InitTick+0x5c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e000      	b.n	80020ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000008 	.word	0x20000008
 80020bc:	20000004 	.word	0x20000004

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008
 80020e4:	20000290 	.word	0x20000290

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000290 	.word	0x20000290

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff ffee 	bl	80020e8 <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d005      	beq.n	8002126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_Delay+0x44>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002126:	bf00      	nop
 8002128:	f7ff ffde 	bl	80020e8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	429a      	cmp	r2, r3
 8002136:	d8f7      	bhi.n	8002128 <HAL_Delay+0x28>
  {
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000008 	.word	0x20000008

08002148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <__NVIC_SetPriorityGrouping+0x44>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	f003 0307 	and.w	r3, r3, #7
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	@ (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff29 	bl	8002148 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff3e 	bl	8002190 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff31 	bl	80021ac <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff feb6 	bl	80020e8 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d008      	beq.n	800239c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2280      	movs	r2, #128	@ 0x80
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e052      	b.n	8002442 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0216 	bic.w	r2, r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <HAL_DMA_Abort+0x62>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0208 	bic.w	r2, r2, #8
 80023da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ec:	e013      	b.n	8002416 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ee:	f7ff fe7b 	bl	80020e8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d90c      	bls.n	8002416 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e015      	b.n	8002442 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e4      	bne.n	80023ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002428:	223f      	movs	r2, #63	@ 0x3f
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2280      	movs	r2, #128	@ 0x80
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e00c      	b.n	8002482 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2205      	movs	r2, #5
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800249c:	b2db      	uxtb	r3, r3
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e165      	b.n	8002794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8154 	bne.w	800278e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d005      	beq.n	80024fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d130      	bne.n	8002560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0201 	and.w	r2, r3, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b03      	cmp	r3, #3
 800256a:	d017      	beq.n	800259c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d123      	bne.n	80025f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80ae 	beq.w	800278e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b5d      	ldr	r3, [pc, #372]	@ (80027ac <HAL_GPIO_Init+0x300>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	4a5c      	ldr	r2, [pc, #368]	@ (80027ac <HAL_GPIO_Init+0x300>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002640:	6453      	str	r3, [r2, #68]	@ 0x44
 8002642:	4b5a      	ldr	r3, [pc, #360]	@ (80027ac <HAL_GPIO_Init+0x300>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264e:	4a58      	ldr	r2, [pc, #352]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4f      	ldr	r2, [pc, #316]	@ (80027b4 <HAL_GPIO_Init+0x308>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d025      	beq.n	80026c6 <HAL_GPIO_Init+0x21a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4e      	ldr	r2, [pc, #312]	@ (80027b8 <HAL_GPIO_Init+0x30c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <HAL_GPIO_Init+0x216>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4d      	ldr	r2, [pc, #308]	@ (80027bc <HAL_GPIO_Init+0x310>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x212>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4c      	ldr	r2, [pc, #304]	@ (80027c0 <HAL_GPIO_Init+0x314>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4b      	ldr	r2, [pc, #300]	@ (80027c4 <HAL_GPIO_Init+0x318>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x20a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4a      	ldr	r2, [pc, #296]	@ (80027c8 <HAL_GPIO_Init+0x31c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x206>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a49      	ldr	r2, [pc, #292]	@ (80027cc <HAL_GPIO_Init+0x320>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x202>
 80026aa:	2306      	movs	r3, #6
 80026ac:	e00c      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e00a      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026c6:	2300      	movs	r3, #0
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a31      	ldr	r2, [pc, #196]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a26      	ldr	r2, [pc, #152]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273a:	4b25      	ldr	r3, [pc, #148]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275e:	4a1c      	ldr	r2, [pc, #112]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002764:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002788:	4a11      	ldr	r2, [pc, #68]	@ (80027d0 <HAL_GPIO_Init+0x324>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	f67f ae96 	bls.w	80024c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3724      	adds	r7, #36	@ 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021400 	.word	0x40021400
 80027cc:	40021800 	.word	0x40021800
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e12b      	b.n	8002a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fc5c 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	@ 0x24
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800285a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800286a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800286c:	f002 fdc6 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8002870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a81      	ldr	r2, [pc, #516]	@ (8002a7c <HAL_I2C_Init+0x274>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d807      	bhi.n	800288c <HAL_I2C_Init+0x84>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a80      	ldr	r2, [pc, #512]	@ (8002a80 <HAL_I2C_Init+0x278>)
 8002880:	4293      	cmp	r3, r2
 8002882:	bf94      	ite	ls
 8002884:	2301      	movls	r3, #1
 8002886:	2300      	movhi	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e006      	b.n	800289a <HAL_I2C_Init+0x92>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a84 <HAL_I2C_Init+0x27c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	bf94      	ite	ls
 8002894:	2301      	movls	r3, #1
 8002896:	2300      	movhi	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0e7      	b.n	8002a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a78      	ldr	r2, [pc, #480]	@ (8002a88 <HAL_I2C_Init+0x280>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0c9b      	lsrs	r3, r3, #18
 80028ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a7c <HAL_I2C_Init+0x274>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d802      	bhi.n	80028dc <HAL_I2C_Init+0xd4>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3301      	adds	r3, #1
 80028da:	e009      	b.n	80028f0 <HAL_I2C_Init+0xe8>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	4a69      	ldr	r2, [pc, #420]	@ (8002a8c <HAL_I2C_Init+0x284>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	3301      	adds	r3, #1
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002902:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	495c      	ldr	r1, [pc, #368]	@ (8002a7c <HAL_I2C_Init+0x274>)
 800290c:	428b      	cmp	r3, r1
 800290e:	d819      	bhi.n	8002944 <HAL_I2C_Init+0x13c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e59      	subs	r1, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fbb1 f3f3 	udiv	r3, r1, r3
 800291e:	1c59      	adds	r1, r3, #1
 8002920:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002924:	400b      	ands	r3, r1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_I2C_Init+0x138>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1e59      	subs	r1, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fbb1 f3f3 	udiv	r3, r1, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293e:	e051      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 8002940:	2304      	movs	r3, #4
 8002942:	e04f      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d111      	bne.n	8002970 <HAL_I2C_Init+0x168>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e58      	subs	r0, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e012      	b.n	8002996 <HAL_I2C_Init+0x18e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	0099      	lsls	r1, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Init+0x196>
 800299a:	2301      	movs	r3, #1
 800299c:	e022      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10e      	bne.n	80029c4 <HAL_I2C_Init+0x1bc>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1e58      	subs	r0, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	440b      	add	r3, r1
 80029b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_Init+0x1dc>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	0099      	lsls	r1, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	6809      	ldr	r1, [r1, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6911      	ldr	r1, [r2, #16]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	000186a0 	.word	0x000186a0
 8002a80:	001e847f 	.word	0x001e847f
 8002a84:	003d08ff 	.word	0x003d08ff
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	10624dd3 	.word	0x10624dd3

08002a90 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b80      	cmp	r3, #128	@ 0x80
 8002aa4:	d103      	bne.n	8002aae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	817b      	strh	r3, [r7, #10]
 8002acc:	4613      	mov	r3, r2
 8002ace:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff fb0a 	bl	80020e8 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 80e0 	bne.w	8002ca4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2319      	movs	r3, #25
 8002aea:	2201      	movs	r2, #1
 8002aec:	4970      	ldr	r1, [pc, #448]	@ (8002cb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f002 f90e 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0d3      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x50>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d007      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2221      	movs	r2, #33	@ 0x21
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a50      	ldr	r2, [pc, #320]	@ (8002cb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f001 fed0 	bl	8004920 <I2C_MasterRequestWrite>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08d      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ba0:	e066      	b.n	8002c70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f002 f9cc 	bl	8004f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06b      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d11b      	bne.n	8002c44 <HAL_I2C_Master_Transmit+0x188>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d017      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	6a39      	ldr	r1, [r7, #32]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f002 f9c3 	bl	8004fd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e01a      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d194      	bne.n	8002ba2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000

08002cb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	@ 0x30
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fa0c 	bl	80020e8 <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 8217 	bne.w	800310e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	497c      	ldr	r1, [pc, #496]	@ (8002edc <HAL_I2C_Master_Receive+0x224>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f002 f810 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e20a      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Receive+0x50>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e203      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2222      	movs	r2, #34	@ 0x22
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee0 <HAL_I2C_Master_Receive+0x228>)
 8002d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f001 fe54 	bl	8004a24 <I2C_MasterRequestRead>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1c4      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d113      	bne.n	8002db6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e198      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d11b      	bne.n	8002df6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e178      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d11b      	bne.n	8002e36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	e158      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e5c:	e144      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	f200 80f1 	bhi.w	800304a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d123      	bne.n	8002eb8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f002 f927 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e145      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb6:	e117      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d14e      	bne.n	8002f5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4906      	ldr	r1, [pc, #24]	@ (8002ee4 <HAL_I2C_Master_Receive+0x22c>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f001 ff20 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e11a      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
 8002eda:	bf00      	nop
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000
 8002ee4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f5c:	e0c4      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	2200      	movs	r2, #0
 8002f66:	496c      	ldr	r1, [pc, #432]	@ (8003118 <HAL_I2C_Master_Receive+0x460>)
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f001 fed1 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0cb      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4955      	ldr	r1, [pc, #340]	@ (8003118 <HAL_I2C_Master_Receive+0x460>)
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f001 fea3 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e09d      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003048:	e04e      	b.n	80030e8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f002 f83a 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e058      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b04      	cmp	r3, #4
 800309c:	d124      	bne.n	80030e8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f aeb6 	bne.w	8002e5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3728      	adds	r7, #40	@ 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010004 	.word	0x00010004

0800311c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800313c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003144:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d003      	beq.n	8003154 <HAL_I2C_EV_IRQHandler+0x38>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b40      	cmp	r3, #64	@ 0x40
 8003150:	f040 80c1 	bne.w	80032d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_I2C_EV_IRQHandler+0x6e>
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003174:	d003      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x62>
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800317c:	d101      	bne.n	8003182 <HAL_I2C_EV_IRQHandler+0x66>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_I2C_EV_IRQHandler+0x68>
 8003182:	2300      	movs	r3, #0
 8003184:	2b01      	cmp	r3, #1
 8003186:	f000 8132 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00c      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x92>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	0a5b      	lsrs	r3, r3, #9
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f002 f81d 	bl	80051e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fd9b 	bl	8003ce2 <I2C_Master_SB>
 80031ac:	e092      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_I2C_EV_IRQHandler+0xb2>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fe11 	bl	8003dee <I2C_Master_ADD10>
 80031cc:	e082      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_I2C_EV_IRQHandler+0xd2>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fe2b 	bl	8003e42 <I2C_Master_ADDR>
 80031ec:	e072      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03b      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003208:	f000 80f3 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	09db      	lsrs	r3, r3, #7
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00f      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x11c>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	0a9b      	lsrs	r3, r3, #10
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x11c>
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f9f3 	bl	800361c <I2C_MasterTransmit_TXE>
 8003236:	e04d      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80d6 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0a5b      	lsrs	r3, r3, #9
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80cf 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	2b21      	cmp	r3, #33	@ 0x21
 8003258:	d103      	bne.n	8003262 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa7a 	bl	8003754 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003260:	e0c7      	b.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b40      	cmp	r3, #64	@ 0x40
 8003266:	f040 80c4 	bne.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fae8 	bl	8003840 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003270:	e0bf      	b.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003280:	f000 80b7 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x194>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x194>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb61 	bl	8003970 <I2C_MasterReceive_RXNE>
 80032ae:	e011      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 809a 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8093 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fc17 	bl	8003b00 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d2:	e08e      	b.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80032d4:	e08d      	b.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e007      	b.n	80032f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_I2C_EV_IRQHandler+0x20e>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 ffdc 	bl	80042e0 <I2C_Slave_ADDR>
 8003328:	e066      	b.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_I2C_EV_IRQHandler+0x22e>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	0a5b      	lsrs	r3, r3, #9
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f001 f816 	bl	8004374 <I2C_Slave_STOPF>
 8003348:	e056      	b.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800334a:	7bbb      	ldrb	r3, [r7, #14]
 800334c:	2b21      	cmp	r3, #33	@ 0x21
 800334e:	d002      	beq.n	8003356 <HAL_I2C_EV_IRQHandler+0x23a>
 8003350:	7bbb      	ldrb	r3, [r7, #14]
 8003352:	2b29      	cmp	r3, #41	@ 0x29
 8003354:	d125      	bne.n	80033a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	09db      	lsrs	r3, r3, #7
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00f      	beq.n	8003382 <HAL_I2C_EV_IRQHandler+0x266>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	0a9b      	lsrs	r3, r3, #10
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_I2C_EV_IRQHandler+0x266>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fef2 	bl	8004164 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003380:	e039      	b.n	80033f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d033      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	0a5b      	lsrs	r3, r3, #9
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02d      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 ff1f 	bl	80041de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033a0:	e029      	b.n	80033f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00f      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	0a9b      	lsrs	r3, r3, #10
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 ff2a 	bl	8004220 <I2C_SlaveReceive_RXNE>
 80033cc:	e014      	b.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00e      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 ff58 	bl	800429c <I2C_SlaveReceive_BTF>
 80033ec:	e004      	b.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033ee:	bf00      	nop
 80033f0:	e002      	b.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b08a      	sub	sp, #40	@ 0x28
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003420:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <HAL_I2C_ER_IRQHandler+0x4e>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800344a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	0a5b      	lsrs	r3, r3, #9
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <HAL_I2C_ER_IRQHandler+0x78>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003474:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	0a9b      	lsrs	r3, r3, #10
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03f      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0x104>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d039      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800348e:	7efb      	ldrb	r3, [r7, #27]
 8003490:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034a8:	7ebb      	ldrb	r3, [r7, #26]
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d112      	bne.n	80034d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10f      	bne.n	80034d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	2b21      	cmp	r3, #33	@ 0x21
 80034b8:	d008      	beq.n	80034cc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b29      	cmp	r3, #41	@ 0x29
 80034be:	d005      	beq.n	80034cc <HAL_I2C_ER_IRQHandler+0xce>
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	2b28      	cmp	r3, #40	@ 0x28
 80034c4:	d106      	bne.n	80034d4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b21      	cmp	r3, #33	@ 0x21
 80034ca:	d103      	bne.n	80034d4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f001 f881 	bl	80045d4 <I2C_Slave_AF>
 80034d2:	e016      	b.n	8003502 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034e6:	7efb      	ldrb	r3, [r7, #27]
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d002      	beq.n	80034f2 <HAL_I2C_ER_IRQHandler+0xf4>
 80034ec:	7efb      	ldrb	r3, [r7, #27]
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d107      	bne.n	8003502 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003500:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	0adb      	lsrs	r3, r3, #11
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <HAL_I2C_ER_IRQHandler+0x12e>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800352a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f001 f8bc 	bl	80046bc <I2C_ITError>
  }
}
 8003544:	bf00      	nop
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
 80035a8:	4613      	mov	r3, r2
 80035aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003632:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d150      	bne.n	80036e4 <I2C_MasterTransmit_TXE+0xc8>
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	2b21      	cmp	r3, #33	@ 0x21
 8003646:	d14d      	bne.n	80036e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b08      	cmp	r3, #8
 800364c:	d01d      	beq.n	800368a <I2C_MasterTransmit_TXE+0x6e>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b20      	cmp	r3, #32
 8003652:	d01a      	beq.n	800368a <I2C_MasterTransmit_TXE+0x6e>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800365a:	d016      	beq.n	800368a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800366a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2211      	movs	r2, #17
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ff62 	bl	800354c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003688:	e060      	b.n	800374c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003698:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b40      	cmp	r3, #64	@ 0x40
 80036c2:	d107      	bne.n	80036d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff7d 	bl	80035cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036d2:	e03b      	b.n	800374c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff35 	bl	800354c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036e2:	e033      	b.n	800374c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b21      	cmp	r3, #33	@ 0x21
 80036e8:	d005      	beq.n	80036f6 <I2C_MasterTransmit_TXE+0xda>
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d12d      	bne.n	800374c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b22      	cmp	r3, #34	@ 0x22
 80036f4:	d12a      	bne.n	800374c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003710:	e01c      	b.n	800374c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b40      	cmp	r3, #64	@ 0x40
 800371c:	d103      	bne.n	8003726 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f88e 	bl	8003840 <I2C_MemoryTransmit_TXE_BTF>
}
 8003724:	e012      	b.n	800374c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800374a:	e7ff      	b.n	800374c <I2C_MasterTransmit_TXE+0x130>
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b21      	cmp	r3, #33	@ 0x21
 800376c:	d164      	bne.n	8003838 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800379c:	e04c      	b.n	8003838 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d01d      	beq.n	80037e0 <I2C_MasterTransmit_BTF+0x8c>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d01a      	beq.n	80037e0 <I2C_MasterTransmit_BTF+0x8c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037b0:	d016      	beq.n	80037e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2211      	movs	r2, #17
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff feb7 	bl	800354c <HAL_I2C_MasterTxCpltCallback>
}
 80037de:	e02b      	b.n	8003838 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d107      	bne.n	800382a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fed2 	bl	80035cc <HAL_I2C_MemTxCpltCallback>
}
 8003828:	e006      	b.n	8003838 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fe8a 	bl	800354c <HAL_I2C_MasterTxCpltCallback>
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11d      	bne.n	8003894 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10b      	bne.n	8003878 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003864:	b2da      	uxtb	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003876:	e077      	b.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387c:	b29b      	uxth	r3, r3
 800387e:	121b      	asrs	r3, r3, #8
 8003880:	b2da      	uxtb	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003892:	e069      	b.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10b      	bne.n	80038b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038b2:	e059      	b.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d152      	bne.n	8003962 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b22      	cmp	r3, #34	@ 0x22
 80038c0:	d10d      	bne.n	80038de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038dc:	e044      	b.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b21      	cmp	r3, #33	@ 0x21
 80038ec:	d112      	bne.n	8003914 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003912:	e029      	b.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d124      	bne.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b21      	cmp	r3, #33	@ 0x21
 8003922:	d121      	bne.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003932:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003942:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe36 	bl	80035cc <HAL_I2C_MemTxCpltCallback>
}
 8003960:	e002      	b.n	8003968 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff f894 	bl	8002a90 <I2C_Flush_DR>
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b22      	cmp	r3, #34	@ 0x22
 8003982:	f040 80b9 	bne.w	8003af8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d921      	bls.n	80039de <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	f040 8096 	bne.w	8003af8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039da:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80039dc:	e08c      	b.n	8003af8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d07f      	beq.n	8003ae6 <I2C_MasterReceive_RXNE+0x176>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <I2C_MasterReceive_RXNE+0x82>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d179      	bne.n	8003ae6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f001 fb36 	bl	8005064 <I2C_WaitOnSTOPRequestThroughIT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d14c      	bne.n	8003a98 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a0c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d10a      	bne.n	8003a6e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fdba 	bl	80035e0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a6c:	e044      	b.n	8003af8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d002      	beq.n	8003a82 <I2C_MasterReceive_RXNE+0x112>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d103      	bne.n	8003a8a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a88:	e002      	b.n	8003a90 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2212      	movs	r2, #18
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fd65 	bl	8003560 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a96:	e02f      	b.n	8003af8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aa6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fd88 	bl	80035f4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ae4:	e008      	b.n	8003af8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af4:	605a      	str	r2, [r3, #4]
}
 8003af6:	e7ff      	b.n	8003af8 <I2C_MasterReceive_RXNE+0x188>
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b26:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b4e:	e0c4      	b.n	8003cda <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d129      	bne.n	8003bae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b68:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d00a      	beq.n	8003b86 <I2C_MasterReceive_BTF+0x86>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d007      	beq.n	8003b86 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b84:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bac:	e095      	b.n	8003cda <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d17d      	bne.n	8003cb4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d002      	beq.n	8003bc4 <I2C_MasterReceive_BTF+0xc4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d108      	bne.n	8003bd6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e016      	b.n	8003c04 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d002      	beq.n	8003be2 <I2C_MasterReceive_BTF+0xe2>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d108      	bne.n	8003bf4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e007      	b.n	8003c04 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b40      	cmp	r3, #64	@ 0x40
 8003c72:	d10a      	bne.n	8003c8a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fcac 	bl	80035e0 <HAL_I2C_MemRxCpltCallback>
}
 8003c88:	e027      	b.n	8003cda <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d002      	beq.n	8003c9e <I2C_MasterReceive_BTF+0x19e>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d103      	bne.n	8003ca6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca4:	e002      	b.n	8003cac <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2212      	movs	r2, #18
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fc57 	bl	8003560 <HAL_I2C_MasterRxCpltCallback>
}
 8003cb2:	e012      	b.n	8003cda <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d117      	bne.n	8003d26 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d0e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d10:	e067      	b.n	8003de2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	611a      	str	r2, [r3, #16]
}
 8003d24:	e05d      	b.n	8003de2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d2e:	d133      	bne.n	8003d98 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b21      	cmp	r3, #33	@ 0x21
 8003d3a:	d109      	bne.n	8003d50 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	e008      	b.n	8003d62 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <I2C_Master_SB+0x92>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d032      	beq.n	8003de2 <I2C_Master_SB+0x100>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02d      	beq.n	8003de2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d94:	605a      	str	r2, [r3, #4]
}
 8003d96:	e024      	b.n	8003de2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10e      	bne.n	8003dbe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	11db      	asrs	r3, r3, #7
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0306 	and.w	r3, r3, #6
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f063 030f 	orn	r3, r3, #15
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]
}
 8003dbc:	e011      	b.n	8003de2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10d      	bne.n	8003de2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	11db      	asrs	r3, r3, #7
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0306 	and.w	r3, r3, #6
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f063 030e 	orn	r3, r3, #14
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <I2C_Master_ADD10+0x26>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <I2C_Master_ADD10+0x48>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e34:	605a      	str	r2, [r3, #4]
  }
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b091      	sub	sp, #68	@ 0x44
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b22      	cmp	r3, #34	@ 0x22
 8003e6a:	f040 8169 	bne.w	8004140 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10f      	bne.n	8003e96 <I2C_Master_ADDR+0x54>
 8003e76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d10b      	bne.n	8003e96 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	e160      	b.n	8004158 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d11d      	bne.n	8003eda <I2C_Master_ADDR+0x98>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ea6:	d118      	bne.n	8003eda <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ecc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ed8:	e13e      	b.n	8004158 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e115      	b.n	8004138 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	f040 808a 	bne.w	800402c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f1e:	d137      	bne.n	8003f90 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3e:	d113      	bne.n	8003f68 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	e0e7      	b.n	8004138 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e0d3      	b.n	8004138 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d02e      	beq.n	8003ff4 <I2C_Master_ADDR+0x1b2>
 8003f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d02b      	beq.n	8003ff4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9e:	2b12      	cmp	r3, #18
 8003fa0:	d102      	bne.n	8003fa8 <I2C_Master_ADDR+0x166>
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d125      	bne.n	8003ff4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d00e      	beq.n	8003fcc <I2C_Master_ADDR+0x18a>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d00b      	beq.n	8003fcc <I2C_Master_ADDR+0x18a>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d008      	beq.n	8003fcc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e007      	b.n	8003fdc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fda:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	e0a1      	b.n	8004138 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004002:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e085      	b.n	8004138 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d14d      	bne.n	80040d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	2b04      	cmp	r3, #4
 800403a:	d016      	beq.n	800406a <I2C_Master_ADDR+0x228>
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	2b02      	cmp	r3, #2
 8004040:	d013      	beq.n	800406a <I2C_Master_ADDR+0x228>
 8004042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004044:	2b10      	cmp	r3, #16
 8004046:	d010      	beq.n	800406a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004056:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e007      	b.n	800407a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004078:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004088:	d117      	bne.n	80040ba <I2C_Master_ADDR+0x278>
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004090:	d00b      	beq.n	80040aa <I2C_Master_ADDR+0x268>
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	2b01      	cmp	r3, #1
 8004096:	d008      	beq.n	80040aa <I2C_Master_ADDR+0x268>
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	2b08      	cmp	r3, #8
 800409c:	d005      	beq.n	80040aa <I2C_Master_ADDR+0x268>
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d002      	beq.n	80040aa <I2C_Master_ADDR+0x268>
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d107      	bne.n	80040ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	e032      	b.n	8004138 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f0:	d117      	bne.n	8004122 <I2C_Master_ADDR+0x2e0>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040f8:	d00b      	beq.n	8004112 <I2C_Master_ADDR+0x2d0>
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d008      	beq.n	8004112 <I2C_Master_ADDR+0x2d0>
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	2b08      	cmp	r3, #8
 8004104:	d005      	beq.n	8004112 <I2C_Master_ADDR+0x2d0>
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	2b10      	cmp	r3, #16
 800410a:	d002      	beq.n	8004112 <I2C_Master_ADDR+0x2d0>
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	2b20      	cmp	r3, #32
 8004110:	d107      	bne.n	8004122 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004120:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800413e:	e00b      	b.n	8004158 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	e7ff      	b.n	8004158 <I2C_Master_ADDR+0x316>
 8004158:	bf00      	nop
 800415a:	3744      	adds	r7, #68	@ 0x44
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004172:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02b      	beq.n	80041d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d114      	bne.n	80041d6 <I2C_SlaveTransmit_TXE+0x72>
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b29      	cmp	r3, #41	@ 0x29
 80041b0:	d111      	bne.n	80041d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2221      	movs	r2, #33	@ 0x21
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2228      	movs	r2, #40	@ 0x28
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff f9cf 	bl	8003574 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d011      	beq.n	8004214 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02c      	beq.n	8004294 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d114      	bne.n	8004294 <I2C_SlaveReceive_RXNE+0x74>
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b2a      	cmp	r3, #42	@ 0x2a
 800426e:	d111      	bne.n	8004294 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800427e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2222      	movs	r2, #34	@ 0x22
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2228      	movs	r2, #40	@ 0x28
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff f97a 	bl	8003588 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d012      	beq.n	80042d4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042fa:	2b28      	cmp	r3, #40	@ 0x28
 80042fc:	d127      	bne.n	800434e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800431a:	2301      	movs	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	09db      	lsrs	r3, r3, #7
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	81bb      	strh	r3, [r7, #12]
 8004330:	e002      	b.n	8004338 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004340:	89ba      	ldrh	r2, [r7, #12]
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff f928 	bl	800359c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800434c:	e00e      	b.n	800436c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004382:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004392:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d0:	d172      	bne.n	80044b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b22      	cmp	r3, #34	@ 0x22
 80043d6:	d002      	beq.n	80043de <I2C_Slave_STOPF+0x6a>
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b2a      	cmp	r3, #42	@ 0x2a
 80043dc:	d135      	bne.n	800444a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f043 0204 	orr.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004410:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe f839 	bl	800248e <HAL_DMA_GetState>
 800441c:	4603      	mov	r3, r0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d049      	beq.n	80044b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	4a69      	ldr	r2, [pc, #420]	@ (80045cc <I2C_Slave_STOPF+0x258>)
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe f80b 	bl	800244a <HAL_DMA_Abort_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03d      	beq.n	80044b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004448:	e035      	b.n	80044b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f803 	bl	800248e <HAL_DMA_GetState>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d014      	beq.n	80044b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	4a4e      	ldr	r2, [pc, #312]	@ (80045cc <I2C_Slave_STOPF+0x258>)
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd ffd5 	bl	800244a <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044b0:	4610      	mov	r0, r2
 80044b2:	4798      	blx	r3
 80044b4:	e000      	b.n	80044b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03e      	beq.n	8004540 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d112      	bne.n	80044f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d112      	bne.n	800452a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8b7 	bl	80046bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800454e:	e039      	b.n	80045c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b2a      	cmp	r3, #42	@ 0x2a
 8004554:	d109      	bne.n	800456a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2228      	movs	r2, #40	@ 0x28
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff f80f 	bl	8003588 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b28      	cmp	r3, #40	@ 0x28
 8004574:	d111      	bne.n	800459a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a15      	ldr	r2, [pc, #84]	@ (80045d0 <I2C_Slave_STOPF+0x25c>)
 800457a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff f810 	bl	80035b8 <HAL_I2C_ListenCpltCallback>
}
 8004598:	e014      	b.n	80045c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	2b22      	cmp	r3, #34	@ 0x22
 80045a0:	d002      	beq.n	80045a8 <I2C_Slave_STOPF+0x234>
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b22      	cmp	r3, #34	@ 0x22
 80045a6:	d10d      	bne.n	80045c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fe ffe2 	bl	8003588 <HAL_I2C_SlaveRxCpltCallback>
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	08004bc1 	.word	0x08004bc1
 80045d0:	ffff0000 	.word	0xffff0000

080045d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d002      	beq.n	80045f6 <I2C_Slave_AF+0x22>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d129      	bne.n	800464a <I2C_Slave_AF+0x76>
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b28      	cmp	r3, #40	@ 0x28
 80045fa:	d126      	bne.n	800464a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a2e      	ldr	r2, [pc, #184]	@ (80046b8 <I2C_Slave_AF+0xe4>)
 8004600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004610:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800461a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fe ffb8 	bl	80035b8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004648:	e031      	b.n	80046ae <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b21      	cmp	r3, #33	@ 0x21
 800464e:	d129      	bne.n	80046a4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a19      	ldr	r2, [pc, #100]	@ (80046b8 <I2C_Slave_AF+0xe4>)
 8004654:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2221      	movs	r2, #33	@ 0x21
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004684:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004694:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fe f9fa 	bl	8002a90 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fe ff69 	bl	8003574 <HAL_I2C_SlaveTxCpltCallback>
}
 80046a2:	e004      	b.n	80046ae <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ac:	615a      	str	r2, [r3, #20]
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	ffff0000 	.word	0xffff0000

080046bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046d4:	7bbb      	ldrb	r3, [r7, #14]
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d002      	beq.n	80046e0 <I2C_ITError+0x24>
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d10a      	bne.n	80046f6 <I2C_ITError+0x3a>
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b22      	cmp	r3, #34	@ 0x22
 80046e4:	d107      	bne.n	80046f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046fc:	2b28      	cmp	r3, #40	@ 0x28
 80046fe:	d107      	bne.n	8004710 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2228      	movs	r2, #40	@ 0x28
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800470e:	e015      	b.n	800473c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800471e:	d00a      	beq.n	8004736 <I2C_ITError+0x7a>
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b60      	cmp	r3, #96	@ 0x60
 8004724:	d007      	beq.n	8004736 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474a:	d162      	bne.n	8004812 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800475a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d020      	beq.n	80047ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	4a6a      	ldr	r2, [pc, #424]	@ (8004918 <I2C_ITError+0x25c>)
 8004770:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd fe67 	bl	800244a <HAL_DMA_Abort_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8089 	beq.w	8004896 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047a6:	4610      	mov	r0, r2
 80047a8:	4798      	blx	r3
 80047aa:	e074      	b.n	8004896 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	4a59      	ldr	r2, [pc, #356]	@ (8004918 <I2C_ITError+0x25c>)
 80047b2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd fe46 	bl	800244a <HAL_DMA_Abort_IT>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d068      	beq.n	8004896 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ce:	2b40      	cmp	r3, #64	@ 0x40
 80047d0:	d10b      	bne.n	80047ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800480c:	4610      	mov	r0, r2
 800480e:	4798      	blx	r3
 8004810:	e041      	b.n	8004896 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b60      	cmp	r3, #96	@ 0x60
 800481c:	d125      	bne.n	800486a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004836:	2b40      	cmp	r3, #64	@ 0x40
 8004838:	d10b      	bne.n	8004852 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe fed0 	bl	8003608 <HAL_I2C_AbortCpltCallback>
 8004868:	e015      	b.n	8004896 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d10b      	bne.n	8004890 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fe feaf 	bl	80035f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10e      	bne.n	80048c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d113      	bne.n	8004910 <I2C_ITError+0x254>
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b28      	cmp	r3, #40	@ 0x28
 80048ec:	d110      	bne.n	8004910 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	@ (800491c <I2C_ITError+0x260>)
 80048f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fe fe54 	bl	80035b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	08004bc1 	.word	0x08004bc1
 800491c:	ffff0000 	.word	0xffff0000

08004920 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	460b      	mov	r3, r1
 800492e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d006      	beq.n	800494a <I2C_MasterRequestWrite+0x2a>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d003      	beq.n	800494a <I2C_MasterRequestWrite+0x2a>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004948:	d108      	bne.n	800495c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e00b      	b.n	8004974 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	2b12      	cmp	r3, #18
 8004962:	d107      	bne.n	8004974 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f9c5 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800499a:	d103      	bne.n	80049a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e035      	b.n	8004a14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049b0:	d108      	bne.n	80049c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049c0:	611a      	str	r2, [r3, #16]
 80049c2:	e01b      	b.n	80049fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049c4:	897b      	ldrh	r3, [r7, #10]
 80049c6:	11db      	asrs	r3, r3, #7
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f063 030f 	orn	r3, r3, #15
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	490e      	ldr	r1, [pc, #56]	@ (8004a1c <I2C_MasterRequestWrite+0xfc>)
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fa0e 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e010      	b.n	8004a14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049f2:	897b      	ldrh	r3, [r7, #10]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4907      	ldr	r1, [pc, #28]	@ (8004a20 <I2C_MasterRequestWrite+0x100>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f9fe 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	00010008 	.word	0x00010008
 8004a20:	00010002 	.word	0x00010002

08004a24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	460b      	mov	r3, r1
 8004a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d006      	beq.n	8004a5e <I2C_MasterRequestRead+0x3a>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <I2C_MasterRequestRead+0x3a>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a5c:	d108      	bne.n	8004a70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e00b      	b.n	8004a88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	2b11      	cmp	r3, #17
 8004a76:	d107      	bne.n	8004a88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f93b 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aae:	d103      	bne.n	8004ab8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e079      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]
 8004ad6:	e05f      	b.n	8004b98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ad8:	897b      	ldrh	r3, [r7, #10]
 8004ada:	11db      	asrs	r3, r3, #7
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0306 	and.w	r3, r3, #6
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f063 030f 	orn	r3, r3, #15
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4930      	ldr	r1, [pc, #192]	@ (8004bb8 <I2C_MasterRequestRead+0x194>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f984 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e054      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4929      	ldr	r1, [pc, #164]	@ (8004bbc <I2C_MasterRequestRead+0x198>)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f974 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e044      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f8d9 	bl	8004d10 <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b72:	d103      	bne.n	8004b7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e017      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b80:	897b      	ldrh	r3, [r7, #10]
 8004b82:	11db      	asrs	r3, r3, #7
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0306 	and.w	r3, r3, #6
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f063 030e 	orn	r3, r3, #14
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	4907      	ldr	r1, [pc, #28]	@ (8004bbc <I2C_MasterRequestRead+0x198>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f930 	bl	8004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	00010008 	.word	0x00010008
 8004bbc:	00010002 	.word	0x00010002

08004bc0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bda:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <I2C_DMAAbort+0x148>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	08db      	lsrs	r3, r3, #3
 8004be0:	4a4a      	ldr	r2, [pc, #296]	@ (8004d0c <I2C_DMAAbort+0x14c>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	0a1a      	lsrs	r2, r3, #8
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	00da      	lsls	r2, r3, #3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f043 0220 	orr.w	r2, r3, #32
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c06:	e00a      	b.n	8004c1e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1c:	d0ea      	beq.n	8004bf4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c4c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	2200      	movs	r2, #0
 8004c62:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	2200      	movs	r2, #0
 8004c72:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b60      	cmp	r3, #96	@ 0x60
 8004c8e:	d10e      	bne.n	8004cae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ca6:	6978      	ldr	r0, [r7, #20]
 8004ca8:	f7fe fcae 	bl	8003608 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cac:	e027      	b.n	8004cfe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cb4:	2b28      	cmp	r3, #40	@ 0x28
 8004cb6:	d117      	bne.n	8004ce8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cd6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2228      	movs	r2, #40	@ 0x28
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ce6:	e007      	b.n	8004cf8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004cf8:	6978      	ldr	r0, [r7, #20]
 8004cfa:	f7fe fc7b 	bl	80035f4 <HAL_I2C_ErrorCallback>
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	14f8b589 	.word	0x14f8b589

08004d10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d20:	e048      	b.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d044      	beq.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2a:	f7fd f9dd 	bl	80020e8 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d139      	bne.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10d      	bne.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	43da      	mvns	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	e00c      	b.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	43da      	mvns	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d116      	bne.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e023      	b.n	8004dfc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10d      	bne.n	8004dda <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	e00c      	b.n	8004df4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d093      	beq.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e12:	e071      	b.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d123      	bne.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f043 0204 	orr.w	r2, r3, #4
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e067      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d041      	beq.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e74:	f7fd f938 	bl	80020e8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d302      	bcc.n	8004e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d136      	bne.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d10c      	bne.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e00b      	b.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e021      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10c      	bne.n	8004f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e00b      	b.n	8004f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	43da      	mvns	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f af6d 	bne.w	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f50:	e034      	b.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f915 	bl	8005182 <I2C_IsAcknowledgeFailed>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e034      	b.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d028      	beq.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6a:	f7fd f8bd 	bl	80020e8 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d302      	bcc.n	8004f80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d11d      	bne.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	2b80      	cmp	r3, #128	@ 0x80
 8004f8c:	d016      	beq.n	8004fbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e007      	b.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b80      	cmp	r3, #128	@ 0x80
 8004fc8:	d1c3      	bne.n	8004f52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe0:	e034      	b.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8cd 	bl	8005182 <I2C_IsAcknowledgeFailed>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e034      	b.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d028      	beq.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7fd f875 	bl	80020e8 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11d      	bne.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d016      	beq.n	800504c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e007      	b.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d1c3      	bne.n	8004fe2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	08db      	lsrs	r3, r3, #3
 8005076:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	0a1a      	lsrs	r2, r3, #8
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3b01      	subs	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e008      	b.n	80050b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b0:	d0e9      	beq.n	8005086 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	20000000 	.word	0x20000000
 80050c4:	14f8b589 	.word	0x14f8b589

080050c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d4:	e049      	b.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d119      	bne.n	8005118 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0210 	mvn.w	r2, #16
 80050ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e030      	b.n	800517a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005118:	f7fc ffe6 	bl	80020e8 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11d      	bne.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b40      	cmp	r3, #64	@ 0x40
 800513a:	d016      	beq.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f043 0220 	orr.w	r2, r3, #32
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e007      	b.n	800517a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d1ae      	bne.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005198:	d11b      	bne.n	80051d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f043 0204 	orr.w	r2, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80051f0:	d103      	bne.n	80051fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051f8:	e007      	b.n	800520a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005202:	d102      	bne.n	800520a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2208      	movs	r2, #8
 8005208:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0cc      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800522c:	4b68      	ldr	r3, [pc, #416]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d90c      	bls.n	8005254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b65      	ldr	r3, [pc, #404]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0b8      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800526c:	4b59      	ldr	r3, [pc, #356]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a58      	ldr	r2, [pc, #352]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005276:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005284:	4b53      	ldr	r3, [pc, #332]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a52      	ldr	r2, [pc, #328]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800528e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b50      	ldr	r3, [pc, #320]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	494d      	ldr	r1, [pc, #308]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d044      	beq.n	8005338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	4b47      	ldr	r3, [pc, #284]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d119      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e07f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d6:	4b3f      	ldr	r3, [pc, #252]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e6:	4b3b      	ldr	r3, [pc, #236]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e067      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052f6:	4b37      	ldr	r3, [pc, #220]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 0203 	bic.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4934      	ldr	r1, [pc, #208]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005308:	f7fc feee 	bl	80020e8 <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530e:	e00a      	b.n	8005326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005310:	f7fc feea 	bl	80020e8 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e04f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	4b2b      	ldr	r3, [pc, #172]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 020c 	and.w	r2, r3, #12
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	429a      	cmp	r2, r3
 8005336:	d1eb      	bne.n	8005310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005338:	4b25      	ldr	r3, [pc, #148]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d20c      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b22      	ldr	r3, [pc, #136]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b20      	ldr	r3, [pc, #128]	@ (80053d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e032      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4916      	ldr	r1, [pc, #88]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800538a:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	490e      	ldr	r1, [pc, #56]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800539e:	f000 f855 	bl	800544c <HAL_RCC_GetSysClockFreq>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	490a      	ldr	r1, [pc, #40]	@ (80053d8 <HAL_RCC_ClockConfig+0x1c0>)
 80053b0:	5ccb      	ldrb	r3, [r1, r3]
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	4a09      	ldr	r2, [pc, #36]	@ (80053dc <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <HAL_RCC_ClockConfig+0x1c8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fc fe4e 	bl	8002060 <HAL_InitTick>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40023c00 	.word	0x40023c00
 80053d4:	40023800 	.word	0x40023800
 80053d8:	080099d8 	.word	0x080099d8
 80053dc:	20000000 	.word	0x20000000
 80053e0:	20000004 	.word	0x20000004

080053e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000000 	.word	0x20000000

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	080099e8 	.word	0x080099e8

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffdc 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	080099e8 	.word	0x080099e8

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005450:	b0ae      	sub	sp, #184	@ 0xb8
 8005452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005472:	4bcb      	ldr	r3, [pc, #812]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b0c      	cmp	r3, #12
 800547c:	f200 8206 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x440>
 8005480:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054bd 	.word	0x080054bd
 800548c:	0800588d 	.word	0x0800588d
 8005490:	0800588d 	.word	0x0800588d
 8005494:	0800588d 	.word	0x0800588d
 8005498:	080054c5 	.word	0x080054c5
 800549c:	0800588d 	.word	0x0800588d
 80054a0:	0800588d 	.word	0x0800588d
 80054a4:	0800588d 	.word	0x0800588d
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	0800588d 	.word	0x0800588d
 80054b0:	0800588d 	.word	0x0800588d
 80054b4:	0800588d 	.word	0x0800588d
 80054b8:	080056bd 	.word	0x080056bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4bb9      	ldr	r3, [pc, #740]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80054be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054c2:	e1e7      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c4:	4bb8      	ldr	r3, [pc, #736]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054ca:	e1e3      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054cc:	4bb4      	ldr	r3, [pc, #720]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d8:	4bb1      	ldr	r3, [pc, #708]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d071      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e4:	4bae      	ldr	r3, [pc, #696]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80054f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005500:	2300      	movs	r3, #0
 8005502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f04f 0000 	mov.w	r0, #0
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	0159      	lsls	r1, r3, #5
 8005518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551c:	0150      	lsls	r0, r2, #5
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4621      	mov	r1, r4
 8005524:	1a51      	subs	r1, r2, r1
 8005526:	6439      	str	r1, [r7, #64]	@ 0x40
 8005528:	4629      	mov	r1, r5
 800552a:	eb63 0301 	sbc.w	r3, r3, r1
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800553c:	4649      	mov	r1, r9
 800553e:	018b      	lsls	r3, r1, #6
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005546:	4641      	mov	r1, r8
 8005548:	018a      	lsls	r2, r1, #6
 800554a:	4641      	mov	r1, r8
 800554c:	1a51      	subs	r1, r2, r1
 800554e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005550:	4649      	mov	r1, r9
 8005552:	eb63 0301 	sbc.w	r3, r3, r1
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005564:	4649      	mov	r1, r9
 8005566:	00cb      	lsls	r3, r1, #3
 8005568:	4641      	mov	r1, r8
 800556a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556e:	4641      	mov	r1, r8
 8005570:	00ca      	lsls	r2, r1, #3
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	4603      	mov	r3, r0
 8005578:	4622      	mov	r2, r4
 800557a:	189b      	adds	r3, r3, r2
 800557c:	633b      	str	r3, [r7, #48]	@ 0x30
 800557e:	462b      	mov	r3, r5
 8005580:	460a      	mov	r2, r1
 8005582:	eb42 0303 	adc.w	r3, r2, r3
 8005586:	637b      	str	r3, [r7, #52]	@ 0x34
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005594:	4629      	mov	r1, r5
 8005596:	024b      	lsls	r3, r1, #9
 8005598:	4621      	mov	r1, r4
 800559a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800559e:	4621      	mov	r1, r4
 80055a0:	024a      	lsls	r2, r1, #9
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80055b8:	f7fb fb66 	bl	8000c88 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055c6:	e067      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c8:	4b75      	ldr	r3, [pc, #468]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80055d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055e2:	2300      	movs	r3, #0
 80055e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	f04f 0000 	mov.w	r0, #0
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	0159      	lsls	r1, r3, #5
 80055f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055fc:	0150      	lsls	r0, r2, #5
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4621      	mov	r1, r4
 8005604:	1a51      	subs	r1, r2, r1
 8005606:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005608:	4629      	mov	r1, r5
 800560a:	eb63 0301 	sbc.w	r3, r3, r1
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800561c:	4649      	mov	r1, r9
 800561e:	018b      	lsls	r3, r1, #6
 8005620:	4641      	mov	r1, r8
 8005622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005626:	4641      	mov	r1, r8
 8005628:	018a      	lsls	r2, r1, #6
 800562a:	4641      	mov	r1, r8
 800562c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005630:	4649      	mov	r1, r9
 8005632:	eb63 0b01 	sbc.w	fp, r3, r1
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564a:	4692      	mov	sl, r2
 800564c:	469b      	mov	fp, r3
 800564e:	4623      	mov	r3, r4
 8005650:	eb1a 0303 	adds.w	r3, sl, r3
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	462b      	mov	r3, r5
 8005658:	eb4b 0303 	adc.w	r3, fp, r3
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005680:	2200      	movs	r2, #0
 8005682:	673b      	str	r3, [r7, #112]	@ 0x70
 8005684:	677a      	str	r2, [r7, #116]	@ 0x74
 8005686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800568a:	f7fb fafd 	bl	8000c88 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4613      	mov	r3, r2
 8005694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005698:	4b41      	ldr	r3, [pc, #260]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80056aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056ba:	e0eb      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056bc:	4b38      	ldr	r3, [pc, #224]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056c8:	4b35      	ldr	r3, [pc, #212]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d06b      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d4:	4b32      	ldr	r3, [pc, #200]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	099b      	lsrs	r3, r3, #6
 80056da:	2200      	movs	r2, #0
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e8:	2300      	movs	r3, #0
 80056ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80056f0:	4622      	mov	r2, r4
 80056f2:	462b      	mov	r3, r5
 80056f4:	f04f 0000 	mov.w	r0, #0
 80056f8:	f04f 0100 	mov.w	r1, #0
 80056fc:	0159      	lsls	r1, r3, #5
 80056fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005702:	0150      	lsls	r0, r2, #5
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4621      	mov	r1, r4
 800570a:	1a51      	subs	r1, r2, r1
 800570c:	61b9      	str	r1, [r7, #24]
 800570e:	4629      	mov	r1, r5
 8005710:	eb63 0301 	sbc.w	r3, r3, r1
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005722:	4659      	mov	r1, fp
 8005724:	018b      	lsls	r3, r1, #6
 8005726:	4651      	mov	r1, sl
 8005728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800572c:	4651      	mov	r1, sl
 800572e:	018a      	lsls	r2, r1, #6
 8005730:	4651      	mov	r1, sl
 8005732:	ebb2 0801 	subs.w	r8, r2, r1
 8005736:	4659      	mov	r1, fp
 8005738:	eb63 0901 	sbc.w	r9, r3, r1
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005750:	4690      	mov	r8, r2
 8005752:	4699      	mov	r9, r3
 8005754:	4623      	mov	r3, r4
 8005756:	eb18 0303 	adds.w	r3, r8, r3
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	462b      	mov	r3, r5
 800575e:	eb49 0303 	adc.w	r3, r9, r3
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005770:	4629      	mov	r1, r5
 8005772:	024b      	lsls	r3, r1, #9
 8005774:	4621      	mov	r1, r4
 8005776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800577a:	4621      	mov	r1, r4
 800577c:	024a      	lsls	r2, r1, #9
 800577e:	4610      	mov	r0, r2
 8005780:	4619      	mov	r1, r3
 8005782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005786:	2200      	movs	r2, #0
 8005788:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800578c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005790:	f7fb fa7a 	bl	8000c88 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800579e:	e065      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x420>
 80057a0:	40023800 	.word	0x40023800
 80057a4:	00f42400 	.word	0x00f42400
 80057a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ac:	4b3d      	ldr	r3, [pc, #244]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	2200      	movs	r2, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	4611      	mov	r1, r2
 80057b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80057be:	2300      	movs	r3, #0
 80057c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	f04f 0000 	mov.w	r0, #0
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	0159      	lsls	r1, r3, #5
 80057d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057d8:	0150      	lsls	r0, r2, #5
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4641      	mov	r1, r8
 80057e0:	1a51      	subs	r1, r2, r1
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	4649      	mov	r1, r9
 80057e6:	eb63 0301 	sbc.w	r3, r3, r1
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80057f8:	4659      	mov	r1, fp
 80057fa:	018b      	lsls	r3, r1, #6
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005802:	4651      	mov	r1, sl
 8005804:	018a      	lsls	r2, r1, #6
 8005806:	4651      	mov	r1, sl
 8005808:	1a54      	subs	r4, r2, r1
 800580a:	4659      	mov	r1, fp
 800580c:	eb63 0501 	sbc.w	r5, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	4643      	mov	r3, r8
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	464b      	mov	r3, r9
 800582c:	eb45 0303 	adc.w	r3, r5, r3
 8005830:	607b      	str	r3, [r7, #4]
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800583e:	4629      	mov	r1, r5
 8005840:	028b      	lsls	r3, r1, #10
 8005842:	4621      	mov	r1, r4
 8005844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005848:	4621      	mov	r1, r4
 800584a:	028a      	lsls	r2, r1, #10
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005854:	2200      	movs	r2, #0
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005858:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800585a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800585e:	f7fb fa13 	bl	8000c88 <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4613      	mov	r3, r2
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800586c:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0f1b      	lsrs	r3, r3, #28
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800587a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800587e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005882:	fbb2 f3f3 	udiv	r3, r2, r3
 8005886:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800588a:	e003      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800588e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005898:	4618      	mov	r0, r3
 800589a:	37b8      	adds	r7, #184	@ 0xb8
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	00f42400 	.word	0x00f42400

080058ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e28d      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8083 	beq.w	80059d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058cc:	4b94      	ldr	r3, [pc, #592]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d019      	beq.n	800590c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058d8:	4b91      	ldr	r3, [pc, #580]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f0:	d00c      	beq.n	800590c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80058fa:	2b0c      	cmp	r3, #12
 80058fc:	d112      	bne.n	8005924 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fe:	4b88      	ldr	r3, [pc, #544]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800590a:	d10b      	bne.n	8005924 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590c:	4b84      	ldr	r3, [pc, #528]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05b      	beq.n	80059d0 <HAL_RCC_OscConfig+0x124>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d157      	bne.n	80059d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e25a      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x90>
 800592e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7b      	ldr	r2, [pc, #492]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e01d      	b.n	8005978 <HAL_RCC_OscConfig+0xcc>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0xb4>
 8005946:	4b76      	ldr	r3, [pc, #472]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a75      	ldr	r2, [pc, #468]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800594c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b73      	ldr	r3, [pc, #460]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a72      	ldr	r2, [pc, #456]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e00b      	b.n	8005978 <HAL_RCC_OscConfig+0xcc>
 8005960:	4b6f      	ldr	r3, [pc, #444]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a6e      	ldr	r2, [pc, #440]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a6b      	ldr	r2, [pc, #428]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fc fbb2 	bl	80020e8 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fc fbae 	bl	80020e8 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	@ 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e21f      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800599a:	4b61      	ldr	r3, [pc, #388]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0xdc>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fc fb9e 	bl	80020e8 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fc fb9a 	bl	80020e8 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	@ 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e20b      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059c2:	4b57      	ldr	r3, [pc, #348]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x104>
 80059ce:	e000      	b.n	80059d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d06f      	beq.n	8005abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059de:	4b50      	ldr	r3, [pc, #320]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d017      	beq.n	8005a1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d105      	bne.n	8005a02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80059f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a02:	4b47      	ldr	r3, [pc, #284]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d11c      	bne.n	8005a48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0e:	4b44      	ldr	r3, [pc, #272]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d116      	bne.n	8005a48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1a:	4b41      	ldr	r3, [pc, #260]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_RCC_OscConfig+0x186>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d001      	beq.n	8005a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e1d3      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a32:	4b3b      	ldr	r3, [pc, #236]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4937      	ldr	r1, [pc, #220]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a46:	e03a      	b.n	8005abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a50:	4b34      	ldr	r3, [pc, #208]	@ (8005b24 <HAL_RCC_OscConfig+0x278>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fc fb47 	bl	80020e8 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a5e:	f7fc fb43 	bl	80020e8 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e1b4      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a70:	4b2b      	ldr	r3, [pc, #172]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7c:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4925      	ldr	r1, [pc, #148]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]
 8005a90:	e015      	b.n	8005abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a92:	4b24      	ldr	r3, [pc, #144]	@ (8005b24 <HAL_RCC_OscConfig+0x278>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fc fb26 	bl	80020e8 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa0:	f7fc fb22 	bl	80020e8 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e193      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d036      	beq.n	8005b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ad2:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fc fb06 	bl	80020e8 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fc fb02 	bl	80020e8 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e173      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <HAL_RCC_OscConfig+0x274>)
 8005af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x234>
 8005afe:	e01b      	b.n	8005b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b00:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b06:	f7fc faef 	bl	80020e8 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0c:	e00e      	b.n	8005b2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0e:	f7fc faeb 	bl	80020e8 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d907      	bls.n	8005b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e15c      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	42470000 	.word	0x42470000
 8005b28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1ea      	bne.n	8005b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8097 	beq.w	8005c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4a:	4b83      	ldr	r3, [pc, #524]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b66:	4b7c      	ldr	r3, [pc, #496]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b76:	4b79      	ldr	r3, [pc, #484]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d118      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b82:	4b76      	ldr	r3, [pc, #472]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a75      	ldr	r2, [pc, #468]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8e:	f7fc faab 	bl	80020e8 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b96:	f7fc faa7 	bl	80020e8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e118      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8005d5c <HAL_RCC_OscConfig+0x4b0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <HAL_RCC_OscConfig+0x31e>
 8005bbc:	4b66      	ldr	r3, [pc, #408]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	4a65      	ldr	r2, [pc, #404]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc8:	e01c      	b.n	8005c04 <HAL_RCC_OscConfig+0x358>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0x340>
 8005bd2:	4b61      	ldr	r3, [pc, #388]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd6:	4a60      	ldr	r2, [pc, #384]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bd8:	f043 0304 	orr.w	r3, r3, #4
 8005bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bde:	4b5e      	ldr	r3, [pc, #376]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be2:	4a5d      	ldr	r2, [pc, #372]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0x358>
 8005bec:	4b5a      	ldr	r3, [pc, #360]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf0:	4a59      	ldr	r2, [pc, #356]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf8:	4b57      	ldr	r3, [pc, #348]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfc:	4a56      	ldr	r2, [pc, #344]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005bfe:	f023 0304 	bic.w	r3, r3, #4
 8005c02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fc fa6c 	bl	80020e8 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	e00a      	b.n	8005c2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c14:	f7fc fa68 	bl	80020e8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e0d7      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ee      	beq.n	8005c14 <HAL_RCC_OscConfig+0x368>
 8005c36:	e014      	b.n	8005c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c38:	f7fc fa56 	bl	80020e8 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c40:	f7fc fa52 	bl	80020e8 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e0c1      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c56:	4b40      	ldr	r3, [pc, #256]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1ee      	bne.n	8005c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d105      	bne.n	8005c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c68:	4b3b      	ldr	r3, [pc, #236]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80ad 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c7e:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d060      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d145      	bne.n	8005d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c92:	4b33      	ldr	r3, [pc, #204]	@ (8005d60 <HAL_RCC_OscConfig+0x4b4>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fc fa26 	bl	80020e8 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca0:	f7fc fa22 	bl	80020e8 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e093      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	4b29      	ldr	r3, [pc, #164]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	019b      	lsls	r3, r3, #6
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	061b      	lsls	r3, r3, #24
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	491b      	ldr	r1, [pc, #108]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <HAL_RCC_OscConfig+0x4b4>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf6:	f7fc f9f7 	bl	80020e8 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fc f9f3 	bl	80020e8 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e064      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d10:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x452>
 8005d1c:	e05c      	b.n	8005dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	4b10      	ldr	r3, [pc, #64]	@ (8005d60 <HAL_RCC_OscConfig+0x4b4>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fc f9e0 	bl	80020e8 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fc f9dc 	bl	80020e8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e04d      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <HAL_RCC_OscConfig+0x4ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x480>
 8005d4a:	e045      	b.n	8005dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e040      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d64:	4b1f      	ldr	r3, [pc, #124]	@ (8005de4 <HAL_RCC_OscConfig+0x538>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d030      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d129      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d122      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d119      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d10f      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800

08005de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e042      	b.n	8005e80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fc f88a 	bl	8001f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2224      	movs	r2, #36	@ 0x24
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fd7f 	bl	8006930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	@ 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d175      	bne.n	8005f94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_Transmit+0x2c>
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e06e      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2221      	movs	r2, #33	@ 0x21
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec6:	f7fc f90f 	bl	80020e8 <HAL_GetTick>
 8005eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	88fa      	ldrh	r2, [r7, #6]
 8005ed6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee0:	d108      	bne.n	8005ef4 <HAL_UART_Transmit+0x6c>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e003      	b.n	8005efc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005efc:	e02e      	b.n	8005f5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	@ 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fb1d 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e03a      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3302      	adds	r3, #2
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e007      	b.n	8005f4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1cb      	bne.n	8005efe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2140      	movs	r1, #64	@ 0x40
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 fae9 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_UART_IRQHandler+0x66>
 8005ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fbd7 	bl	80067b2 <UART_Receive_IT>
      return;
 8006004:	e273      	b.n	80064ee <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80de 	beq.w	80061cc <HAL_UART_IRQHandler+0x22c>
 8006010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006020:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80d1 	beq.w	80061cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HAL_UART_IRQHandler+0xae>
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800603a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006046:	f043 0201 	orr.w	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <HAL_UART_IRQHandler+0xd2>
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	f043 0202 	orr.w	r2, r3, #2
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_UART_IRQHandler+0xf6>
 800607e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608e:	f043 0204 	orr.w	r2, r3, #4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d011      	beq.n	80060c6 <HAL_UART_IRQHandler+0x126>
 80060a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	f043 0208 	orr.w	r2, r3, #8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 820a 	beq.w	80064e4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_UART_IRQHandler+0x14e>
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fb62 	bl	80067b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f8:	2b40      	cmp	r3, #64	@ 0x40
 80060fa:	bf0c      	ite	eq
 80060fc:	2301      	moveq	r3, #1
 80060fe:	2300      	movne	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <HAL_UART_IRQHandler+0x17a>
 8006112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d04f      	beq.n	80061ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa6d 	bl	80065fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b40      	cmp	r3, #64	@ 0x40
 800612c:	d141      	bne.n	80061b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800615a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800615e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1d9      	bne.n	800612e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d013      	beq.n	80061aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006186:	4a8a      	ldr	r2, [pc, #552]	@ (80063b0 <HAL_UART_IRQHandler+0x410>)
 8006188:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618e:	4618      	mov	r0, r3
 8006190:	f7fc f95b 	bl	800244a <HAL_DMA_Abort_IT>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061a4:	4610      	mov	r0, r2
 80061a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	e00e      	b.n	80061c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f9b6 	bl	800651c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e00a      	b.n	80061c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f9b2 	bl	800651c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	e006      	b.n	80061c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9ae 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80061c6:	e18d      	b.n	80064e4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	bf00      	nop
    return;
 80061ca:	e18b      	b.n	80064e4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	f040 8167 	bne.w	80064a4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8160 	beq.w	80064a4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80061e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8159 	beq.w	80064a4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006212:	2b40      	cmp	r3, #64	@ 0x40
 8006214:	f040 80ce 	bne.w	80063b4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80a9 	beq.w	8006380 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006236:	429a      	cmp	r2, r3
 8006238:	f080 80a2 	bcs.w	8006380 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006242:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624e:	f000 8088 	beq.w	8006362 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800626c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800627e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800628a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1d9      	bne.n	8006252 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e1      	bne.n	800629e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3314      	adds	r3, #20
 80062e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3314      	adds	r3, #20
 80062fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006300:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006304:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800630c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e3      	bne.n	80062da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006344:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006346:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800634a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e3      	bne.n	8006320 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635c:	4618      	mov	r0, r3
 800635e:	f7fc f804 	bl	800236a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006370:	b29b      	uxth	r3, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f8d9 	bl	8006530 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800637e:	e0b3      	b.n	80064e8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006384:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006388:	429a      	cmp	r2, r3
 800638a:	f040 80ad 	bne.w	80064e8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006398:	f040 80a6 	bne.w	80064e8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f8c1 	bl	8006530 <HAL_UARTEx_RxEventCallback>
      return;
 80063ae:	e09b      	b.n	80064e8 <HAL_UART_IRQHandler+0x548>
 80063b0:	080066c1 	.word	0x080066c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 808e 	beq.w	80064ec <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80063d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8089 	beq.w	80064ec <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006400:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800640c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e3      	bne.n	80063da <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3314      	adds	r3, #20
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	623b      	str	r3, [r7, #32]
   return(result);
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3314      	adds	r3, #20
 8006432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006436:	633a      	str	r2, [r7, #48]	@ 0x30
 8006438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800643c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e3      	bne.n	8006412 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	60fb      	str	r3, [r7, #12]
   return(result);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0310 	bic.w	r3, r3, #16
 800646e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800647c:	61fa      	str	r2, [r7, #28]
 800647e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	617b      	str	r3, [r7, #20]
   return(result);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e3      	bne.n	8006458 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f847 	bl	8006530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064a2:	e023      	b.n	80064ec <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <HAL_UART_IRQHandler+0x524>
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f910 	bl	80066e2 <UART_Transmit_IT>
    return;
 80064c2:	e014      	b.n	80064ee <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <HAL_UART_IRQHandler+0x54e>
 80064d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f950 	bl	8006782 <UART_EndTransmit_IT>
    return;
 80064e2:	e004      	b.n	80064ee <HAL_UART_IRQHandler+0x54e>
    return;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <HAL_UART_IRQHandler+0x54e>
      return;
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <HAL_UART_IRQHandler+0x54e>
      return;
 80064ec:	bf00      	nop
  }
}
 80064ee:	37e8      	adds	r7, #232	@ 0xe8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e03b      	b.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d037      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fb fdc1 	bl	80020e8 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e03a      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d023      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b80      	cmp	r3, #128	@ 0x80
 800658e:	d020      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b40      	cmp	r3, #64	@ 0x40
 8006594:	d01d      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d116      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f81d 	bl	80065fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2208      	movs	r2, #8
 80065c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e00f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0b4      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b095      	sub	sp, #84	@ 0x54
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006618:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006622:	643a      	str	r2, [r7, #64]	@ 0x40
 8006624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006628:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	61fb      	str	r3, [r7, #28]
   return(result);
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800665c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666e:	2b01      	cmp	r3, #1
 8006670:	d119      	bne.n	80066a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	60bb      	str	r3, [r7, #8]
   return(result);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f023 0310 	bic.w	r3, r3, #16
 8006688:	647b      	str	r3, [r7, #68]	@ 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006692:	61ba      	str	r2, [r7, #24]
 8006694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6979      	ldr	r1, [r7, #20]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	613b      	str	r3, [r7, #16]
   return(result);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e5      	bne.n	8006672 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066b4:	bf00      	nop
 80066b6:	3754      	adds	r7, #84	@ 0x54
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff ff21 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b21      	cmp	r3, #33	@ 0x21
 80066f4:	d13e      	bne.n	8006774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066fe:	d114      	bne.n	800672a <UART_Transmit_IT+0x48>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800671c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	621a      	str	r2, [r3, #32]
 8006728:	e008      	b.n	800673c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6211      	str	r1, [r2, #32]
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29b      	uxth	r3, r3
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4619      	mov	r1, r3
 800674a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10f      	bne.n	8006770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800675e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800676e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006798:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fea6 	bl	80064f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b08c      	sub	sp, #48	@ 0x30
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b22      	cmp	r3, #34	@ 0x22
 80067cc:	f040 80aa 	bne.w	8006924 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d8:	d115      	bne.n	8006806 <UART_Receive_IT+0x54>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d111      	bne.n	8006806 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	1c9a      	adds	r2, r3, #2
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	629a      	str	r2, [r3, #40]	@ 0x28
 8006804:	e024      	b.n	8006850 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006814:	d007      	beq.n	8006826 <UART_Receive_IT+0x74>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <UART_Receive_IT+0x82>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	e008      	b.n	8006846 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006840:	b2da      	uxtb	r2, r3
 8006842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29b      	uxth	r3, r3
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4619      	mov	r1, r3
 800685e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006860:	2b00      	cmp	r3, #0
 8006862:	d15d      	bne.n	8006920 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0220 	bic.w	r2, r2, #32
 8006872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695a      	ldr	r2, [r3, #20]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d135      	bne.n	8006916 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	330c      	adds	r3, #12
 80068b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	613b      	str	r3, [r7, #16]
   return(result);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f023 0310 	bic.w	r3, r3, #16
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d0:	623a      	str	r2, [r7, #32]
 80068d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	69f9      	ldr	r1, [r7, #28]
 80068d6:	6a3a      	ldr	r2, [r7, #32]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e5      	bne.n	80068b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d10a      	bne.n	8006908 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fe0e 	bl	8006530 <HAL_UARTEx_RxEventCallback>
 8006914:	e002      	b.n	800691c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff fdf6 	bl	8006508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e002      	b.n	8006926 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e000      	b.n	8006926 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006924:	2302      	movs	r3, #2
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	3730      	adds	r7, #48	@ 0x30
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006934:	b0c0      	sub	sp, #256	@ 0x100
 8006936:	af00      	add	r7, sp, #0
 8006938:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694c:	68d9      	ldr	r1, [r3, #12]
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	ea40 0301 	orr.w	r3, r0, r1
 8006958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800695a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	431a      	orrs	r2, r3
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	431a      	orrs	r2, r3
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006988:	f021 010c 	bic.w	r1, r1, #12
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006996:	430b      	orrs	r3, r1
 8006998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	6999      	ldr	r1, [r3, #24]
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	ea40 0301 	orr.w	r3, r0, r1
 80069b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b8f      	ldr	r3, [pc, #572]	@ (8006bfc <UART_SetConfig+0x2cc>)
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d005      	beq.n	80069d0 <UART_SetConfig+0xa0>
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006c00 <UART_SetConfig+0x2d0>)
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d104      	bne.n	80069da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069d0:	f7fe fd28 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 80069d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069d8:	e003      	b.n	80069e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069da:	f7fe fd0f 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 80069de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ec:	f040 810c 	bne.w	8006c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	1891      	adds	r1, r2, r2
 8006a08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a0a:	415b      	adcs	r3, r3
 8006a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a12:	4621      	mov	r1, r4
 8006a14:	eb12 0801 	adds.w	r8, r2, r1
 8006a18:	4629      	mov	r1, r5
 8006a1a:	eb43 0901 	adc.w	r9, r3, r1
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a32:	4690      	mov	r8, r2
 8006a34:	4699      	mov	r9, r3
 8006a36:	4623      	mov	r3, r4
 8006a38:	eb18 0303 	adds.w	r3, r8, r3
 8006a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a40:	462b      	mov	r3, r5
 8006a42:	eb49 0303 	adc.w	r3, r9, r3
 8006a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a5e:	460b      	mov	r3, r1
 8006a60:	18db      	adds	r3, r3, r3
 8006a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a64:	4613      	mov	r3, r2
 8006a66:	eb42 0303 	adc.w	r3, r2, r3
 8006a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a74:	f7fa f908 	bl	8000c88 <__aeabi_uldivmod>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4b61      	ldr	r3, [pc, #388]	@ (8006c04 <UART_SetConfig+0x2d4>)
 8006a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	011c      	lsls	r4, r3, #4
 8006a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a98:	4642      	mov	r2, r8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	1891      	adds	r1, r2, r2
 8006a9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006aa0:	415b      	adcs	r3, r3
 8006aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8006aae:	4649      	mov	r1, r9
 8006ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ac8:	4692      	mov	sl, r2
 8006aca:	469b      	mov	fp, r3
 8006acc:	4643      	mov	r3, r8
 8006ace:	eb1a 0303 	adds.w	r3, sl, r3
 8006ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8006adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006af4:	460b      	mov	r3, r1
 8006af6:	18db      	adds	r3, r3, r3
 8006af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006afa:	4613      	mov	r3, r2
 8006afc:	eb42 0303 	adc.w	r3, r2, r3
 8006b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b0a:	f7fa f8bd 	bl	8000c88 <__aeabi_uldivmod>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4611      	mov	r1, r2
 8006b14:	4b3b      	ldr	r3, [pc, #236]	@ (8006c04 <UART_SetConfig+0x2d4>)
 8006b16:	fba3 2301 	umull	r2, r3, r3, r1
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2264      	movs	r2, #100	@ 0x64
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	1acb      	subs	r3, r1, r3
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b2a:	4b36      	ldr	r3, [pc, #216]	@ (8006c04 <UART_SetConfig+0x2d4>)
 8006b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b38:	441c      	add	r4, r3
 8006b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	1891      	adds	r1, r2, r2
 8006b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b54:	415b      	adcs	r3, r3
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	1851      	adds	r1, r2, r1
 8006b60:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b62:	4649      	mov	r1, r9
 8006b64:	414b      	adcs	r3, r1
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b74:	4659      	mov	r1, fp
 8006b76:	00cb      	lsls	r3, r1, #3
 8006b78:	4651      	mov	r1, sl
 8006b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b7e:	4651      	mov	r1, sl
 8006b80:	00ca      	lsls	r2, r1, #3
 8006b82:	4610      	mov	r0, r2
 8006b84:	4619      	mov	r1, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	4642      	mov	r2, r8
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b90:	464b      	mov	r3, r9
 8006b92:	460a      	mov	r2, r1
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	18db      	adds	r3, r3, r3
 8006bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	eb42 0303 	adc.w	r3, r2, r3
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bc6:	f7fa f85f 	bl	8000c88 <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <UART_SetConfig+0x2d4>)
 8006bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	2164      	movs	r1, #100	@ 0x64
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	3332      	adds	r3, #50	@ 0x32
 8006be2:	4a08      	ldr	r2, [pc, #32]	@ (8006c04 <UART_SetConfig+0x2d4>)
 8006be4:	fba2 2303 	umull	r2, r3, r2, r3
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	f003 0207 	and.w	r2, r3, #7
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4422      	add	r2, r4
 8006bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bf8:	e106      	b.n	8006e08 <UART_SetConfig+0x4d8>
 8006bfa:	bf00      	nop
 8006bfc:	40011000 	.word	0x40011000
 8006c00:	40011400 	.word	0x40011400
 8006c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c1a:	4642      	mov	r2, r8
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	1891      	adds	r1, r2, r2
 8006c20:	6239      	str	r1, [r7, #32]
 8006c22:	415b      	adcs	r3, r3
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	1854      	adds	r4, r2, r1
 8006c2e:	4649      	mov	r1, r9
 8006c30:	eb43 0501 	adc.w	r5, r3, r1
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	00eb      	lsls	r3, r5, #3
 8006c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c42:	00e2      	lsls	r2, r4, #3
 8006c44:	4614      	mov	r4, r2
 8006c46:	461d      	mov	r5, r3
 8006c48:	4643      	mov	r3, r8
 8006c4a:	18e3      	adds	r3, r4, r3
 8006c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c50:	464b      	mov	r3, r9
 8006c52:	eb45 0303 	adc.w	r3, r5, r3
 8006c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c76:	4629      	mov	r1, r5
 8006c78:	008b      	lsls	r3, r1, #2
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c80:	4621      	mov	r1, r4
 8006c82:	008a      	lsls	r2, r1, #2
 8006c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c88:	f7f9 fffe 	bl	8000c88 <__aeabi_uldivmod>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4b60      	ldr	r3, [pc, #384]	@ (8006e14 <UART_SetConfig+0x4e4>)
 8006c92:	fba3 2302 	umull	r2, r3, r3, r2
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	011c      	lsls	r4, r3, #4
 8006c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ca4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	1891      	adds	r1, r2, r2
 8006cb2:	61b9      	str	r1, [r7, #24]
 8006cb4:	415b      	adcs	r3, r3
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	1851      	adds	r1, r2, r1
 8006cc0:	6139      	str	r1, [r7, #16]
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	414b      	adcs	r3, r1
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	00cb      	lsls	r3, r1, #3
 8006cd8:	4651      	mov	r1, sl
 8006cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cde:	4651      	mov	r1, sl
 8006ce0:	00ca      	lsls	r2, r1, #3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4642      	mov	r2, r8
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	460a      	mov	r2, r1
 8006cf4:	eb42 0303 	adc.w	r3, r2, r3
 8006cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d14:	4649      	mov	r1, r9
 8006d16:	008b      	lsls	r3, r1, #2
 8006d18:	4641      	mov	r1, r8
 8006d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d1e:	4641      	mov	r1, r8
 8006d20:	008a      	lsls	r2, r1, #2
 8006d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d26:	f7f9 ffaf 	bl	8000c88 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4b38      	ldr	r3, [pc, #224]	@ (8006e14 <UART_SetConfig+0x4e4>)
 8006d32:	fba3 2301 	umull	r2, r3, r3, r1
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	2264      	movs	r2, #100	@ 0x64
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	1acb      	subs	r3, r1, r3
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	3332      	adds	r3, #50	@ 0x32
 8006d44:	4a33      	ldr	r2, [pc, #204]	@ (8006e14 <UART_SetConfig+0x4e4>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d50:	441c      	add	r4, r3
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d56:	2200      	movs	r2, #0
 8006d58:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d60:	4642      	mov	r2, r8
 8006d62:	464b      	mov	r3, r9
 8006d64:	1891      	adds	r1, r2, r2
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	415b      	adcs	r3, r3
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d70:	4641      	mov	r1, r8
 8006d72:	1851      	adds	r1, r2, r1
 8006d74:	6039      	str	r1, [r7, #0]
 8006d76:	4649      	mov	r1, r9
 8006d78:	414b      	adcs	r3, r1
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d88:	4659      	mov	r1, fp
 8006d8a:	00cb      	lsls	r3, r1, #3
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d92:	4651      	mov	r1, sl
 8006d94:	00ca      	lsls	r2, r1, #3
 8006d96:	4610      	mov	r0, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	189b      	adds	r3, r3, r2
 8006da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006da2:	464b      	mov	r3, r9
 8006da4:	460a      	mov	r2, r1
 8006da6:	eb42 0303 	adc.w	r3, r2, r3
 8006daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006db6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	008b      	lsls	r3, r1, #2
 8006dc8:	4641      	mov	r1, r8
 8006dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dce:	4641      	mov	r1, r8
 8006dd0:	008a      	lsls	r2, r1, #2
 8006dd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006dd6:	f7f9 ff57 	bl	8000c88 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <UART_SetConfig+0x4e4>)
 8006de0:	fba3 1302 	umull	r1, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	2164      	movs	r1, #100	@ 0x64
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	3332      	adds	r3, #50	@ 0x32
 8006df2:	4a08      	ldr	r2, [pc, #32]	@ (8006e14 <UART_SetConfig+0x4e4>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 020f 	and.w	r2, r3, #15
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4422      	add	r2, r4
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e14:	51eb851f 	.word	0x51eb851f

08006e18 <__cvt>:
 8006e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	ec57 6b10 	vmov	r6, r7, d0
 8006e20:	2f00      	cmp	r7, #0
 8006e22:	460c      	mov	r4, r1
 8006e24:	4619      	mov	r1, r3
 8006e26:	463b      	mov	r3, r7
 8006e28:	bfbb      	ittet	lt
 8006e2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e2e:	461f      	movlt	r7, r3
 8006e30:	2300      	movge	r3, #0
 8006e32:	232d      	movlt	r3, #45	@ 0x2d
 8006e34:	700b      	strb	r3, [r1, #0]
 8006e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e3c:	4691      	mov	r9, r2
 8006e3e:	f023 0820 	bic.w	r8, r3, #32
 8006e42:	bfbc      	itt	lt
 8006e44:	4632      	movlt	r2, r6
 8006e46:	4616      	movlt	r6, r2
 8006e48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e4c:	d005      	beq.n	8006e5a <__cvt+0x42>
 8006e4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e52:	d100      	bne.n	8006e56 <__cvt+0x3e>
 8006e54:	3401      	adds	r4, #1
 8006e56:	2102      	movs	r1, #2
 8006e58:	e000      	b.n	8006e5c <__cvt+0x44>
 8006e5a:	2103      	movs	r1, #3
 8006e5c:	ab03      	add	r3, sp, #12
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	ab02      	add	r3, sp, #8
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	ec47 6b10 	vmov	d0, r6, r7
 8006e68:	4653      	mov	r3, sl
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	f000 ff3c 	bl	8007ce8 <_dtoa_r>
 8006e70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e74:	4605      	mov	r5, r0
 8006e76:	d119      	bne.n	8006eac <__cvt+0x94>
 8006e78:	f019 0f01 	tst.w	r9, #1
 8006e7c:	d00e      	beq.n	8006e9c <__cvt+0x84>
 8006e7e:	eb00 0904 	add.w	r9, r0, r4
 8006e82:	2200      	movs	r2, #0
 8006e84:	2300      	movs	r3, #0
 8006e86:	4630      	mov	r0, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	f7f9 fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 8006e8e:	b108      	cbz	r0, 8006e94 <__cvt+0x7c>
 8006e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e94:	2230      	movs	r2, #48	@ 0x30
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	454b      	cmp	r3, r9
 8006e9a:	d31e      	bcc.n	8006eda <__cvt+0xc2>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ea0:	1b5b      	subs	r3, r3, r5
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	b004      	add	sp, #16
 8006ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006eb0:	eb00 0904 	add.w	r9, r0, r4
 8006eb4:	d1e5      	bne.n	8006e82 <__cvt+0x6a>
 8006eb6:	7803      	ldrb	r3, [r0, #0]
 8006eb8:	2b30      	cmp	r3, #48	@ 0x30
 8006eba:	d10a      	bne.n	8006ed2 <__cvt+0xba>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 fe20 	bl	8000b08 <__aeabi_dcmpeq>
 8006ec8:	b918      	cbnz	r0, 8006ed2 <__cvt+0xba>
 8006eca:	f1c4 0401 	rsb	r4, r4, #1
 8006ece:	f8ca 4000 	str.w	r4, [sl]
 8006ed2:	f8da 3000 	ldr.w	r3, [sl]
 8006ed6:	4499      	add	r9, r3
 8006ed8:	e7d3      	b.n	8006e82 <__cvt+0x6a>
 8006eda:	1c59      	adds	r1, r3, #1
 8006edc:	9103      	str	r1, [sp, #12]
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e7d9      	b.n	8006e96 <__cvt+0x7e>

08006ee2 <__exponent>:
 8006ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	bfba      	itte	lt
 8006ee8:	4249      	neglt	r1, r1
 8006eea:	232d      	movlt	r3, #45	@ 0x2d
 8006eec:	232b      	movge	r3, #43	@ 0x2b
 8006eee:	2909      	cmp	r1, #9
 8006ef0:	7002      	strb	r2, [r0, #0]
 8006ef2:	7043      	strb	r3, [r0, #1]
 8006ef4:	dd29      	ble.n	8006f4a <__exponent+0x68>
 8006ef6:	f10d 0307 	add.w	r3, sp, #7
 8006efa:	461d      	mov	r5, r3
 8006efc:	270a      	movs	r7, #10
 8006efe:	461a      	mov	r2, r3
 8006f00:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f04:	fb07 1416 	mls	r4, r7, r6, r1
 8006f08:	3430      	adds	r4, #48	@ 0x30
 8006f0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f0e:	460c      	mov	r4, r1
 8006f10:	2c63      	cmp	r4, #99	@ 0x63
 8006f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f16:	4631      	mov	r1, r6
 8006f18:	dcf1      	bgt.n	8006efe <__exponent+0x1c>
 8006f1a:	3130      	adds	r1, #48	@ 0x30
 8006f1c:	1e94      	subs	r4, r2, #2
 8006f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f22:	1c41      	adds	r1, r0, #1
 8006f24:	4623      	mov	r3, r4
 8006f26:	42ab      	cmp	r3, r5
 8006f28:	d30a      	bcc.n	8006f40 <__exponent+0x5e>
 8006f2a:	f10d 0309 	add.w	r3, sp, #9
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	42ac      	cmp	r4, r5
 8006f32:	bf88      	it	hi
 8006f34:	2300      	movhi	r3, #0
 8006f36:	3302      	adds	r3, #2
 8006f38:	4403      	add	r3, r0
 8006f3a:	1a18      	subs	r0, r3, r0
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f48:	e7ed      	b.n	8006f26 <__exponent+0x44>
 8006f4a:	2330      	movs	r3, #48	@ 0x30
 8006f4c:	3130      	adds	r1, #48	@ 0x30
 8006f4e:	7083      	strb	r3, [r0, #2]
 8006f50:	70c1      	strb	r1, [r0, #3]
 8006f52:	1d03      	adds	r3, r0, #4
 8006f54:	e7f1      	b.n	8006f3a <__exponent+0x58>
	...

08006f58 <_printf_float>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	b08d      	sub	sp, #52	@ 0x34
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f64:	4616      	mov	r6, r2
 8006f66:	461f      	mov	r7, r3
 8006f68:	4605      	mov	r5, r0
 8006f6a:	f000 fdbd 	bl	8007ae8 <_localeconv_r>
 8006f6e:	6803      	ldr	r3, [r0, #0]
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7f9 f99c 	bl	80002b0 <strlen>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f80:	9005      	str	r0, [sp, #20]
 8006f82:	3307      	adds	r3, #7
 8006f84:	f023 0307 	bic.w	r3, r3, #7
 8006f88:	f103 0208 	add.w	r2, r3, #8
 8006f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f90:	f8d4 b000 	ldr.w	fp, [r4]
 8006f94:	f8c8 2000 	str.w	r2, [r8]
 8006f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006fa0:	9307      	str	r3, [sp, #28]
 8006fa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fae:	4b9c      	ldr	r3, [pc, #624]	@ (8007220 <_printf_float+0x2c8>)
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	f7f9 fdda 	bl	8000b6c <__aeabi_dcmpun>
 8006fb8:	bb70      	cbnz	r0, 8007018 <_printf_float+0xc0>
 8006fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fbe:	4b98      	ldr	r3, [pc, #608]	@ (8007220 <_printf_float+0x2c8>)
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc4:	f7f9 fdb4 	bl	8000b30 <__aeabi_dcmple>
 8006fc8:	bb30      	cbnz	r0, 8007018 <_printf_float+0xc0>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4640      	mov	r0, r8
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	f7f9 fda3 	bl	8000b1c <__aeabi_dcmplt>
 8006fd6:	b110      	cbz	r0, 8006fde <_printf_float+0x86>
 8006fd8:	232d      	movs	r3, #45	@ 0x2d
 8006fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fde:	4a91      	ldr	r2, [pc, #580]	@ (8007224 <_printf_float+0x2cc>)
 8006fe0:	4b91      	ldr	r3, [pc, #580]	@ (8007228 <_printf_float+0x2d0>)
 8006fe2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fe6:	bf8c      	ite	hi
 8006fe8:	4690      	movhi	r8, r2
 8006fea:	4698      	movls	r8, r3
 8006fec:	2303      	movs	r3, #3
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	f02b 0304 	bic.w	r3, fp, #4
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	f04f 0900 	mov.w	r9, #0
 8006ffa:	9700      	str	r7, [sp, #0]
 8006ffc:	4633      	mov	r3, r6
 8006ffe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007000:	4621      	mov	r1, r4
 8007002:	4628      	mov	r0, r5
 8007004:	f000 f9d2 	bl	80073ac <_printf_common>
 8007008:	3001      	adds	r0, #1
 800700a:	f040 808d 	bne.w	8007128 <_printf_float+0x1d0>
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	b00d      	add	sp, #52	@ 0x34
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 fda4 	bl	8000b6c <__aeabi_dcmpun>
 8007024:	b140      	cbz	r0, 8007038 <_printf_float+0xe0>
 8007026:	464b      	mov	r3, r9
 8007028:	2b00      	cmp	r3, #0
 800702a:	bfbc      	itt	lt
 800702c:	232d      	movlt	r3, #45	@ 0x2d
 800702e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007032:	4a7e      	ldr	r2, [pc, #504]	@ (800722c <_printf_float+0x2d4>)
 8007034:	4b7e      	ldr	r3, [pc, #504]	@ (8007230 <_printf_float+0x2d8>)
 8007036:	e7d4      	b.n	8006fe2 <_printf_float+0x8a>
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800703e:	9206      	str	r2, [sp, #24]
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	d13b      	bne.n	80070bc <_printf_float+0x164>
 8007044:	2306      	movs	r3, #6
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800704c:	2300      	movs	r3, #0
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	9303      	str	r3, [sp, #12]
 8007052:	ab0a      	add	r3, sp, #40	@ 0x28
 8007054:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007058:	ab09      	add	r3, sp, #36	@ 0x24
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	6861      	ldr	r1, [r4, #4]
 800705e:	ec49 8b10 	vmov	d0, r8, r9
 8007062:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007066:	4628      	mov	r0, r5
 8007068:	f7ff fed6 	bl	8006e18 <__cvt>
 800706c:	9b06      	ldr	r3, [sp, #24]
 800706e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007070:	2b47      	cmp	r3, #71	@ 0x47
 8007072:	4680      	mov	r8, r0
 8007074:	d129      	bne.n	80070ca <_printf_float+0x172>
 8007076:	1cc8      	adds	r0, r1, #3
 8007078:	db02      	blt.n	8007080 <_printf_float+0x128>
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	4299      	cmp	r1, r3
 800707e:	dd41      	ble.n	8007104 <_printf_float+0x1ac>
 8007080:	f1aa 0a02 	sub.w	sl, sl, #2
 8007084:	fa5f fa8a 	uxtb.w	sl, sl
 8007088:	3901      	subs	r1, #1
 800708a:	4652      	mov	r2, sl
 800708c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007090:	9109      	str	r1, [sp, #36]	@ 0x24
 8007092:	f7ff ff26 	bl	8006ee2 <__exponent>
 8007096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007098:	1813      	adds	r3, r2, r0
 800709a:	2a01      	cmp	r2, #1
 800709c:	4681      	mov	r9, r0
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	dc02      	bgt.n	80070a8 <_printf_float+0x150>
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	07d2      	lsls	r2, r2, #31
 80070a6:	d501      	bpl.n	80070ac <_printf_float+0x154>
 80070a8:	3301      	adds	r3, #1
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0a2      	beq.n	8006ffa <_printf_float+0xa2>
 80070b4:	232d      	movs	r3, #45	@ 0x2d
 80070b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ba:	e79e      	b.n	8006ffa <_printf_float+0xa2>
 80070bc:	9a06      	ldr	r2, [sp, #24]
 80070be:	2a47      	cmp	r2, #71	@ 0x47
 80070c0:	d1c2      	bne.n	8007048 <_printf_float+0xf0>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1c0      	bne.n	8007048 <_printf_float+0xf0>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e7bd      	b.n	8007046 <_printf_float+0xee>
 80070ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070ce:	d9db      	bls.n	8007088 <_printf_float+0x130>
 80070d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070d4:	d118      	bne.n	8007108 <_printf_float+0x1b0>
 80070d6:	2900      	cmp	r1, #0
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	dd0b      	ble.n	80070f4 <_printf_float+0x19c>
 80070dc:	6121      	str	r1, [r4, #16]
 80070de:	b913      	cbnz	r3, 80070e6 <_printf_float+0x18e>
 80070e0:	6822      	ldr	r2, [r4, #0]
 80070e2:	07d0      	lsls	r0, r2, #31
 80070e4:	d502      	bpl.n	80070ec <_printf_float+0x194>
 80070e6:	3301      	adds	r3, #1
 80070e8:	440b      	add	r3, r1
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070ee:	f04f 0900 	mov.w	r9, #0
 80070f2:	e7db      	b.n	80070ac <_printf_float+0x154>
 80070f4:	b913      	cbnz	r3, 80070fc <_printf_float+0x1a4>
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	07d2      	lsls	r2, r2, #31
 80070fa:	d501      	bpl.n	8007100 <_printf_float+0x1a8>
 80070fc:	3302      	adds	r3, #2
 80070fe:	e7f4      	b.n	80070ea <_printf_float+0x192>
 8007100:	2301      	movs	r3, #1
 8007102:	e7f2      	b.n	80070ea <_printf_float+0x192>
 8007104:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800710a:	4299      	cmp	r1, r3
 800710c:	db05      	blt.n	800711a <_printf_float+0x1c2>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	6121      	str	r1, [r4, #16]
 8007112:	07d8      	lsls	r0, r3, #31
 8007114:	d5ea      	bpl.n	80070ec <_printf_float+0x194>
 8007116:	1c4b      	adds	r3, r1, #1
 8007118:	e7e7      	b.n	80070ea <_printf_float+0x192>
 800711a:	2900      	cmp	r1, #0
 800711c:	bfd4      	ite	le
 800711e:	f1c1 0202 	rsble	r2, r1, #2
 8007122:	2201      	movgt	r2, #1
 8007124:	4413      	add	r3, r2
 8007126:	e7e0      	b.n	80070ea <_printf_float+0x192>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	055a      	lsls	r2, r3, #21
 800712c:	d407      	bmi.n	800713e <_printf_float+0x1e6>
 800712e:	6923      	ldr	r3, [r4, #16]
 8007130:	4642      	mov	r2, r8
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	d12b      	bne.n	8007194 <_printf_float+0x23c>
 800713c:	e767      	b.n	800700e <_printf_float+0xb6>
 800713e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007142:	f240 80dd 	bls.w	8007300 <_printf_float+0x3a8>
 8007146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	f7f9 fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8007152:	2800      	cmp	r0, #0
 8007154:	d033      	beq.n	80071be <_printf_float+0x266>
 8007156:	4a37      	ldr	r2, [pc, #220]	@ (8007234 <_printf_float+0x2dc>)
 8007158:	2301      	movs	r3, #1
 800715a:	4631      	mov	r1, r6
 800715c:	4628      	mov	r0, r5
 800715e:	47b8      	blx	r7
 8007160:	3001      	adds	r0, #1
 8007162:	f43f af54 	beq.w	800700e <_printf_float+0xb6>
 8007166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800716a:	4543      	cmp	r3, r8
 800716c:	db02      	blt.n	8007174 <_printf_float+0x21c>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	07d8      	lsls	r0, r3, #31
 8007172:	d50f      	bpl.n	8007194 <_printf_float+0x23c>
 8007174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f af45 	beq.w	800700e <_printf_float+0xb6>
 8007184:	f04f 0900 	mov.w	r9, #0
 8007188:	f108 38ff 	add.w	r8, r8, #4294967295
 800718c:	f104 0a1a 	add.w	sl, r4, #26
 8007190:	45c8      	cmp	r8, r9
 8007192:	dc09      	bgt.n	80071a8 <_printf_float+0x250>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	079b      	lsls	r3, r3, #30
 8007198:	f100 8103 	bmi.w	80073a2 <_printf_float+0x44a>
 800719c:	68e0      	ldr	r0, [r4, #12]
 800719e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a0:	4298      	cmp	r0, r3
 80071a2:	bfb8      	it	lt
 80071a4:	4618      	movlt	r0, r3
 80071a6:	e734      	b.n	8007012 <_printf_float+0xba>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4652      	mov	r2, sl
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f af2b 	beq.w	800700e <_printf_float+0xb6>
 80071b8:	f109 0901 	add.w	r9, r9, #1
 80071bc:	e7e8      	b.n	8007190 <_printf_float+0x238>
 80071be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc39      	bgt.n	8007238 <_printf_float+0x2e0>
 80071c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007234 <_printf_float+0x2dc>)
 80071c6:	2301      	movs	r3, #1
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f af1d 	beq.w	800700e <_printf_float+0xb6>
 80071d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071d8:	ea59 0303 	orrs.w	r3, r9, r3
 80071dc:	d102      	bne.n	80071e4 <_printf_float+0x28c>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	07d9      	lsls	r1, r3, #31
 80071e2:	d5d7      	bpl.n	8007194 <_printf_float+0x23c>
 80071e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f43f af0d 	beq.w	800700e <_printf_float+0xb6>
 80071f4:	f04f 0a00 	mov.w	sl, #0
 80071f8:	f104 0b1a 	add.w	fp, r4, #26
 80071fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fe:	425b      	negs	r3, r3
 8007200:	4553      	cmp	r3, sl
 8007202:	dc01      	bgt.n	8007208 <_printf_float+0x2b0>
 8007204:	464b      	mov	r3, r9
 8007206:	e793      	b.n	8007130 <_printf_float+0x1d8>
 8007208:	2301      	movs	r3, #1
 800720a:	465a      	mov	r2, fp
 800720c:	4631      	mov	r1, r6
 800720e:	4628      	mov	r0, r5
 8007210:	47b8      	blx	r7
 8007212:	3001      	adds	r0, #1
 8007214:	f43f aefb 	beq.w	800700e <_printf_float+0xb6>
 8007218:	f10a 0a01 	add.w	sl, sl, #1
 800721c:	e7ee      	b.n	80071fc <_printf_float+0x2a4>
 800721e:	bf00      	nop
 8007220:	7fefffff 	.word	0x7fefffff
 8007224:	080099f4 	.word	0x080099f4
 8007228:	080099f0 	.word	0x080099f0
 800722c:	080099fc 	.word	0x080099fc
 8007230:	080099f8 	.word	0x080099f8
 8007234:	08009a00 	.word	0x08009a00
 8007238:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800723a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800723e:	4553      	cmp	r3, sl
 8007240:	bfa8      	it	ge
 8007242:	4653      	movge	r3, sl
 8007244:	2b00      	cmp	r3, #0
 8007246:	4699      	mov	r9, r3
 8007248:	dc36      	bgt.n	80072b8 <_printf_float+0x360>
 800724a:	f04f 0b00 	mov.w	fp, #0
 800724e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007252:	f104 021a 	add.w	r2, r4, #26
 8007256:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007258:	9306      	str	r3, [sp, #24]
 800725a:	eba3 0309 	sub.w	r3, r3, r9
 800725e:	455b      	cmp	r3, fp
 8007260:	dc31      	bgt.n	80072c6 <_printf_float+0x36e>
 8007262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007264:	459a      	cmp	sl, r3
 8007266:	dc3a      	bgt.n	80072de <_printf_float+0x386>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	07da      	lsls	r2, r3, #31
 800726c:	d437      	bmi.n	80072de <_printf_float+0x386>
 800726e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007270:	ebaa 0903 	sub.w	r9, sl, r3
 8007274:	9b06      	ldr	r3, [sp, #24]
 8007276:	ebaa 0303 	sub.w	r3, sl, r3
 800727a:	4599      	cmp	r9, r3
 800727c:	bfa8      	it	ge
 800727e:	4699      	movge	r9, r3
 8007280:	f1b9 0f00 	cmp.w	r9, #0
 8007284:	dc33      	bgt.n	80072ee <_printf_float+0x396>
 8007286:	f04f 0800 	mov.w	r8, #0
 800728a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800728e:	f104 0b1a 	add.w	fp, r4, #26
 8007292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007294:	ebaa 0303 	sub.w	r3, sl, r3
 8007298:	eba3 0309 	sub.w	r3, r3, r9
 800729c:	4543      	cmp	r3, r8
 800729e:	f77f af79 	ble.w	8007194 <_printf_float+0x23c>
 80072a2:	2301      	movs	r3, #1
 80072a4:	465a      	mov	r2, fp
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f aeae 	beq.w	800700e <_printf_float+0xb6>
 80072b2:	f108 0801 	add.w	r8, r8, #1
 80072b6:	e7ec      	b.n	8007292 <_printf_float+0x33a>
 80072b8:	4642      	mov	r2, r8
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	d1c2      	bne.n	800724a <_printf_float+0x2f2>
 80072c4:	e6a3      	b.n	800700e <_printf_float+0xb6>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	9206      	str	r2, [sp, #24]
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f ae9c 	beq.w	800700e <_printf_float+0xb6>
 80072d6:	9a06      	ldr	r2, [sp, #24]
 80072d8:	f10b 0b01 	add.w	fp, fp, #1
 80072dc:	e7bb      	b.n	8007256 <_printf_float+0x2fe>
 80072de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	d1c0      	bne.n	800726e <_printf_float+0x316>
 80072ec:	e68f      	b.n	800700e <_printf_float+0xb6>
 80072ee:	9a06      	ldr	r2, [sp, #24]
 80072f0:	464b      	mov	r3, r9
 80072f2:	4442      	add	r2, r8
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	d1c3      	bne.n	8007286 <_printf_float+0x32e>
 80072fe:	e686      	b.n	800700e <_printf_float+0xb6>
 8007300:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007304:	f1ba 0f01 	cmp.w	sl, #1
 8007308:	dc01      	bgt.n	800730e <_printf_float+0x3b6>
 800730a:	07db      	lsls	r3, r3, #31
 800730c:	d536      	bpl.n	800737c <_printf_float+0x424>
 800730e:	2301      	movs	r3, #1
 8007310:	4642      	mov	r2, r8
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f ae78 	beq.w	800700e <_printf_float+0xb6>
 800731e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae70 	beq.w	800700e <_printf_float+0xb6>
 800732e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800733a:	f7f9 fbe5 	bl	8000b08 <__aeabi_dcmpeq>
 800733e:	b9c0      	cbnz	r0, 8007372 <_printf_float+0x41a>
 8007340:	4653      	mov	r3, sl
 8007342:	f108 0201 	add.w	r2, r8, #1
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	d10c      	bne.n	800736a <_printf_float+0x412>
 8007350:	e65d      	b.n	800700e <_printf_float+0xb6>
 8007352:	2301      	movs	r3, #1
 8007354:	465a      	mov	r2, fp
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	f43f ae56 	beq.w	800700e <_printf_float+0xb6>
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	45d0      	cmp	r8, sl
 8007368:	dbf3      	blt.n	8007352 <_printf_float+0x3fa>
 800736a:	464b      	mov	r3, r9
 800736c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007370:	e6df      	b.n	8007132 <_printf_float+0x1da>
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	f104 0b1a 	add.w	fp, r4, #26
 800737a:	e7f4      	b.n	8007366 <_printf_float+0x40e>
 800737c:	2301      	movs	r3, #1
 800737e:	4642      	mov	r2, r8
 8007380:	e7e1      	b.n	8007346 <_printf_float+0x3ee>
 8007382:	2301      	movs	r3, #1
 8007384:	464a      	mov	r2, r9
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f ae3e 	beq.w	800700e <_printf_float+0xb6>
 8007392:	f108 0801 	add.w	r8, r8, #1
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800739a:	1a5b      	subs	r3, r3, r1
 800739c:	4543      	cmp	r3, r8
 800739e:	dcf0      	bgt.n	8007382 <_printf_float+0x42a>
 80073a0:	e6fc      	b.n	800719c <_printf_float+0x244>
 80073a2:	f04f 0800 	mov.w	r8, #0
 80073a6:	f104 0919 	add.w	r9, r4, #25
 80073aa:	e7f4      	b.n	8007396 <_printf_float+0x43e>

080073ac <_printf_common>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	4616      	mov	r6, r2
 80073b2:	4698      	mov	r8, r3
 80073b4:	688a      	ldr	r2, [r1, #8]
 80073b6:	690b      	ldr	r3, [r1, #16]
 80073b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073bc:	4293      	cmp	r3, r2
 80073be:	bfb8      	it	lt
 80073c0:	4613      	movlt	r3, r2
 80073c2:	6033      	str	r3, [r6, #0]
 80073c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073c8:	4607      	mov	r7, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	b10a      	cbz	r2, 80073d2 <_printf_common+0x26>
 80073ce:	3301      	adds	r3, #1
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	0699      	lsls	r1, r3, #26
 80073d6:	bf42      	ittt	mi
 80073d8:	6833      	ldrmi	r3, [r6, #0]
 80073da:	3302      	addmi	r3, #2
 80073dc:	6033      	strmi	r3, [r6, #0]
 80073de:	6825      	ldr	r5, [r4, #0]
 80073e0:	f015 0506 	ands.w	r5, r5, #6
 80073e4:	d106      	bne.n	80073f4 <_printf_common+0x48>
 80073e6:	f104 0a19 	add.w	sl, r4, #25
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	6832      	ldr	r2, [r6, #0]
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	42ab      	cmp	r3, r5
 80073f2:	dc26      	bgt.n	8007442 <_printf_common+0x96>
 80073f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	3b00      	subs	r3, #0
 80073fc:	bf18      	it	ne
 80073fe:	2301      	movne	r3, #1
 8007400:	0692      	lsls	r2, r2, #26
 8007402:	d42b      	bmi.n	800745c <_printf_common+0xb0>
 8007404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007408:	4641      	mov	r1, r8
 800740a:	4638      	mov	r0, r7
 800740c:	47c8      	blx	r9
 800740e:	3001      	adds	r0, #1
 8007410:	d01e      	beq.n	8007450 <_printf_common+0xa4>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	6922      	ldr	r2, [r4, #16]
 8007416:	f003 0306 	and.w	r3, r3, #6
 800741a:	2b04      	cmp	r3, #4
 800741c:	bf02      	ittt	eq
 800741e:	68e5      	ldreq	r5, [r4, #12]
 8007420:	6833      	ldreq	r3, [r6, #0]
 8007422:	1aed      	subeq	r5, r5, r3
 8007424:	68a3      	ldr	r3, [r4, #8]
 8007426:	bf0c      	ite	eq
 8007428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800742c:	2500      	movne	r5, #0
 800742e:	4293      	cmp	r3, r2
 8007430:	bfc4      	itt	gt
 8007432:	1a9b      	subgt	r3, r3, r2
 8007434:	18ed      	addgt	r5, r5, r3
 8007436:	2600      	movs	r6, #0
 8007438:	341a      	adds	r4, #26
 800743a:	42b5      	cmp	r5, r6
 800743c:	d11a      	bne.n	8007474 <_printf_common+0xc8>
 800743e:	2000      	movs	r0, #0
 8007440:	e008      	b.n	8007454 <_printf_common+0xa8>
 8007442:	2301      	movs	r3, #1
 8007444:	4652      	mov	r2, sl
 8007446:	4641      	mov	r1, r8
 8007448:	4638      	mov	r0, r7
 800744a:	47c8      	blx	r9
 800744c:	3001      	adds	r0, #1
 800744e:	d103      	bne.n	8007458 <_printf_common+0xac>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	3501      	adds	r5, #1
 800745a:	e7c6      	b.n	80073ea <_printf_common+0x3e>
 800745c:	18e1      	adds	r1, r4, r3
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	2030      	movs	r0, #48	@ 0x30
 8007462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007466:	4422      	add	r2, r4
 8007468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800746c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007470:	3302      	adds	r3, #2
 8007472:	e7c7      	b.n	8007404 <_printf_common+0x58>
 8007474:	2301      	movs	r3, #1
 8007476:	4622      	mov	r2, r4
 8007478:	4641      	mov	r1, r8
 800747a:	4638      	mov	r0, r7
 800747c:	47c8      	blx	r9
 800747e:	3001      	adds	r0, #1
 8007480:	d0e6      	beq.n	8007450 <_printf_common+0xa4>
 8007482:	3601      	adds	r6, #1
 8007484:	e7d9      	b.n	800743a <_printf_common+0x8e>
	...

08007488 <_printf_i>:
 8007488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	7e0f      	ldrb	r7, [r1, #24]
 800748e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007490:	2f78      	cmp	r7, #120	@ 0x78
 8007492:	4691      	mov	r9, r2
 8007494:	4680      	mov	r8, r0
 8007496:	460c      	mov	r4, r1
 8007498:	469a      	mov	sl, r3
 800749a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800749e:	d807      	bhi.n	80074b0 <_printf_i+0x28>
 80074a0:	2f62      	cmp	r7, #98	@ 0x62
 80074a2:	d80a      	bhi.n	80074ba <_printf_i+0x32>
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	f000 80d1 	beq.w	800764c <_printf_i+0x1c4>
 80074aa:	2f58      	cmp	r7, #88	@ 0x58
 80074ac:	f000 80b8 	beq.w	8007620 <_printf_i+0x198>
 80074b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074b8:	e03a      	b.n	8007530 <_printf_i+0xa8>
 80074ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074be:	2b15      	cmp	r3, #21
 80074c0:	d8f6      	bhi.n	80074b0 <_printf_i+0x28>
 80074c2:	a101      	add	r1, pc, #4	@ (adr r1, 80074c8 <_printf_i+0x40>)
 80074c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007535 	.word	0x08007535
 80074d0:	080074b1 	.word	0x080074b1
 80074d4:	080074b1 	.word	0x080074b1
 80074d8:	080074b1 	.word	0x080074b1
 80074dc:	080074b1 	.word	0x080074b1
 80074e0:	08007535 	.word	0x08007535
 80074e4:	080074b1 	.word	0x080074b1
 80074e8:	080074b1 	.word	0x080074b1
 80074ec:	080074b1 	.word	0x080074b1
 80074f0:	080074b1 	.word	0x080074b1
 80074f4:	08007633 	.word	0x08007633
 80074f8:	0800755f 	.word	0x0800755f
 80074fc:	080075ed 	.word	0x080075ed
 8007500:	080074b1 	.word	0x080074b1
 8007504:	080074b1 	.word	0x080074b1
 8007508:	08007655 	.word	0x08007655
 800750c:	080074b1 	.word	0x080074b1
 8007510:	0800755f 	.word	0x0800755f
 8007514:	080074b1 	.word	0x080074b1
 8007518:	080074b1 	.word	0x080074b1
 800751c:	080075f5 	.word	0x080075f5
 8007520:	6833      	ldr	r3, [r6, #0]
 8007522:	1d1a      	adds	r2, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6032      	str	r2, [r6, #0]
 8007528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800752c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007530:	2301      	movs	r3, #1
 8007532:	e09c      	b.n	800766e <_printf_i+0x1e6>
 8007534:	6833      	ldr	r3, [r6, #0]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	1d19      	adds	r1, r3, #4
 800753a:	6031      	str	r1, [r6, #0]
 800753c:	0606      	lsls	r6, r0, #24
 800753e:	d501      	bpl.n	8007544 <_printf_i+0xbc>
 8007540:	681d      	ldr	r5, [r3, #0]
 8007542:	e003      	b.n	800754c <_printf_i+0xc4>
 8007544:	0645      	lsls	r5, r0, #25
 8007546:	d5fb      	bpl.n	8007540 <_printf_i+0xb8>
 8007548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800754c:	2d00      	cmp	r5, #0
 800754e:	da03      	bge.n	8007558 <_printf_i+0xd0>
 8007550:	232d      	movs	r3, #45	@ 0x2d
 8007552:	426d      	negs	r5, r5
 8007554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007558:	4858      	ldr	r0, [pc, #352]	@ (80076bc <_printf_i+0x234>)
 800755a:	230a      	movs	r3, #10
 800755c:	e011      	b.n	8007582 <_printf_i+0xfa>
 800755e:	6821      	ldr	r1, [r4, #0]
 8007560:	6833      	ldr	r3, [r6, #0]
 8007562:	0608      	lsls	r0, r1, #24
 8007564:	f853 5b04 	ldr.w	r5, [r3], #4
 8007568:	d402      	bmi.n	8007570 <_printf_i+0xe8>
 800756a:	0649      	lsls	r1, r1, #25
 800756c:	bf48      	it	mi
 800756e:	b2ad      	uxthmi	r5, r5
 8007570:	2f6f      	cmp	r7, #111	@ 0x6f
 8007572:	4852      	ldr	r0, [pc, #328]	@ (80076bc <_printf_i+0x234>)
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	bf14      	ite	ne
 8007578:	230a      	movne	r3, #10
 800757a:	2308      	moveq	r3, #8
 800757c:	2100      	movs	r1, #0
 800757e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007582:	6866      	ldr	r6, [r4, #4]
 8007584:	60a6      	str	r6, [r4, #8]
 8007586:	2e00      	cmp	r6, #0
 8007588:	db05      	blt.n	8007596 <_printf_i+0x10e>
 800758a:	6821      	ldr	r1, [r4, #0]
 800758c:	432e      	orrs	r6, r5
 800758e:	f021 0104 	bic.w	r1, r1, #4
 8007592:	6021      	str	r1, [r4, #0]
 8007594:	d04b      	beq.n	800762e <_printf_i+0x1a6>
 8007596:	4616      	mov	r6, r2
 8007598:	fbb5 f1f3 	udiv	r1, r5, r3
 800759c:	fb03 5711 	mls	r7, r3, r1, r5
 80075a0:	5dc7      	ldrb	r7, [r0, r7]
 80075a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075a6:	462f      	mov	r7, r5
 80075a8:	42bb      	cmp	r3, r7
 80075aa:	460d      	mov	r5, r1
 80075ac:	d9f4      	bls.n	8007598 <_printf_i+0x110>
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d10b      	bne.n	80075ca <_printf_i+0x142>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	07df      	lsls	r7, r3, #31
 80075b6:	d508      	bpl.n	80075ca <_printf_i+0x142>
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	6861      	ldr	r1, [r4, #4]
 80075bc:	4299      	cmp	r1, r3
 80075be:	bfde      	ittt	le
 80075c0:	2330      	movle	r3, #48	@ 0x30
 80075c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075ca:	1b92      	subs	r2, r2, r6
 80075cc:	6122      	str	r2, [r4, #16]
 80075ce:	f8cd a000 	str.w	sl, [sp]
 80075d2:	464b      	mov	r3, r9
 80075d4:	aa03      	add	r2, sp, #12
 80075d6:	4621      	mov	r1, r4
 80075d8:	4640      	mov	r0, r8
 80075da:	f7ff fee7 	bl	80073ac <_printf_common>
 80075de:	3001      	adds	r0, #1
 80075e0:	d14a      	bne.n	8007678 <_printf_i+0x1f0>
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295
 80075e6:	b004      	add	sp, #16
 80075e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	f043 0320 	orr.w	r3, r3, #32
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	4832      	ldr	r0, [pc, #200]	@ (80076c0 <_printf_i+0x238>)
 80075f6:	2778      	movs	r7, #120	@ 0x78
 80075f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	6831      	ldr	r1, [r6, #0]
 8007600:	061f      	lsls	r7, r3, #24
 8007602:	f851 5b04 	ldr.w	r5, [r1], #4
 8007606:	d402      	bmi.n	800760e <_printf_i+0x186>
 8007608:	065f      	lsls	r7, r3, #25
 800760a:	bf48      	it	mi
 800760c:	b2ad      	uxthmi	r5, r5
 800760e:	6031      	str	r1, [r6, #0]
 8007610:	07d9      	lsls	r1, r3, #31
 8007612:	bf44      	itt	mi
 8007614:	f043 0320 	orrmi.w	r3, r3, #32
 8007618:	6023      	strmi	r3, [r4, #0]
 800761a:	b11d      	cbz	r5, 8007624 <_printf_i+0x19c>
 800761c:	2310      	movs	r3, #16
 800761e:	e7ad      	b.n	800757c <_printf_i+0xf4>
 8007620:	4826      	ldr	r0, [pc, #152]	@ (80076bc <_printf_i+0x234>)
 8007622:	e7e9      	b.n	80075f8 <_printf_i+0x170>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	f023 0320 	bic.w	r3, r3, #32
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	e7f6      	b.n	800761c <_printf_i+0x194>
 800762e:	4616      	mov	r6, r2
 8007630:	e7bd      	b.n	80075ae <_printf_i+0x126>
 8007632:	6833      	ldr	r3, [r6, #0]
 8007634:	6825      	ldr	r5, [r4, #0]
 8007636:	6961      	ldr	r1, [r4, #20]
 8007638:	1d18      	adds	r0, r3, #4
 800763a:	6030      	str	r0, [r6, #0]
 800763c:	062e      	lsls	r6, r5, #24
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	d501      	bpl.n	8007646 <_printf_i+0x1be>
 8007642:	6019      	str	r1, [r3, #0]
 8007644:	e002      	b.n	800764c <_printf_i+0x1c4>
 8007646:	0668      	lsls	r0, r5, #25
 8007648:	d5fb      	bpl.n	8007642 <_printf_i+0x1ba>
 800764a:	8019      	strh	r1, [r3, #0]
 800764c:	2300      	movs	r3, #0
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	4616      	mov	r6, r2
 8007652:	e7bc      	b.n	80075ce <_printf_i+0x146>
 8007654:	6833      	ldr	r3, [r6, #0]
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	6032      	str	r2, [r6, #0]
 800765a:	681e      	ldr	r6, [r3, #0]
 800765c:	6862      	ldr	r2, [r4, #4]
 800765e:	2100      	movs	r1, #0
 8007660:	4630      	mov	r0, r6
 8007662:	f7f8 fdd5 	bl	8000210 <memchr>
 8007666:	b108      	cbz	r0, 800766c <_printf_i+0x1e4>
 8007668:	1b80      	subs	r0, r0, r6
 800766a:	6060      	str	r0, [r4, #4]
 800766c:	6863      	ldr	r3, [r4, #4]
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	2300      	movs	r3, #0
 8007672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007676:	e7aa      	b.n	80075ce <_printf_i+0x146>
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	4632      	mov	r2, r6
 800767c:	4649      	mov	r1, r9
 800767e:	4640      	mov	r0, r8
 8007680:	47d0      	blx	sl
 8007682:	3001      	adds	r0, #1
 8007684:	d0ad      	beq.n	80075e2 <_printf_i+0x15a>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	079b      	lsls	r3, r3, #30
 800768a:	d413      	bmi.n	80076b4 <_printf_i+0x22c>
 800768c:	68e0      	ldr	r0, [r4, #12]
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	4298      	cmp	r0, r3
 8007692:	bfb8      	it	lt
 8007694:	4618      	movlt	r0, r3
 8007696:	e7a6      	b.n	80075e6 <_printf_i+0x15e>
 8007698:	2301      	movs	r3, #1
 800769a:	4632      	mov	r2, r6
 800769c:	4649      	mov	r1, r9
 800769e:	4640      	mov	r0, r8
 80076a0:	47d0      	blx	sl
 80076a2:	3001      	adds	r0, #1
 80076a4:	d09d      	beq.n	80075e2 <_printf_i+0x15a>
 80076a6:	3501      	adds	r5, #1
 80076a8:	68e3      	ldr	r3, [r4, #12]
 80076aa:	9903      	ldr	r1, [sp, #12]
 80076ac:	1a5b      	subs	r3, r3, r1
 80076ae:	42ab      	cmp	r3, r5
 80076b0:	dcf2      	bgt.n	8007698 <_printf_i+0x210>
 80076b2:	e7eb      	b.n	800768c <_printf_i+0x204>
 80076b4:	2500      	movs	r5, #0
 80076b6:	f104 0619 	add.w	r6, r4, #25
 80076ba:	e7f5      	b.n	80076a8 <_printf_i+0x220>
 80076bc:	08009a02 	.word	0x08009a02
 80076c0:	08009a13 	.word	0x08009a13

080076c4 <std>:
 80076c4:	2300      	movs	r3, #0
 80076c6:	b510      	push	{r4, lr}
 80076c8:	4604      	mov	r4, r0
 80076ca:	e9c0 3300 	strd	r3, r3, [r0]
 80076ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076d2:	6083      	str	r3, [r0, #8]
 80076d4:	8181      	strh	r1, [r0, #12]
 80076d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076d8:	81c2      	strh	r2, [r0, #14]
 80076da:	6183      	str	r3, [r0, #24]
 80076dc:	4619      	mov	r1, r3
 80076de:	2208      	movs	r2, #8
 80076e0:	305c      	adds	r0, #92	@ 0x5c
 80076e2:	f000 f9f9 	bl	8007ad8 <memset>
 80076e6:	4b0d      	ldr	r3, [pc, #52]	@ (800771c <std+0x58>)
 80076e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <std+0x5c>)
 80076ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007724 <std+0x60>)
 80076f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <std+0x64>)
 80076f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80076f6:	4b0d      	ldr	r3, [pc, #52]	@ (800772c <std+0x68>)
 80076f8:	6224      	str	r4, [r4, #32]
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d006      	beq.n	800770c <std+0x48>
 80076fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007702:	4294      	cmp	r4, r2
 8007704:	d002      	beq.n	800770c <std+0x48>
 8007706:	33d0      	adds	r3, #208	@ 0xd0
 8007708:	429c      	cmp	r4, r3
 800770a:	d105      	bne.n	8007718 <std+0x54>
 800770c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007714:	f000 ba5c 	b.w	8007bd0 <__retarget_lock_init_recursive>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	bf00      	nop
 800771c:	08007929 	.word	0x08007929
 8007720:	0800794b 	.word	0x0800794b
 8007724:	08007983 	.word	0x08007983
 8007728:	080079a7 	.word	0x080079a7
 800772c:	20000294 	.word	0x20000294

08007730 <stdio_exit_handler>:
 8007730:	4a02      	ldr	r2, [pc, #8]	@ (800773c <stdio_exit_handler+0xc>)
 8007732:	4903      	ldr	r1, [pc, #12]	@ (8007740 <stdio_exit_handler+0x10>)
 8007734:	4803      	ldr	r0, [pc, #12]	@ (8007744 <stdio_exit_handler+0x14>)
 8007736:	f000 b869 	b.w	800780c <_fwalk_sglue>
 800773a:	bf00      	nop
 800773c:	2000000c 	.word	0x2000000c
 8007740:	08009509 	.word	0x08009509
 8007744:	2000001c 	.word	0x2000001c

08007748 <cleanup_stdio>:
 8007748:	6841      	ldr	r1, [r0, #4]
 800774a:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <cleanup_stdio+0x34>)
 800774c:	4299      	cmp	r1, r3
 800774e:	b510      	push	{r4, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	d001      	beq.n	8007758 <cleanup_stdio+0x10>
 8007754:	f001 fed8 	bl	8009508 <_fflush_r>
 8007758:	68a1      	ldr	r1, [r4, #8]
 800775a:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <cleanup_stdio+0x38>)
 800775c:	4299      	cmp	r1, r3
 800775e:	d002      	beq.n	8007766 <cleanup_stdio+0x1e>
 8007760:	4620      	mov	r0, r4
 8007762:	f001 fed1 	bl	8009508 <_fflush_r>
 8007766:	68e1      	ldr	r1, [r4, #12]
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <cleanup_stdio+0x3c>)
 800776a:	4299      	cmp	r1, r3
 800776c:	d004      	beq.n	8007778 <cleanup_stdio+0x30>
 800776e:	4620      	mov	r0, r4
 8007770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007774:	f001 bec8 	b.w	8009508 <_fflush_r>
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	20000294 	.word	0x20000294
 8007780:	200002fc 	.word	0x200002fc
 8007784:	20000364 	.word	0x20000364

08007788 <global_stdio_init.part.0>:
 8007788:	b510      	push	{r4, lr}
 800778a:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <global_stdio_init.part.0+0x30>)
 800778c:	4c0b      	ldr	r4, [pc, #44]	@ (80077bc <global_stdio_init.part.0+0x34>)
 800778e:	4a0c      	ldr	r2, [pc, #48]	@ (80077c0 <global_stdio_init.part.0+0x38>)
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	4620      	mov	r0, r4
 8007794:	2200      	movs	r2, #0
 8007796:	2104      	movs	r1, #4
 8007798:	f7ff ff94 	bl	80076c4 <std>
 800779c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077a0:	2201      	movs	r2, #1
 80077a2:	2109      	movs	r1, #9
 80077a4:	f7ff ff8e 	bl	80076c4 <std>
 80077a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077ac:	2202      	movs	r2, #2
 80077ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b2:	2112      	movs	r1, #18
 80077b4:	f7ff bf86 	b.w	80076c4 <std>
 80077b8:	200003cc 	.word	0x200003cc
 80077bc:	20000294 	.word	0x20000294
 80077c0:	08007731 	.word	0x08007731

080077c4 <__sfp_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <__sfp_lock_acquire+0x8>)
 80077c6:	f000 ba04 	b.w	8007bd2 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	200003d5 	.word	0x200003d5

080077d0 <__sfp_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	@ (80077d8 <__sfp_lock_release+0x8>)
 80077d2:	f000 b9ff 	b.w	8007bd4 <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	200003d5 	.word	0x200003d5

080077dc <__sinit>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	f7ff fff0 	bl	80077c4 <__sfp_lock_acquire>
 80077e4:	6a23      	ldr	r3, [r4, #32]
 80077e6:	b11b      	cbz	r3, 80077f0 <__sinit+0x14>
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f7ff bff0 	b.w	80077d0 <__sfp_lock_release>
 80077f0:	4b04      	ldr	r3, [pc, #16]	@ (8007804 <__sinit+0x28>)
 80077f2:	6223      	str	r3, [r4, #32]
 80077f4:	4b04      	ldr	r3, [pc, #16]	@ (8007808 <__sinit+0x2c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f5      	bne.n	80077e8 <__sinit+0xc>
 80077fc:	f7ff ffc4 	bl	8007788 <global_stdio_init.part.0>
 8007800:	e7f2      	b.n	80077e8 <__sinit+0xc>
 8007802:	bf00      	nop
 8007804:	08007749 	.word	0x08007749
 8007808:	200003cc 	.word	0x200003cc

0800780c <_fwalk_sglue>:
 800780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007810:	4607      	mov	r7, r0
 8007812:	4688      	mov	r8, r1
 8007814:	4614      	mov	r4, r2
 8007816:	2600      	movs	r6, #0
 8007818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800781c:	f1b9 0901 	subs.w	r9, r9, #1
 8007820:	d505      	bpl.n	800782e <_fwalk_sglue+0x22>
 8007822:	6824      	ldr	r4, [r4, #0]
 8007824:	2c00      	cmp	r4, #0
 8007826:	d1f7      	bne.n	8007818 <_fwalk_sglue+0xc>
 8007828:	4630      	mov	r0, r6
 800782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d907      	bls.n	8007844 <_fwalk_sglue+0x38>
 8007834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007838:	3301      	adds	r3, #1
 800783a:	d003      	beq.n	8007844 <_fwalk_sglue+0x38>
 800783c:	4629      	mov	r1, r5
 800783e:	4638      	mov	r0, r7
 8007840:	47c0      	blx	r8
 8007842:	4306      	orrs	r6, r0
 8007844:	3568      	adds	r5, #104	@ 0x68
 8007846:	e7e9      	b.n	800781c <_fwalk_sglue+0x10>

08007848 <iprintf>:
 8007848:	b40f      	push	{r0, r1, r2, r3}
 800784a:	b507      	push	{r0, r1, r2, lr}
 800784c:	4906      	ldr	r1, [pc, #24]	@ (8007868 <iprintf+0x20>)
 800784e:	ab04      	add	r3, sp, #16
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	f853 2b04 	ldr.w	r2, [r3], #4
 8007856:	6881      	ldr	r1, [r0, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	f001 fcb9 	bl	80091d0 <_vfiprintf_r>
 800785e:	b003      	add	sp, #12
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b004      	add	sp, #16
 8007866:	4770      	bx	lr
 8007868:	20000018 	.word	0x20000018

0800786c <_puts_r>:
 800786c:	6a03      	ldr	r3, [r0, #32]
 800786e:	b570      	push	{r4, r5, r6, lr}
 8007870:	6884      	ldr	r4, [r0, #8]
 8007872:	4605      	mov	r5, r0
 8007874:	460e      	mov	r6, r1
 8007876:	b90b      	cbnz	r3, 800787c <_puts_r+0x10>
 8007878:	f7ff ffb0 	bl	80077dc <__sinit>
 800787c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800787e:	07db      	lsls	r3, r3, #31
 8007880:	d405      	bmi.n	800788e <_puts_r+0x22>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	0598      	lsls	r0, r3, #22
 8007886:	d402      	bmi.n	800788e <_puts_r+0x22>
 8007888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800788a:	f000 f9a2 	bl	8007bd2 <__retarget_lock_acquire_recursive>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	0719      	lsls	r1, r3, #28
 8007892:	d502      	bpl.n	800789a <_puts_r+0x2e>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d135      	bne.n	8007906 <_puts_r+0x9a>
 800789a:	4621      	mov	r1, r4
 800789c:	4628      	mov	r0, r5
 800789e:	f000 f8c5 	bl	8007a2c <__swsetup_r>
 80078a2:	b380      	cbz	r0, 8007906 <_puts_r+0x9a>
 80078a4:	f04f 35ff 	mov.w	r5, #4294967295
 80078a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078aa:	07da      	lsls	r2, r3, #31
 80078ac:	d405      	bmi.n	80078ba <_puts_r+0x4e>
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	059b      	lsls	r3, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_puts_r+0x4e>
 80078b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078b6:	f000 f98d 	bl	8007bd4 <__retarget_lock_release_recursive>
 80078ba:	4628      	mov	r0, r5
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	2b00      	cmp	r3, #0
 80078c0:	da04      	bge.n	80078cc <_puts_r+0x60>
 80078c2:	69a2      	ldr	r2, [r4, #24]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	dc17      	bgt.n	80078f8 <_puts_r+0x8c>
 80078c8:	290a      	cmp	r1, #10
 80078ca:	d015      	beq.n	80078f8 <_puts_r+0x8c>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	7019      	strb	r1, [r3, #0]
 80078d4:	68a3      	ldr	r3, [r4, #8]
 80078d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078da:	3b01      	subs	r3, #1
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	2900      	cmp	r1, #0
 80078e0:	d1ed      	bne.n	80078be <_puts_r+0x52>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da11      	bge.n	800790a <_puts_r+0x9e>
 80078e6:	4622      	mov	r2, r4
 80078e8:	210a      	movs	r1, #10
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f85f 	bl	80079ae <__swbuf_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0d7      	beq.n	80078a4 <_puts_r+0x38>
 80078f4:	250a      	movs	r5, #10
 80078f6:	e7d7      	b.n	80078a8 <_puts_r+0x3c>
 80078f8:	4622      	mov	r2, r4
 80078fa:	4628      	mov	r0, r5
 80078fc:	f000 f857 	bl	80079ae <__swbuf_r>
 8007900:	3001      	adds	r0, #1
 8007902:	d1e7      	bne.n	80078d4 <_puts_r+0x68>
 8007904:	e7ce      	b.n	80078a4 <_puts_r+0x38>
 8007906:	3e01      	subs	r6, #1
 8007908:	e7e4      	b.n	80078d4 <_puts_r+0x68>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	6022      	str	r2, [r4, #0]
 8007910:	220a      	movs	r2, #10
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e7ee      	b.n	80078f4 <_puts_r+0x88>
	...

08007918 <puts>:
 8007918:	4b02      	ldr	r3, [pc, #8]	@ (8007924 <puts+0xc>)
 800791a:	4601      	mov	r1, r0
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	f7ff bfa5 	b.w	800786c <_puts_r>
 8007922:	bf00      	nop
 8007924:	20000018 	.word	0x20000018

08007928 <__sread>:
 8007928:	b510      	push	{r4, lr}
 800792a:	460c      	mov	r4, r1
 800792c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007930:	f000 f900 	bl	8007b34 <_read_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	bfab      	itete	ge
 8007938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800793a:	89a3      	ldrhlt	r3, [r4, #12]
 800793c:	181b      	addge	r3, r3, r0
 800793e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007942:	bfac      	ite	ge
 8007944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007946:	81a3      	strhlt	r3, [r4, #12]
 8007948:	bd10      	pop	{r4, pc}

0800794a <__swrite>:
 800794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	461f      	mov	r7, r3
 8007950:	898b      	ldrh	r3, [r1, #12]
 8007952:	05db      	lsls	r3, r3, #23
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	4616      	mov	r6, r2
 800795a:	d505      	bpl.n	8007968 <__swrite+0x1e>
 800795c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007960:	2302      	movs	r3, #2
 8007962:	2200      	movs	r2, #0
 8007964:	f000 f8d4 	bl	8007b10 <_lseek_r>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	4628      	mov	r0, r5
 800797a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797e:	f000 b8eb 	b.w	8007b58 <_write_r>

08007982 <__sseek>:
 8007982:	b510      	push	{r4, lr}
 8007984:	460c      	mov	r4, r1
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	f000 f8c1 	bl	8007b10 <_lseek_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	bf15      	itete	ne
 8007994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800799a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800799e:	81a3      	strheq	r3, [r4, #12]
 80079a0:	bf18      	it	ne
 80079a2:	81a3      	strhne	r3, [r4, #12]
 80079a4:	bd10      	pop	{r4, pc}

080079a6 <__sclose>:
 80079a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079aa:	f000 b8a1 	b.w	8007af0 <_close_r>

080079ae <__swbuf_r>:
 80079ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b0:	460e      	mov	r6, r1
 80079b2:	4614      	mov	r4, r2
 80079b4:	4605      	mov	r5, r0
 80079b6:	b118      	cbz	r0, 80079c0 <__swbuf_r+0x12>
 80079b8:	6a03      	ldr	r3, [r0, #32]
 80079ba:	b90b      	cbnz	r3, 80079c0 <__swbuf_r+0x12>
 80079bc:	f7ff ff0e 	bl	80077dc <__sinit>
 80079c0:	69a3      	ldr	r3, [r4, #24]
 80079c2:	60a3      	str	r3, [r4, #8]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	071a      	lsls	r2, r3, #28
 80079c8:	d501      	bpl.n	80079ce <__swbuf_r+0x20>
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	b943      	cbnz	r3, 80079e0 <__swbuf_r+0x32>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f82b 	bl	8007a2c <__swsetup_r>
 80079d6:	b118      	cbz	r0, 80079e0 <__swbuf_r+0x32>
 80079d8:	f04f 37ff 	mov.w	r7, #4294967295
 80079dc:	4638      	mov	r0, r7
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	6922      	ldr	r2, [r4, #16]
 80079e4:	1a98      	subs	r0, r3, r2
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	b2f6      	uxtb	r6, r6
 80079ea:	4283      	cmp	r3, r0
 80079ec:	4637      	mov	r7, r6
 80079ee:	dc05      	bgt.n	80079fc <__swbuf_r+0x4e>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f001 fd88 	bl	8009508 <_fflush_r>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1ed      	bne.n	80079d8 <__swbuf_r+0x2a>
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	701e      	strb	r6, [r3, #0]
 8007a0a:	6962      	ldr	r2, [r4, #20]
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d004      	beq.n	8007a1c <__swbuf_r+0x6e>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	07db      	lsls	r3, r3, #31
 8007a16:	d5e1      	bpl.n	80079dc <__swbuf_r+0x2e>
 8007a18:	2e0a      	cmp	r6, #10
 8007a1a:	d1df      	bne.n	80079dc <__swbuf_r+0x2e>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f001 fd72 	bl	8009508 <_fflush_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d0d9      	beq.n	80079dc <__swbuf_r+0x2e>
 8007a28:	e7d6      	b.n	80079d8 <__swbuf_r+0x2a>
	...

08007a2c <__swsetup_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <__swsetup_r+0xa8>)
 8007a30:	4605      	mov	r5, r0
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	460c      	mov	r4, r1
 8007a36:	b118      	cbz	r0, 8007a40 <__swsetup_r+0x14>
 8007a38:	6a03      	ldr	r3, [r0, #32]
 8007a3a:	b90b      	cbnz	r3, 8007a40 <__swsetup_r+0x14>
 8007a3c:	f7ff fece 	bl	80077dc <__sinit>
 8007a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a44:	0719      	lsls	r1, r3, #28
 8007a46:	d422      	bmi.n	8007a8e <__swsetup_r+0x62>
 8007a48:	06da      	lsls	r2, r3, #27
 8007a4a:	d407      	bmi.n	8007a5c <__swsetup_r+0x30>
 8007a4c:	2209      	movs	r2, #9
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	e033      	b.n	8007ac4 <__swsetup_r+0x98>
 8007a5c:	0758      	lsls	r0, r3, #29
 8007a5e:	d512      	bpl.n	8007a86 <__swsetup_r+0x5a>
 8007a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a62:	b141      	cbz	r1, 8007a76 <__swsetup_r+0x4a>
 8007a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <__swsetup_r+0x46>
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 ff0b 	bl	8008888 <_free_r>
 8007a72:	2300      	movs	r3, #0
 8007a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f043 0308 	orr.w	r3, r3, #8
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	b94b      	cbnz	r3, 8007aa6 <__swsetup_r+0x7a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9c:	d003      	beq.n	8007aa6 <__swsetup_r+0x7a>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f001 fd7f 	bl	80095a4 <__smakebuf_r>
 8007aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aaa:	f013 0201 	ands.w	r2, r3, #1
 8007aae:	d00a      	beq.n	8007ac6 <__swsetup_r+0x9a>
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	60a2      	str	r2, [r4, #8]
 8007ab4:	6962      	ldr	r2, [r4, #20]
 8007ab6:	4252      	negs	r2, r2
 8007ab8:	61a2      	str	r2, [r4, #24]
 8007aba:	6922      	ldr	r2, [r4, #16]
 8007abc:	b942      	cbnz	r2, 8007ad0 <__swsetup_r+0xa4>
 8007abe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ac2:	d1c5      	bne.n	8007a50 <__swsetup_r+0x24>
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	0799      	lsls	r1, r3, #30
 8007ac8:	bf58      	it	pl
 8007aca:	6962      	ldrpl	r2, [r4, #20]
 8007acc:	60a2      	str	r2, [r4, #8]
 8007ace:	e7f4      	b.n	8007aba <__swsetup_r+0x8e>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e7f7      	b.n	8007ac4 <__swsetup_r+0x98>
 8007ad4:	20000018 	.word	0x20000018

08007ad8 <memset>:
 8007ad8:	4402      	add	r2, r0
 8007ada:	4603      	mov	r3, r0
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d100      	bne.n	8007ae2 <memset+0xa>
 8007ae0:	4770      	bx	lr
 8007ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ae6:	e7f9      	b.n	8007adc <memset+0x4>

08007ae8 <_localeconv_r>:
 8007ae8:	4800      	ldr	r0, [pc, #0]	@ (8007aec <_localeconv_r+0x4>)
 8007aea:	4770      	bx	lr
 8007aec:	20000158 	.word	0x20000158

08007af0 <_close_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d06      	ldr	r5, [pc, #24]	@ (8007b0c <_close_r+0x1c>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	f7fa f96e 	bl	8001ddc <_close>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_close_r+0x1a>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_close_r+0x1a>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	200003d0 	.word	0x200003d0

08007b10 <_lseek_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	@ (8007b30 <_lseek_r+0x20>)
 8007b14:	4604      	mov	r4, r0
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7fa f983 	bl	8001e2a <_lseek>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_lseek_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_lseek_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	200003d0 	.word	0x200003d0

08007b34 <_read_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d07      	ldr	r5, [pc, #28]	@ (8007b54 <_read_r+0x20>)
 8007b38:	4604      	mov	r4, r0
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f7fa f911 	bl	8001d6a <_read>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_read_r+0x1e>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_read_r+0x1e>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	200003d0 	.word	0x200003d0

08007b58 <_write_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4d07      	ldr	r5, [pc, #28]	@ (8007b78 <_write_r+0x20>)
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	4608      	mov	r0, r1
 8007b60:	4611      	mov	r1, r2
 8007b62:	2200      	movs	r2, #0
 8007b64:	602a      	str	r2, [r5, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f7fa f91c 	bl	8001da4 <_write>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_write_r+0x1e>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_write_r+0x1e>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	200003d0 	.word	0x200003d0

08007b7c <__errno>:
 8007b7c:	4b01      	ldr	r3, [pc, #4]	@ (8007b84 <__errno+0x8>)
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20000018 	.word	0x20000018

08007b88 <__libc_init_array>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc0 <__libc_init_array+0x38>)
 8007b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8007bc4 <__libc_init_array+0x3c>)
 8007b8e:	1b64      	subs	r4, r4, r5
 8007b90:	10a4      	asrs	r4, r4, #2
 8007b92:	2600      	movs	r6, #0
 8007b94:	42a6      	cmp	r6, r4
 8007b96:	d109      	bne.n	8007bac <__libc_init_array+0x24>
 8007b98:	4d0b      	ldr	r5, [pc, #44]	@ (8007bc8 <__libc_init_array+0x40>)
 8007b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8007bcc <__libc_init_array+0x44>)
 8007b9c:	f001 fe2e 	bl	80097fc <_init>
 8007ba0:	1b64      	subs	r4, r4, r5
 8007ba2:	10a4      	asrs	r4, r4, #2
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	42a6      	cmp	r6, r4
 8007ba8:	d105      	bne.n	8007bb6 <__libc_init_array+0x2e>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb0:	4798      	blx	r3
 8007bb2:	3601      	adds	r6, #1
 8007bb4:	e7ee      	b.n	8007b94 <__libc_init_array+0xc>
 8007bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bba:	4798      	blx	r3
 8007bbc:	3601      	adds	r6, #1
 8007bbe:	e7f2      	b.n	8007ba6 <__libc_init_array+0x1e>
 8007bc0:	08009d6c 	.word	0x08009d6c
 8007bc4:	08009d6c 	.word	0x08009d6c
 8007bc8:	08009d6c 	.word	0x08009d6c
 8007bcc:	08009d70 	.word	0x08009d70

08007bd0 <__retarget_lock_init_recursive>:
 8007bd0:	4770      	bx	lr

08007bd2 <__retarget_lock_acquire_recursive>:
 8007bd2:	4770      	bx	lr

08007bd4 <__retarget_lock_release_recursive>:
 8007bd4:	4770      	bx	lr

08007bd6 <quorem>:
 8007bd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	6903      	ldr	r3, [r0, #16]
 8007bdc:	690c      	ldr	r4, [r1, #16]
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	4607      	mov	r7, r0
 8007be2:	db7e      	blt.n	8007ce2 <quorem+0x10c>
 8007be4:	3c01      	subs	r4, #1
 8007be6:	f101 0814 	add.w	r8, r1, #20
 8007bea:	00a3      	lsls	r3, r4, #2
 8007bec:	f100 0514 	add.w	r5, r0, #20
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c00:	3301      	adds	r3, #1
 8007c02:	429a      	cmp	r2, r3
 8007c04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c0c:	d32e      	bcc.n	8007c6c <quorem+0x96>
 8007c0e:	f04f 0a00 	mov.w	sl, #0
 8007c12:	46c4      	mov	ip, r8
 8007c14:	46ae      	mov	lr, r5
 8007c16:	46d3      	mov	fp, sl
 8007c18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c1c:	b298      	uxth	r0, r3
 8007c1e:	fb06 a000 	mla	r0, r6, r0, sl
 8007c22:	0c02      	lsrs	r2, r0, #16
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	fb06 2303 	mla	r3, r6, r3, r2
 8007c2a:	f8de 2000 	ldr.w	r2, [lr]
 8007c2e:	b280      	uxth	r0, r0
 8007c30:	b292      	uxth	r2, r2
 8007c32:	1a12      	subs	r2, r2, r0
 8007c34:	445a      	add	r2, fp
 8007c36:	f8de 0000 	ldr.w	r0, [lr]
 8007c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c48:	b292      	uxth	r2, r2
 8007c4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c4e:	45e1      	cmp	r9, ip
 8007c50:	f84e 2b04 	str.w	r2, [lr], #4
 8007c54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c58:	d2de      	bcs.n	8007c18 <quorem+0x42>
 8007c5a:	9b00      	ldr	r3, [sp, #0]
 8007c5c:	58eb      	ldr	r3, [r5, r3]
 8007c5e:	b92b      	cbnz	r3, 8007c6c <quorem+0x96>
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	3b04      	subs	r3, #4
 8007c64:	429d      	cmp	r5, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	d32f      	bcc.n	8007cca <quorem+0xf4>
 8007c6a:	613c      	str	r4, [r7, #16]
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f001 f97d 	bl	8008f6c <__mcmp>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	db25      	blt.n	8007cc2 <quorem+0xec>
 8007c76:	4629      	mov	r1, r5
 8007c78:	2000      	movs	r0, #0
 8007c7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c7e:	f8d1 c000 	ldr.w	ip, [r1]
 8007c82:	fa1f fe82 	uxth.w	lr, r2
 8007c86:	fa1f f38c 	uxth.w	r3, ip
 8007c8a:	eba3 030e 	sub.w	r3, r3, lr
 8007c8e:	4403      	add	r3, r0
 8007c90:	0c12      	lsrs	r2, r2, #16
 8007c92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca0:	45c1      	cmp	r9, r8
 8007ca2:	f841 3b04 	str.w	r3, [r1], #4
 8007ca6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007caa:	d2e6      	bcs.n	8007c7a <quorem+0xa4>
 8007cac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cb4:	b922      	cbnz	r2, 8007cc0 <quorem+0xea>
 8007cb6:	3b04      	subs	r3, #4
 8007cb8:	429d      	cmp	r5, r3
 8007cba:	461a      	mov	r2, r3
 8007cbc:	d30b      	bcc.n	8007cd6 <quorem+0x100>
 8007cbe:	613c      	str	r4, [r7, #16]
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	b003      	add	sp, #12
 8007cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cca:	6812      	ldr	r2, [r2, #0]
 8007ccc:	3b04      	subs	r3, #4
 8007cce:	2a00      	cmp	r2, #0
 8007cd0:	d1cb      	bne.n	8007c6a <quorem+0x94>
 8007cd2:	3c01      	subs	r4, #1
 8007cd4:	e7c6      	b.n	8007c64 <quorem+0x8e>
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d1ef      	bne.n	8007cbe <quorem+0xe8>
 8007cde:	3c01      	subs	r4, #1
 8007ce0:	e7ea      	b.n	8007cb8 <quorem+0xe2>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	e7ee      	b.n	8007cc4 <quorem+0xee>
	...

08007ce8 <_dtoa_r>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	69c7      	ldr	r7, [r0, #28]
 8007cee:	b097      	sub	sp, #92	@ 0x5c
 8007cf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007cf4:	ec55 4b10 	vmov	r4, r5, d0
 8007cf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007cfa:	9107      	str	r1, [sp, #28]
 8007cfc:	4681      	mov	r9, r0
 8007cfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d00:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d02:	b97f      	cbnz	r7, 8007d24 <_dtoa_r+0x3c>
 8007d04:	2010      	movs	r0, #16
 8007d06:	f000 fe09 	bl	800891c <malloc>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007d10:	b920      	cbnz	r0, 8007d1c <_dtoa_r+0x34>
 8007d12:	4ba9      	ldr	r3, [pc, #676]	@ (8007fb8 <_dtoa_r+0x2d0>)
 8007d14:	21ef      	movs	r1, #239	@ 0xef
 8007d16:	48a9      	ldr	r0, [pc, #676]	@ (8007fbc <_dtoa_r+0x2d4>)
 8007d18:	f001 fcc0 	bl	800969c <__assert_func>
 8007d1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d20:	6007      	str	r7, [r0, #0]
 8007d22:	60c7      	str	r7, [r0, #12]
 8007d24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	b159      	cbz	r1, 8007d44 <_dtoa_r+0x5c>
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	604a      	str	r2, [r1, #4]
 8007d30:	2301      	movs	r3, #1
 8007d32:	4093      	lsls	r3, r2
 8007d34:	608b      	str	r3, [r1, #8]
 8007d36:	4648      	mov	r0, r9
 8007d38:	f000 fee6 	bl	8008b08 <_Bfree>
 8007d3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	1e2b      	subs	r3, r5, #0
 8007d46:	bfb9      	ittee	lt
 8007d48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d4c:	9305      	strlt	r3, [sp, #20]
 8007d4e:	2300      	movge	r3, #0
 8007d50:	6033      	strge	r3, [r6, #0]
 8007d52:	9f05      	ldr	r7, [sp, #20]
 8007d54:	4b9a      	ldr	r3, [pc, #616]	@ (8007fc0 <_dtoa_r+0x2d8>)
 8007d56:	bfbc      	itt	lt
 8007d58:	2201      	movlt	r2, #1
 8007d5a:	6032      	strlt	r2, [r6, #0]
 8007d5c:	43bb      	bics	r3, r7
 8007d5e:	d112      	bne.n	8007d86 <_dtoa_r+0x9e>
 8007d60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d6c:	4323      	orrs	r3, r4
 8007d6e:	f000 855a 	beq.w	8008826 <_dtoa_r+0xb3e>
 8007d72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007fd4 <_dtoa_r+0x2ec>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 855c 	beq.w	8008836 <_dtoa_r+0xb4e>
 8007d7e:	f10a 0303 	add.w	r3, sl, #3
 8007d82:	f000 bd56 	b.w	8008832 <_dtoa_r+0xb4a>
 8007d86:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	ec51 0b17 	vmov	r0, r1, d7
 8007d90:	2300      	movs	r3, #0
 8007d92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007d96:	f7f8 feb7 	bl	8000b08 <__aeabi_dcmpeq>
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	b158      	cbz	r0, 8007db6 <_dtoa_r+0xce>
 8007d9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007da0:	2301      	movs	r3, #1
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007da6:	b113      	cbz	r3, 8007dae <_dtoa_r+0xc6>
 8007da8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007daa:	4b86      	ldr	r3, [pc, #536]	@ (8007fc4 <_dtoa_r+0x2dc>)
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007fd8 <_dtoa_r+0x2f0>
 8007db2:	f000 bd40 	b.w	8008836 <_dtoa_r+0xb4e>
 8007db6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007dba:	aa14      	add	r2, sp, #80	@ 0x50
 8007dbc:	a915      	add	r1, sp, #84	@ 0x54
 8007dbe:	4648      	mov	r0, r9
 8007dc0:	f001 f984 	bl	80090cc <__d2b>
 8007dc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007dc8:	9002      	str	r0, [sp, #8]
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	d078      	beq.n	8007ec0 <_dtoa_r+0x1d8>
 8007dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007de0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007de4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007de8:	4619      	mov	r1, r3
 8007dea:	2200      	movs	r2, #0
 8007dec:	4b76      	ldr	r3, [pc, #472]	@ (8007fc8 <_dtoa_r+0x2e0>)
 8007dee:	f7f8 fa6b 	bl	80002c8 <__aeabi_dsub>
 8007df2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007fa0 <_dtoa_r+0x2b8>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f7f8 fc1e 	bl	8000638 <__aeabi_dmul>
 8007dfc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007fa8 <_dtoa_r+0x2c0>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	f7f8 fa63 	bl	80002cc <__adddf3>
 8007e06:	4604      	mov	r4, r0
 8007e08:	4630      	mov	r0, r6
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	f7f8 fbaa 	bl	8000564 <__aeabi_i2d>
 8007e10:	a367      	add	r3, pc, #412	@ (adr r3, 8007fb0 <_dtoa_r+0x2c8>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f7f8 fc0f 	bl	8000638 <__aeabi_dmul>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 fa53 	bl	80002cc <__adddf3>
 8007e26:	4604      	mov	r4, r0
 8007e28:	460d      	mov	r5, r1
 8007e2a:	f7f8 feb5 	bl	8000b98 <__aeabi_d2iz>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4607      	mov	r7, r0
 8007e32:	2300      	movs	r3, #0
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	f7f8 fe70 	bl	8000b1c <__aeabi_dcmplt>
 8007e3c:	b140      	cbz	r0, 8007e50 <_dtoa_r+0x168>
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f7f8 fb90 	bl	8000564 <__aeabi_i2d>
 8007e44:	4622      	mov	r2, r4
 8007e46:	462b      	mov	r3, r5
 8007e48:	f7f8 fe5e 	bl	8000b08 <__aeabi_dcmpeq>
 8007e4c:	b900      	cbnz	r0, 8007e50 <_dtoa_r+0x168>
 8007e4e:	3f01      	subs	r7, #1
 8007e50:	2f16      	cmp	r7, #22
 8007e52:	d852      	bhi.n	8007efa <_dtoa_r+0x212>
 8007e54:	4b5d      	ldr	r3, [pc, #372]	@ (8007fcc <_dtoa_r+0x2e4>)
 8007e56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e62:	f7f8 fe5b 	bl	8000b1c <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d049      	beq.n	8007efe <_dtoa_r+0x216>
 8007e6a:	3f01      	subs	r7, #1
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e72:	1b9b      	subs	r3, r3, r6
 8007e74:	1e5a      	subs	r2, r3, #1
 8007e76:	bf45      	ittet	mi
 8007e78:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e7c:	9300      	strmi	r3, [sp, #0]
 8007e7e:	2300      	movpl	r3, #0
 8007e80:	2300      	movmi	r3, #0
 8007e82:	9206      	str	r2, [sp, #24]
 8007e84:	bf54      	ite	pl
 8007e86:	9300      	strpl	r3, [sp, #0]
 8007e88:	9306      	strmi	r3, [sp, #24]
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	db39      	blt.n	8007f02 <_dtoa_r+0x21a>
 8007e8e:	9b06      	ldr	r3, [sp, #24]
 8007e90:	970d      	str	r7, [sp, #52]	@ 0x34
 8007e92:	443b      	add	r3, r7
 8007e94:	9306      	str	r3, [sp, #24]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9308      	str	r3, [sp, #32]
 8007e9a:	9b07      	ldr	r3, [sp, #28]
 8007e9c:	2b09      	cmp	r3, #9
 8007e9e:	d863      	bhi.n	8007f68 <_dtoa_r+0x280>
 8007ea0:	2b05      	cmp	r3, #5
 8007ea2:	bfc4      	itt	gt
 8007ea4:	3b04      	subgt	r3, #4
 8007ea6:	9307      	strgt	r3, [sp, #28]
 8007ea8:	9b07      	ldr	r3, [sp, #28]
 8007eaa:	f1a3 0302 	sub.w	r3, r3, #2
 8007eae:	bfcc      	ite	gt
 8007eb0:	2400      	movgt	r4, #0
 8007eb2:	2401      	movle	r4, #1
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d863      	bhi.n	8007f80 <_dtoa_r+0x298>
 8007eb8:	e8df f003 	tbb	[pc, r3]
 8007ebc:	2b375452 	.word	0x2b375452
 8007ec0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ec4:	441e      	add	r6, r3
 8007ec6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	bfc1      	itttt	gt
 8007ece:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ed2:	409f      	lslgt	r7, r3
 8007ed4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ed8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007edc:	bfd6      	itet	le
 8007ede:	f1c3 0320 	rsble	r3, r3, #32
 8007ee2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ee6:	fa04 f003 	lslle.w	r0, r4, r3
 8007eea:	f7f8 fb2b 	bl	8000544 <__aeabi_ui2d>
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ef4:	3e01      	subs	r6, #1
 8007ef6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ef8:	e776      	b.n	8007de8 <_dtoa_r+0x100>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7b7      	b.n	8007e6e <_dtoa_r+0x186>
 8007efe:	9010      	str	r0, [sp, #64]	@ 0x40
 8007f00:	e7b6      	b.n	8007e70 <_dtoa_r+0x188>
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	1bdb      	subs	r3, r3, r7
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	427b      	negs	r3, r7
 8007f0a:	9308      	str	r3, [sp, #32]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007f10:	e7c3      	b.n	8007e9a <_dtoa_r+0x1b2>
 8007f12:	2301      	movs	r3, #1
 8007f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f18:	eb07 0b03 	add.w	fp, r7, r3
 8007f1c:	f10b 0301 	add.w	r3, fp, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	bfb8      	it	lt
 8007f26:	2301      	movlt	r3, #1
 8007f28:	e006      	b.n	8007f38 <_dtoa_r+0x250>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dd28      	ble.n	8007f86 <_dtoa_r+0x29e>
 8007f34:	469b      	mov	fp, r3
 8007f36:	9303      	str	r3, [sp, #12]
 8007f38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	2204      	movs	r2, #4
 8007f40:	f102 0514 	add.w	r5, r2, #20
 8007f44:	429d      	cmp	r5, r3
 8007f46:	d926      	bls.n	8007f96 <_dtoa_r+0x2ae>
 8007f48:	6041      	str	r1, [r0, #4]
 8007f4a:	4648      	mov	r0, r9
 8007f4c:	f000 fd9c 	bl	8008a88 <_Balloc>
 8007f50:	4682      	mov	sl, r0
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d142      	bne.n	8007fdc <_dtoa_r+0x2f4>
 8007f56:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <_dtoa_r+0x2e8>)
 8007f58:	4602      	mov	r2, r0
 8007f5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f5e:	e6da      	b.n	8007d16 <_dtoa_r+0x2e>
 8007f60:	2300      	movs	r3, #0
 8007f62:	e7e3      	b.n	8007f2c <_dtoa_r+0x244>
 8007f64:	2300      	movs	r3, #0
 8007f66:	e7d5      	b.n	8007f14 <_dtoa_r+0x22c>
 8007f68:	2401      	movs	r4, #1
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	9307      	str	r3, [sp, #28]
 8007f6e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007f70:	f04f 3bff 	mov.w	fp, #4294967295
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f7a:	2312      	movs	r3, #18
 8007f7c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f7e:	e7db      	b.n	8007f38 <_dtoa_r+0x250>
 8007f80:	2301      	movs	r3, #1
 8007f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f84:	e7f4      	b.n	8007f70 <_dtoa_r+0x288>
 8007f86:	f04f 0b01 	mov.w	fp, #1
 8007f8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f8e:	465b      	mov	r3, fp
 8007f90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007f94:	e7d0      	b.n	8007f38 <_dtoa_r+0x250>
 8007f96:	3101      	adds	r1, #1
 8007f98:	0052      	lsls	r2, r2, #1
 8007f9a:	e7d1      	b.n	8007f40 <_dtoa_r+0x258>
 8007f9c:	f3af 8000 	nop.w
 8007fa0:	636f4361 	.word	0x636f4361
 8007fa4:	3fd287a7 	.word	0x3fd287a7
 8007fa8:	8b60c8b3 	.word	0x8b60c8b3
 8007fac:	3fc68a28 	.word	0x3fc68a28
 8007fb0:	509f79fb 	.word	0x509f79fb
 8007fb4:	3fd34413 	.word	0x3fd34413
 8007fb8:	08009a31 	.word	0x08009a31
 8007fbc:	08009a48 	.word	0x08009a48
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	08009a01 	.word	0x08009a01
 8007fc8:	3ff80000 	.word	0x3ff80000
 8007fcc:	08009b98 	.word	0x08009b98
 8007fd0:	08009aa0 	.word	0x08009aa0
 8007fd4:	08009a2d 	.word	0x08009a2d
 8007fd8:	08009a00 	.word	0x08009a00
 8007fdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fe0:	6018      	str	r0, [r3, #0]
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	2b0e      	cmp	r3, #14
 8007fe6:	f200 80a1 	bhi.w	800812c <_dtoa_r+0x444>
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	f000 809e 	beq.w	800812c <_dtoa_r+0x444>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	dd33      	ble.n	800805c <_dtoa_r+0x374>
 8007ff4:	4b9c      	ldr	r3, [pc, #624]	@ (8008268 <_dtoa_r+0x580>)
 8007ff6:	f007 020f 	and.w	r2, r7, #15
 8007ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffe:	ed93 7b00 	vldr	d7, [r3]
 8008002:	05f8      	lsls	r0, r7, #23
 8008004:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800800c:	d516      	bpl.n	800803c <_dtoa_r+0x354>
 800800e:	4b97      	ldr	r3, [pc, #604]	@ (800826c <_dtoa_r+0x584>)
 8008010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008018:	f7f8 fc38 	bl	800088c <__aeabi_ddiv>
 800801c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008020:	f004 040f 	and.w	r4, r4, #15
 8008024:	2603      	movs	r6, #3
 8008026:	4d91      	ldr	r5, [pc, #580]	@ (800826c <_dtoa_r+0x584>)
 8008028:	b954      	cbnz	r4, 8008040 <_dtoa_r+0x358>
 800802a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800802e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008032:	f7f8 fc2b 	bl	800088c <__aeabi_ddiv>
 8008036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800803a:	e028      	b.n	800808e <_dtoa_r+0x3a6>
 800803c:	2602      	movs	r6, #2
 800803e:	e7f2      	b.n	8008026 <_dtoa_r+0x33e>
 8008040:	07e1      	lsls	r1, r4, #31
 8008042:	d508      	bpl.n	8008056 <_dtoa_r+0x36e>
 8008044:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800804c:	f7f8 faf4 	bl	8000638 <__aeabi_dmul>
 8008050:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008054:	3601      	adds	r6, #1
 8008056:	1064      	asrs	r4, r4, #1
 8008058:	3508      	adds	r5, #8
 800805a:	e7e5      	b.n	8008028 <_dtoa_r+0x340>
 800805c:	f000 80af 	beq.w	80081be <_dtoa_r+0x4d6>
 8008060:	427c      	negs	r4, r7
 8008062:	4b81      	ldr	r3, [pc, #516]	@ (8008268 <_dtoa_r+0x580>)
 8008064:	4d81      	ldr	r5, [pc, #516]	@ (800826c <_dtoa_r+0x584>)
 8008066:	f004 020f 	and.w	r2, r4, #15
 800806a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008076:	f7f8 fadf 	bl	8000638 <__aeabi_dmul>
 800807a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800807e:	1124      	asrs	r4, r4, #4
 8008080:	2300      	movs	r3, #0
 8008082:	2602      	movs	r6, #2
 8008084:	2c00      	cmp	r4, #0
 8008086:	f040 808f 	bne.w	80081a8 <_dtoa_r+0x4c0>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1d3      	bne.n	8008036 <_dtoa_r+0x34e>
 800808e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008090:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8094 	beq.w	80081c2 <_dtoa_r+0x4da>
 800809a:	4b75      	ldr	r3, [pc, #468]	@ (8008270 <_dtoa_r+0x588>)
 800809c:	2200      	movs	r2, #0
 800809e:	4620      	mov	r0, r4
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7f8 fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f000 808b 	beq.w	80081c2 <_dtoa_r+0x4da>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8087 	beq.w	80081c2 <_dtoa_r+0x4da>
 80080b4:	f1bb 0f00 	cmp.w	fp, #0
 80080b8:	dd34      	ble.n	8008124 <_dtoa_r+0x43c>
 80080ba:	4620      	mov	r0, r4
 80080bc:	4b6d      	ldr	r3, [pc, #436]	@ (8008274 <_dtoa_r+0x58c>)
 80080be:	2200      	movs	r2, #0
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 fab9 	bl	8000638 <__aeabi_dmul>
 80080c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80080ce:	3601      	adds	r6, #1
 80080d0:	465c      	mov	r4, fp
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7f8 fa46 	bl	8000564 <__aeabi_i2d>
 80080d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080dc:	f7f8 faac 	bl	8000638 <__aeabi_dmul>
 80080e0:	4b65      	ldr	r3, [pc, #404]	@ (8008278 <_dtoa_r+0x590>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 f8f2 	bl	80002cc <__adddf3>
 80080e8:	4605      	mov	r5, r0
 80080ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d16a      	bne.n	80081c8 <_dtoa_r+0x4e0>
 80080f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080f6:	4b61      	ldr	r3, [pc, #388]	@ (800827c <_dtoa_r+0x594>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	f7f8 f8e5 	bl	80002c8 <__aeabi_dsub>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008106:	462a      	mov	r2, r5
 8008108:	4633      	mov	r3, r6
 800810a:	f7f8 fd25 	bl	8000b58 <__aeabi_dcmpgt>
 800810e:	2800      	cmp	r0, #0
 8008110:	f040 8298 	bne.w	8008644 <_dtoa_r+0x95c>
 8008114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008118:	462a      	mov	r2, r5
 800811a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800811e:	f7f8 fcfd 	bl	8000b1c <__aeabi_dcmplt>
 8008122:	bb38      	cbnz	r0, 8008174 <_dtoa_r+0x48c>
 8008124:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008128:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800812c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800812e:	2b00      	cmp	r3, #0
 8008130:	f2c0 8157 	blt.w	80083e2 <_dtoa_r+0x6fa>
 8008134:	2f0e      	cmp	r7, #14
 8008136:	f300 8154 	bgt.w	80083e2 <_dtoa_r+0x6fa>
 800813a:	4b4b      	ldr	r3, [pc, #300]	@ (8008268 <_dtoa_r+0x580>)
 800813c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008140:	ed93 7b00 	vldr	d7, [r3]
 8008144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008146:	2b00      	cmp	r3, #0
 8008148:	ed8d 7b00 	vstr	d7, [sp]
 800814c:	f280 80e5 	bge.w	800831a <_dtoa_r+0x632>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f300 80e1 	bgt.w	800831a <_dtoa_r+0x632>
 8008158:	d10c      	bne.n	8008174 <_dtoa_r+0x48c>
 800815a:	4b48      	ldr	r3, [pc, #288]	@ (800827c <_dtoa_r+0x594>)
 800815c:	2200      	movs	r2, #0
 800815e:	ec51 0b17 	vmov	r0, r1, d7
 8008162:	f7f8 fa69 	bl	8000638 <__aeabi_dmul>
 8008166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800816a:	f7f8 fceb 	bl	8000b44 <__aeabi_dcmpge>
 800816e:	2800      	cmp	r0, #0
 8008170:	f000 8266 	beq.w	8008640 <_dtoa_r+0x958>
 8008174:	2400      	movs	r4, #0
 8008176:	4625      	mov	r5, r4
 8008178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800817a:	4656      	mov	r6, sl
 800817c:	ea6f 0803 	mvn.w	r8, r3
 8008180:	2700      	movs	r7, #0
 8008182:	4621      	mov	r1, r4
 8008184:	4648      	mov	r0, r9
 8008186:	f000 fcbf 	bl	8008b08 <_Bfree>
 800818a:	2d00      	cmp	r5, #0
 800818c:	f000 80bd 	beq.w	800830a <_dtoa_r+0x622>
 8008190:	b12f      	cbz	r7, 800819e <_dtoa_r+0x4b6>
 8008192:	42af      	cmp	r7, r5
 8008194:	d003      	beq.n	800819e <_dtoa_r+0x4b6>
 8008196:	4639      	mov	r1, r7
 8008198:	4648      	mov	r0, r9
 800819a:	f000 fcb5 	bl	8008b08 <_Bfree>
 800819e:	4629      	mov	r1, r5
 80081a0:	4648      	mov	r0, r9
 80081a2:	f000 fcb1 	bl	8008b08 <_Bfree>
 80081a6:	e0b0      	b.n	800830a <_dtoa_r+0x622>
 80081a8:	07e2      	lsls	r2, r4, #31
 80081aa:	d505      	bpl.n	80081b8 <_dtoa_r+0x4d0>
 80081ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081b0:	f7f8 fa42 	bl	8000638 <__aeabi_dmul>
 80081b4:	3601      	adds	r6, #1
 80081b6:	2301      	movs	r3, #1
 80081b8:	1064      	asrs	r4, r4, #1
 80081ba:	3508      	adds	r5, #8
 80081bc:	e762      	b.n	8008084 <_dtoa_r+0x39c>
 80081be:	2602      	movs	r6, #2
 80081c0:	e765      	b.n	800808e <_dtoa_r+0x3a6>
 80081c2:	9c03      	ldr	r4, [sp, #12]
 80081c4:	46b8      	mov	r8, r7
 80081c6:	e784      	b.n	80080d2 <_dtoa_r+0x3ea>
 80081c8:	4b27      	ldr	r3, [pc, #156]	@ (8008268 <_dtoa_r+0x580>)
 80081ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081d4:	4454      	add	r4, sl
 80081d6:	2900      	cmp	r1, #0
 80081d8:	d054      	beq.n	8008284 <_dtoa_r+0x59c>
 80081da:	4929      	ldr	r1, [pc, #164]	@ (8008280 <_dtoa_r+0x598>)
 80081dc:	2000      	movs	r0, #0
 80081de:	f7f8 fb55 	bl	800088c <__aeabi_ddiv>
 80081e2:	4633      	mov	r3, r6
 80081e4:	462a      	mov	r2, r5
 80081e6:	f7f8 f86f 	bl	80002c8 <__aeabi_dsub>
 80081ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081ee:	4656      	mov	r6, sl
 80081f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f4:	f7f8 fcd0 	bl	8000b98 <__aeabi_d2iz>
 80081f8:	4605      	mov	r5, r0
 80081fa:	f7f8 f9b3 	bl	8000564 <__aeabi_i2d>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008206:	f7f8 f85f 	bl	80002c8 <__aeabi_dsub>
 800820a:	3530      	adds	r5, #48	@ 0x30
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008214:	f806 5b01 	strb.w	r5, [r6], #1
 8008218:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800821c:	f7f8 fc7e 	bl	8000b1c <__aeabi_dcmplt>
 8008220:	2800      	cmp	r0, #0
 8008222:	d172      	bne.n	800830a <_dtoa_r+0x622>
 8008224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008228:	4911      	ldr	r1, [pc, #68]	@ (8008270 <_dtoa_r+0x588>)
 800822a:	2000      	movs	r0, #0
 800822c:	f7f8 f84c 	bl	80002c8 <__aeabi_dsub>
 8008230:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008234:	f7f8 fc72 	bl	8000b1c <__aeabi_dcmplt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 80b4 	bne.w	80083a6 <_dtoa_r+0x6be>
 800823e:	42a6      	cmp	r6, r4
 8008240:	f43f af70 	beq.w	8008124 <_dtoa_r+0x43c>
 8008244:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008248:	4b0a      	ldr	r3, [pc, #40]	@ (8008274 <_dtoa_r+0x58c>)
 800824a:	2200      	movs	r2, #0
 800824c:	f7f8 f9f4 	bl	8000638 <__aeabi_dmul>
 8008250:	4b08      	ldr	r3, [pc, #32]	@ (8008274 <_dtoa_r+0x58c>)
 8008252:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008256:	2200      	movs	r2, #0
 8008258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800825c:	f7f8 f9ec 	bl	8000638 <__aeabi_dmul>
 8008260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008264:	e7c4      	b.n	80081f0 <_dtoa_r+0x508>
 8008266:	bf00      	nop
 8008268:	08009b98 	.word	0x08009b98
 800826c:	08009b70 	.word	0x08009b70
 8008270:	3ff00000 	.word	0x3ff00000
 8008274:	40240000 	.word	0x40240000
 8008278:	401c0000 	.word	0x401c0000
 800827c:	40140000 	.word	0x40140000
 8008280:	3fe00000 	.word	0x3fe00000
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	f7f8 f9d6 	bl	8000638 <__aeabi_dmul>
 800828c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008290:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008292:	4656      	mov	r6, sl
 8008294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008298:	f7f8 fc7e 	bl	8000b98 <__aeabi_d2iz>
 800829c:	4605      	mov	r5, r0
 800829e:	f7f8 f961 	bl	8000564 <__aeabi_i2d>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082aa:	f7f8 f80d 	bl	80002c8 <__aeabi_dsub>
 80082ae:	3530      	adds	r5, #48	@ 0x30
 80082b0:	f806 5b01 	strb.w	r5, [r6], #1
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	42a6      	cmp	r6, r4
 80082ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	d124      	bne.n	800830e <_dtoa_r+0x626>
 80082c4:	4baf      	ldr	r3, [pc, #700]	@ (8008584 <_dtoa_r+0x89c>)
 80082c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80082ca:	f7f7 ffff 	bl	80002cc <__adddf3>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d6:	f7f8 fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d163      	bne.n	80083a6 <_dtoa_r+0x6be>
 80082de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082e2:	49a8      	ldr	r1, [pc, #672]	@ (8008584 <_dtoa_r+0x89c>)
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7f7 ffef 	bl	80002c8 <__aeabi_dsub>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082f2:	f7f8 fc13 	bl	8000b1c <__aeabi_dcmplt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f af14 	beq.w	8008124 <_dtoa_r+0x43c>
 80082fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80082fe:	1e73      	subs	r3, r6, #1
 8008300:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008302:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008306:	2b30      	cmp	r3, #48	@ 0x30
 8008308:	d0f8      	beq.n	80082fc <_dtoa_r+0x614>
 800830a:	4647      	mov	r7, r8
 800830c:	e03b      	b.n	8008386 <_dtoa_r+0x69e>
 800830e:	4b9e      	ldr	r3, [pc, #632]	@ (8008588 <_dtoa_r+0x8a0>)
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008318:	e7bc      	b.n	8008294 <_dtoa_r+0x5ac>
 800831a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800831e:	4656      	mov	r6, sl
 8008320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	f7f8 fab0 	bl	800088c <__aeabi_ddiv>
 800832c:	f7f8 fc34 	bl	8000b98 <__aeabi_d2iz>
 8008330:	4680      	mov	r8, r0
 8008332:	f7f8 f917 	bl	8000564 <__aeabi_i2d>
 8008336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833a:	f7f8 f97d 	bl	8000638 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4620      	mov	r0, r4
 8008344:	4629      	mov	r1, r5
 8008346:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800834a:	f7f7 ffbd 	bl	80002c8 <__aeabi_dsub>
 800834e:	f806 4b01 	strb.w	r4, [r6], #1
 8008352:	9d03      	ldr	r5, [sp, #12]
 8008354:	eba6 040a 	sub.w	r4, r6, sl
 8008358:	42a5      	cmp	r5, r4
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	d133      	bne.n	80083c8 <_dtoa_r+0x6e0>
 8008360:	f7f7 ffb4 	bl	80002cc <__adddf3>
 8008364:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008368:	4604      	mov	r4, r0
 800836a:	460d      	mov	r5, r1
 800836c:	f7f8 fbf4 	bl	8000b58 <__aeabi_dcmpgt>
 8008370:	b9c0      	cbnz	r0, 80083a4 <_dtoa_r+0x6bc>
 8008372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f8 fbc5 	bl	8000b08 <__aeabi_dcmpeq>
 800837e:	b110      	cbz	r0, 8008386 <_dtoa_r+0x69e>
 8008380:	f018 0f01 	tst.w	r8, #1
 8008384:	d10e      	bne.n	80083a4 <_dtoa_r+0x6bc>
 8008386:	9902      	ldr	r1, [sp, #8]
 8008388:	4648      	mov	r0, r9
 800838a:	f000 fbbd 	bl	8008b08 <_Bfree>
 800838e:	2300      	movs	r3, #0
 8008390:	7033      	strb	r3, [r6, #0]
 8008392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008394:	3701      	adds	r7, #1
 8008396:	601f      	str	r7, [r3, #0]
 8008398:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 824b 	beq.w	8008836 <_dtoa_r+0xb4e>
 80083a0:	601e      	str	r6, [r3, #0]
 80083a2:	e248      	b.n	8008836 <_dtoa_r+0xb4e>
 80083a4:	46b8      	mov	r8, r7
 80083a6:	4633      	mov	r3, r6
 80083a8:	461e      	mov	r6, r3
 80083aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083ae:	2a39      	cmp	r2, #57	@ 0x39
 80083b0:	d106      	bne.n	80083c0 <_dtoa_r+0x6d8>
 80083b2:	459a      	cmp	sl, r3
 80083b4:	d1f8      	bne.n	80083a8 <_dtoa_r+0x6c0>
 80083b6:	2230      	movs	r2, #48	@ 0x30
 80083b8:	f108 0801 	add.w	r8, r8, #1
 80083bc:	f88a 2000 	strb.w	r2, [sl]
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	3201      	adds	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
 80083c6:	e7a0      	b.n	800830a <_dtoa_r+0x622>
 80083c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008588 <_dtoa_r+0x8a0>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	f7f8 f934 	bl	8000638 <__aeabi_dmul>
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	4604      	mov	r4, r0
 80083d6:	460d      	mov	r5, r1
 80083d8:	f7f8 fb96 	bl	8000b08 <__aeabi_dcmpeq>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d09f      	beq.n	8008320 <_dtoa_r+0x638>
 80083e0:	e7d1      	b.n	8008386 <_dtoa_r+0x69e>
 80083e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	f000 80ea 	beq.w	80085be <_dtoa_r+0x8d6>
 80083ea:	9a07      	ldr	r2, [sp, #28]
 80083ec:	2a01      	cmp	r2, #1
 80083ee:	f300 80cd 	bgt.w	800858c <_dtoa_r+0x8a4>
 80083f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083f4:	2a00      	cmp	r2, #0
 80083f6:	f000 80c1 	beq.w	800857c <_dtoa_r+0x894>
 80083fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083fe:	9c08      	ldr	r4, [sp, #32]
 8008400:	9e00      	ldr	r6, [sp, #0]
 8008402:	9a00      	ldr	r2, [sp, #0]
 8008404:	441a      	add	r2, r3
 8008406:	9200      	str	r2, [sp, #0]
 8008408:	9a06      	ldr	r2, [sp, #24]
 800840a:	2101      	movs	r1, #1
 800840c:	441a      	add	r2, r3
 800840e:	4648      	mov	r0, r9
 8008410:	9206      	str	r2, [sp, #24]
 8008412:	f000 fc2d 	bl	8008c70 <__i2b>
 8008416:	4605      	mov	r5, r0
 8008418:	b166      	cbz	r6, 8008434 <_dtoa_r+0x74c>
 800841a:	9b06      	ldr	r3, [sp, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd09      	ble.n	8008434 <_dtoa_r+0x74c>
 8008420:	42b3      	cmp	r3, r6
 8008422:	9a00      	ldr	r2, [sp, #0]
 8008424:	bfa8      	it	ge
 8008426:	4633      	movge	r3, r6
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	9200      	str	r2, [sp, #0]
 800842c:	9a06      	ldr	r2, [sp, #24]
 800842e:	1af6      	subs	r6, r6, r3
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	9306      	str	r3, [sp, #24]
 8008434:	9b08      	ldr	r3, [sp, #32]
 8008436:	b30b      	cbz	r3, 800847c <_dtoa_r+0x794>
 8008438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80c6 	beq.w	80085cc <_dtoa_r+0x8e4>
 8008440:	2c00      	cmp	r4, #0
 8008442:	f000 80c0 	beq.w	80085c6 <_dtoa_r+0x8de>
 8008446:	4629      	mov	r1, r5
 8008448:	4622      	mov	r2, r4
 800844a:	4648      	mov	r0, r9
 800844c:	f000 fcc8 	bl	8008de0 <__pow5mult>
 8008450:	9a02      	ldr	r2, [sp, #8]
 8008452:	4601      	mov	r1, r0
 8008454:	4605      	mov	r5, r0
 8008456:	4648      	mov	r0, r9
 8008458:	f000 fc20 	bl	8008c9c <__multiply>
 800845c:	9902      	ldr	r1, [sp, #8]
 800845e:	4680      	mov	r8, r0
 8008460:	4648      	mov	r0, r9
 8008462:	f000 fb51 	bl	8008b08 <_Bfree>
 8008466:	9b08      	ldr	r3, [sp, #32]
 8008468:	1b1b      	subs	r3, r3, r4
 800846a:	9308      	str	r3, [sp, #32]
 800846c:	f000 80b1 	beq.w	80085d2 <_dtoa_r+0x8ea>
 8008470:	9a08      	ldr	r2, [sp, #32]
 8008472:	4641      	mov	r1, r8
 8008474:	4648      	mov	r0, r9
 8008476:	f000 fcb3 	bl	8008de0 <__pow5mult>
 800847a:	9002      	str	r0, [sp, #8]
 800847c:	2101      	movs	r1, #1
 800847e:	4648      	mov	r0, r9
 8008480:	f000 fbf6 	bl	8008c70 <__i2b>
 8008484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008486:	4604      	mov	r4, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 81d8 	beq.w	800883e <_dtoa_r+0xb56>
 800848e:	461a      	mov	r2, r3
 8008490:	4601      	mov	r1, r0
 8008492:	4648      	mov	r0, r9
 8008494:	f000 fca4 	bl	8008de0 <__pow5mult>
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	2b01      	cmp	r3, #1
 800849c:	4604      	mov	r4, r0
 800849e:	f300 809f 	bgt.w	80085e0 <_dtoa_r+0x8f8>
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8097 	bne.w	80085d8 <_dtoa_r+0x8f0>
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 8093 	bne.w	80085dc <_dtoa_r+0x8f4>
 80084b6:	9b05      	ldr	r3, [sp, #20]
 80084b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084bc:	0d1b      	lsrs	r3, r3, #20
 80084be:	051b      	lsls	r3, r3, #20
 80084c0:	b133      	cbz	r3, 80084d0 <_dtoa_r+0x7e8>
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	3301      	adds	r3, #1
 80084cc:	9306      	str	r3, [sp, #24]
 80084ce:	2301      	movs	r3, #1
 80084d0:	9308      	str	r3, [sp, #32]
 80084d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 81b8 	beq.w	800884a <_dtoa_r+0xb62>
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084e0:	6918      	ldr	r0, [r3, #16]
 80084e2:	f000 fb79 	bl	8008bd8 <__hi0bits>
 80084e6:	f1c0 0020 	rsb	r0, r0, #32
 80084ea:	9b06      	ldr	r3, [sp, #24]
 80084ec:	4418      	add	r0, r3
 80084ee:	f010 001f 	ands.w	r0, r0, #31
 80084f2:	f000 8082 	beq.w	80085fa <_dtoa_r+0x912>
 80084f6:	f1c0 0320 	rsb	r3, r0, #32
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	dd73      	ble.n	80085e6 <_dtoa_r+0x8fe>
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	f1c0 001c 	rsb	r0, r0, #28
 8008504:	4403      	add	r3, r0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	4403      	add	r3, r0
 800850c:	4406      	add	r6, r0
 800850e:	9306      	str	r3, [sp, #24]
 8008510:	9b00      	ldr	r3, [sp, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dd05      	ble.n	8008522 <_dtoa_r+0x83a>
 8008516:	9902      	ldr	r1, [sp, #8]
 8008518:	461a      	mov	r2, r3
 800851a:	4648      	mov	r0, r9
 800851c:	f000 fcba 	bl	8008e94 <__lshift>
 8008520:	9002      	str	r0, [sp, #8]
 8008522:	9b06      	ldr	r3, [sp, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd05      	ble.n	8008534 <_dtoa_r+0x84c>
 8008528:	4621      	mov	r1, r4
 800852a:	461a      	mov	r2, r3
 800852c:	4648      	mov	r0, r9
 800852e:	f000 fcb1 	bl	8008e94 <__lshift>
 8008532:	4604      	mov	r4, r0
 8008534:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d061      	beq.n	80085fe <_dtoa_r+0x916>
 800853a:	9802      	ldr	r0, [sp, #8]
 800853c:	4621      	mov	r1, r4
 800853e:	f000 fd15 	bl	8008f6c <__mcmp>
 8008542:	2800      	cmp	r0, #0
 8008544:	da5b      	bge.n	80085fe <_dtoa_r+0x916>
 8008546:	2300      	movs	r3, #0
 8008548:	9902      	ldr	r1, [sp, #8]
 800854a:	220a      	movs	r2, #10
 800854c:	4648      	mov	r0, r9
 800854e:	f000 fafd 	bl	8008b4c <__multadd>
 8008552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008554:	9002      	str	r0, [sp, #8]
 8008556:	f107 38ff 	add.w	r8, r7, #4294967295
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8177 	beq.w	800884e <_dtoa_r+0xb66>
 8008560:	4629      	mov	r1, r5
 8008562:	2300      	movs	r3, #0
 8008564:	220a      	movs	r2, #10
 8008566:	4648      	mov	r0, r9
 8008568:	f000 faf0 	bl	8008b4c <__multadd>
 800856c:	f1bb 0f00 	cmp.w	fp, #0
 8008570:	4605      	mov	r5, r0
 8008572:	dc6f      	bgt.n	8008654 <_dtoa_r+0x96c>
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	2b02      	cmp	r3, #2
 8008578:	dc49      	bgt.n	800860e <_dtoa_r+0x926>
 800857a:	e06b      	b.n	8008654 <_dtoa_r+0x96c>
 800857c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800857e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008582:	e73c      	b.n	80083fe <_dtoa_r+0x716>
 8008584:	3fe00000 	.word	0x3fe00000
 8008588:	40240000 	.word	0x40240000
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	1e5c      	subs	r4, r3, #1
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	42a3      	cmp	r3, r4
 8008594:	db09      	blt.n	80085aa <_dtoa_r+0x8c2>
 8008596:	1b1c      	subs	r4, r3, r4
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f6bf af30 	bge.w	8008400 <_dtoa_r+0x718>
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	9a03      	ldr	r2, [sp, #12]
 80085a4:	1a9e      	subs	r6, r3, r2
 80085a6:	2300      	movs	r3, #0
 80085a8:	e72b      	b.n	8008402 <_dtoa_r+0x71a>
 80085aa:	9b08      	ldr	r3, [sp, #32]
 80085ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085ae:	9408      	str	r4, [sp, #32]
 80085b0:	1ae3      	subs	r3, r4, r3
 80085b2:	441a      	add	r2, r3
 80085b4:	9e00      	ldr	r6, [sp, #0]
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80085ba:	2400      	movs	r4, #0
 80085bc:	e721      	b.n	8008402 <_dtoa_r+0x71a>
 80085be:	9c08      	ldr	r4, [sp, #32]
 80085c0:	9e00      	ldr	r6, [sp, #0]
 80085c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80085c4:	e728      	b.n	8008418 <_dtoa_r+0x730>
 80085c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80085ca:	e751      	b.n	8008470 <_dtoa_r+0x788>
 80085cc:	9a08      	ldr	r2, [sp, #32]
 80085ce:	9902      	ldr	r1, [sp, #8]
 80085d0:	e750      	b.n	8008474 <_dtoa_r+0x78c>
 80085d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80085d6:	e751      	b.n	800847c <_dtoa_r+0x794>
 80085d8:	2300      	movs	r3, #0
 80085da:	e779      	b.n	80084d0 <_dtoa_r+0x7e8>
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	e777      	b.n	80084d0 <_dtoa_r+0x7e8>
 80085e0:	2300      	movs	r3, #0
 80085e2:	9308      	str	r3, [sp, #32]
 80085e4:	e779      	b.n	80084da <_dtoa_r+0x7f2>
 80085e6:	d093      	beq.n	8008510 <_dtoa_r+0x828>
 80085e8:	9a00      	ldr	r2, [sp, #0]
 80085ea:	331c      	adds	r3, #28
 80085ec:	441a      	add	r2, r3
 80085ee:	9200      	str	r2, [sp, #0]
 80085f0:	9a06      	ldr	r2, [sp, #24]
 80085f2:	441a      	add	r2, r3
 80085f4:	441e      	add	r6, r3
 80085f6:	9206      	str	r2, [sp, #24]
 80085f8:	e78a      	b.n	8008510 <_dtoa_r+0x828>
 80085fa:	4603      	mov	r3, r0
 80085fc:	e7f4      	b.n	80085e8 <_dtoa_r+0x900>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	46b8      	mov	r8, r7
 8008604:	dc20      	bgt.n	8008648 <_dtoa_r+0x960>
 8008606:	469b      	mov	fp, r3
 8008608:	9b07      	ldr	r3, [sp, #28]
 800860a:	2b02      	cmp	r3, #2
 800860c:	dd1e      	ble.n	800864c <_dtoa_r+0x964>
 800860e:	f1bb 0f00 	cmp.w	fp, #0
 8008612:	f47f adb1 	bne.w	8008178 <_dtoa_r+0x490>
 8008616:	4621      	mov	r1, r4
 8008618:	465b      	mov	r3, fp
 800861a:	2205      	movs	r2, #5
 800861c:	4648      	mov	r0, r9
 800861e:	f000 fa95 	bl	8008b4c <__multadd>
 8008622:	4601      	mov	r1, r0
 8008624:	4604      	mov	r4, r0
 8008626:	9802      	ldr	r0, [sp, #8]
 8008628:	f000 fca0 	bl	8008f6c <__mcmp>
 800862c:	2800      	cmp	r0, #0
 800862e:	f77f ada3 	ble.w	8008178 <_dtoa_r+0x490>
 8008632:	4656      	mov	r6, sl
 8008634:	2331      	movs	r3, #49	@ 0x31
 8008636:	f806 3b01 	strb.w	r3, [r6], #1
 800863a:	f108 0801 	add.w	r8, r8, #1
 800863e:	e59f      	b.n	8008180 <_dtoa_r+0x498>
 8008640:	9c03      	ldr	r4, [sp, #12]
 8008642:	46b8      	mov	r8, r7
 8008644:	4625      	mov	r5, r4
 8008646:	e7f4      	b.n	8008632 <_dtoa_r+0x94a>
 8008648:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800864c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8101 	beq.w	8008856 <_dtoa_r+0xb6e>
 8008654:	2e00      	cmp	r6, #0
 8008656:	dd05      	ble.n	8008664 <_dtoa_r+0x97c>
 8008658:	4629      	mov	r1, r5
 800865a:	4632      	mov	r2, r6
 800865c:	4648      	mov	r0, r9
 800865e:	f000 fc19 	bl	8008e94 <__lshift>
 8008662:	4605      	mov	r5, r0
 8008664:	9b08      	ldr	r3, [sp, #32]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d05c      	beq.n	8008724 <_dtoa_r+0xa3c>
 800866a:	6869      	ldr	r1, [r5, #4]
 800866c:	4648      	mov	r0, r9
 800866e:	f000 fa0b 	bl	8008a88 <_Balloc>
 8008672:	4606      	mov	r6, r0
 8008674:	b928      	cbnz	r0, 8008682 <_dtoa_r+0x99a>
 8008676:	4b82      	ldr	r3, [pc, #520]	@ (8008880 <_dtoa_r+0xb98>)
 8008678:	4602      	mov	r2, r0
 800867a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800867e:	f7ff bb4a 	b.w	8007d16 <_dtoa_r+0x2e>
 8008682:	692a      	ldr	r2, [r5, #16]
 8008684:	3202      	adds	r2, #2
 8008686:	0092      	lsls	r2, r2, #2
 8008688:	f105 010c 	add.w	r1, r5, #12
 800868c:	300c      	adds	r0, #12
 800868e:	f000 fff7 	bl	8009680 <memcpy>
 8008692:	2201      	movs	r2, #1
 8008694:	4631      	mov	r1, r6
 8008696:	4648      	mov	r0, r9
 8008698:	f000 fbfc 	bl	8008e94 <__lshift>
 800869c:	f10a 0301 	add.w	r3, sl, #1
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	eb0a 030b 	add.w	r3, sl, fp
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	462f      	mov	r7, r5
 80086b0:	9306      	str	r3, [sp, #24]
 80086b2:	4605      	mov	r5, r0
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	9802      	ldr	r0, [sp, #8]
 80086b8:	4621      	mov	r1, r4
 80086ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80086be:	f7ff fa8a 	bl	8007bd6 <quorem>
 80086c2:	4603      	mov	r3, r0
 80086c4:	3330      	adds	r3, #48	@ 0x30
 80086c6:	9003      	str	r0, [sp, #12]
 80086c8:	4639      	mov	r1, r7
 80086ca:	9802      	ldr	r0, [sp, #8]
 80086cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ce:	f000 fc4d 	bl	8008f6c <__mcmp>
 80086d2:	462a      	mov	r2, r5
 80086d4:	9004      	str	r0, [sp, #16]
 80086d6:	4621      	mov	r1, r4
 80086d8:	4648      	mov	r0, r9
 80086da:	f000 fc63 	bl	8008fa4 <__mdiff>
 80086de:	68c2      	ldr	r2, [r0, #12]
 80086e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e2:	4606      	mov	r6, r0
 80086e4:	bb02      	cbnz	r2, 8008728 <_dtoa_r+0xa40>
 80086e6:	4601      	mov	r1, r0
 80086e8:	9802      	ldr	r0, [sp, #8]
 80086ea:	f000 fc3f 	bl	8008f6c <__mcmp>
 80086ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f0:	4602      	mov	r2, r0
 80086f2:	4631      	mov	r1, r6
 80086f4:	4648      	mov	r0, r9
 80086f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80086f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fa:	f000 fa05 	bl	8008b08 <_Bfree>
 80086fe:	9b07      	ldr	r3, [sp, #28]
 8008700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008702:	9e00      	ldr	r6, [sp, #0]
 8008704:	ea42 0103 	orr.w	r1, r2, r3
 8008708:	9b06      	ldr	r3, [sp, #24]
 800870a:	4319      	orrs	r1, r3
 800870c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870e:	d10d      	bne.n	800872c <_dtoa_r+0xa44>
 8008710:	2b39      	cmp	r3, #57	@ 0x39
 8008712:	d027      	beq.n	8008764 <_dtoa_r+0xa7c>
 8008714:	9a04      	ldr	r2, [sp, #16]
 8008716:	2a00      	cmp	r2, #0
 8008718:	dd01      	ble.n	800871e <_dtoa_r+0xa36>
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	3331      	adds	r3, #49	@ 0x31
 800871e:	f88b 3000 	strb.w	r3, [fp]
 8008722:	e52e      	b.n	8008182 <_dtoa_r+0x49a>
 8008724:	4628      	mov	r0, r5
 8008726:	e7b9      	b.n	800869c <_dtoa_r+0x9b4>
 8008728:	2201      	movs	r2, #1
 800872a:	e7e2      	b.n	80086f2 <_dtoa_r+0xa0a>
 800872c:	9904      	ldr	r1, [sp, #16]
 800872e:	2900      	cmp	r1, #0
 8008730:	db04      	blt.n	800873c <_dtoa_r+0xa54>
 8008732:	9807      	ldr	r0, [sp, #28]
 8008734:	4301      	orrs	r1, r0
 8008736:	9806      	ldr	r0, [sp, #24]
 8008738:	4301      	orrs	r1, r0
 800873a:	d120      	bne.n	800877e <_dtoa_r+0xa96>
 800873c:	2a00      	cmp	r2, #0
 800873e:	ddee      	ble.n	800871e <_dtoa_r+0xa36>
 8008740:	9902      	ldr	r1, [sp, #8]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2201      	movs	r2, #1
 8008746:	4648      	mov	r0, r9
 8008748:	f000 fba4 	bl	8008e94 <__lshift>
 800874c:	4621      	mov	r1, r4
 800874e:	9002      	str	r0, [sp, #8]
 8008750:	f000 fc0c 	bl	8008f6c <__mcmp>
 8008754:	2800      	cmp	r0, #0
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	dc02      	bgt.n	8008760 <_dtoa_r+0xa78>
 800875a:	d1e0      	bne.n	800871e <_dtoa_r+0xa36>
 800875c:	07da      	lsls	r2, r3, #31
 800875e:	d5de      	bpl.n	800871e <_dtoa_r+0xa36>
 8008760:	2b39      	cmp	r3, #57	@ 0x39
 8008762:	d1da      	bne.n	800871a <_dtoa_r+0xa32>
 8008764:	2339      	movs	r3, #57	@ 0x39
 8008766:	f88b 3000 	strb.w	r3, [fp]
 800876a:	4633      	mov	r3, r6
 800876c:	461e      	mov	r6, r3
 800876e:	3b01      	subs	r3, #1
 8008770:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008774:	2a39      	cmp	r2, #57	@ 0x39
 8008776:	d04e      	beq.n	8008816 <_dtoa_r+0xb2e>
 8008778:	3201      	adds	r2, #1
 800877a:	701a      	strb	r2, [r3, #0]
 800877c:	e501      	b.n	8008182 <_dtoa_r+0x49a>
 800877e:	2a00      	cmp	r2, #0
 8008780:	dd03      	ble.n	800878a <_dtoa_r+0xaa2>
 8008782:	2b39      	cmp	r3, #57	@ 0x39
 8008784:	d0ee      	beq.n	8008764 <_dtoa_r+0xa7c>
 8008786:	3301      	adds	r3, #1
 8008788:	e7c9      	b.n	800871e <_dtoa_r+0xa36>
 800878a:	9a00      	ldr	r2, [sp, #0]
 800878c:	9908      	ldr	r1, [sp, #32]
 800878e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008792:	428a      	cmp	r2, r1
 8008794:	d028      	beq.n	80087e8 <_dtoa_r+0xb00>
 8008796:	9902      	ldr	r1, [sp, #8]
 8008798:	2300      	movs	r3, #0
 800879a:	220a      	movs	r2, #10
 800879c:	4648      	mov	r0, r9
 800879e:	f000 f9d5 	bl	8008b4c <__multadd>
 80087a2:	42af      	cmp	r7, r5
 80087a4:	9002      	str	r0, [sp, #8]
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	f04f 020a 	mov.w	r2, #10
 80087ae:	4639      	mov	r1, r7
 80087b0:	4648      	mov	r0, r9
 80087b2:	d107      	bne.n	80087c4 <_dtoa_r+0xadc>
 80087b4:	f000 f9ca 	bl	8008b4c <__multadd>
 80087b8:	4607      	mov	r7, r0
 80087ba:	4605      	mov	r5, r0
 80087bc:	9b00      	ldr	r3, [sp, #0]
 80087be:	3301      	adds	r3, #1
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	e777      	b.n	80086b4 <_dtoa_r+0x9cc>
 80087c4:	f000 f9c2 	bl	8008b4c <__multadd>
 80087c8:	4629      	mov	r1, r5
 80087ca:	4607      	mov	r7, r0
 80087cc:	2300      	movs	r3, #0
 80087ce:	220a      	movs	r2, #10
 80087d0:	4648      	mov	r0, r9
 80087d2:	f000 f9bb 	bl	8008b4c <__multadd>
 80087d6:	4605      	mov	r5, r0
 80087d8:	e7f0      	b.n	80087bc <_dtoa_r+0xad4>
 80087da:	f1bb 0f00 	cmp.w	fp, #0
 80087de:	bfcc      	ite	gt
 80087e0:	465e      	movgt	r6, fp
 80087e2:	2601      	movle	r6, #1
 80087e4:	4456      	add	r6, sl
 80087e6:	2700      	movs	r7, #0
 80087e8:	9902      	ldr	r1, [sp, #8]
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2201      	movs	r2, #1
 80087ee:	4648      	mov	r0, r9
 80087f0:	f000 fb50 	bl	8008e94 <__lshift>
 80087f4:	4621      	mov	r1, r4
 80087f6:	9002      	str	r0, [sp, #8]
 80087f8:	f000 fbb8 	bl	8008f6c <__mcmp>
 80087fc:	2800      	cmp	r0, #0
 80087fe:	dcb4      	bgt.n	800876a <_dtoa_r+0xa82>
 8008800:	d102      	bne.n	8008808 <_dtoa_r+0xb20>
 8008802:	9b00      	ldr	r3, [sp, #0]
 8008804:	07db      	lsls	r3, r3, #31
 8008806:	d4b0      	bmi.n	800876a <_dtoa_r+0xa82>
 8008808:	4633      	mov	r3, r6
 800880a:	461e      	mov	r6, r3
 800880c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008810:	2a30      	cmp	r2, #48	@ 0x30
 8008812:	d0fa      	beq.n	800880a <_dtoa_r+0xb22>
 8008814:	e4b5      	b.n	8008182 <_dtoa_r+0x49a>
 8008816:	459a      	cmp	sl, r3
 8008818:	d1a8      	bne.n	800876c <_dtoa_r+0xa84>
 800881a:	2331      	movs	r3, #49	@ 0x31
 800881c:	f108 0801 	add.w	r8, r8, #1
 8008820:	f88a 3000 	strb.w	r3, [sl]
 8008824:	e4ad      	b.n	8008182 <_dtoa_r+0x49a>
 8008826:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008828:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008884 <_dtoa_r+0xb9c>
 800882c:	b11b      	cbz	r3, 8008836 <_dtoa_r+0xb4e>
 800882e:	f10a 0308 	add.w	r3, sl, #8
 8008832:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	4650      	mov	r0, sl
 8008838:	b017      	add	sp, #92	@ 0x5c
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	9b07      	ldr	r3, [sp, #28]
 8008840:	2b01      	cmp	r3, #1
 8008842:	f77f ae2e 	ble.w	80084a2 <_dtoa_r+0x7ba>
 8008846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008848:	9308      	str	r3, [sp, #32]
 800884a:	2001      	movs	r0, #1
 800884c:	e64d      	b.n	80084ea <_dtoa_r+0x802>
 800884e:	f1bb 0f00 	cmp.w	fp, #0
 8008852:	f77f aed9 	ble.w	8008608 <_dtoa_r+0x920>
 8008856:	4656      	mov	r6, sl
 8008858:	9802      	ldr	r0, [sp, #8]
 800885a:	4621      	mov	r1, r4
 800885c:	f7ff f9bb 	bl	8007bd6 <quorem>
 8008860:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008864:	f806 3b01 	strb.w	r3, [r6], #1
 8008868:	eba6 020a 	sub.w	r2, r6, sl
 800886c:	4593      	cmp	fp, r2
 800886e:	ddb4      	ble.n	80087da <_dtoa_r+0xaf2>
 8008870:	9902      	ldr	r1, [sp, #8]
 8008872:	2300      	movs	r3, #0
 8008874:	220a      	movs	r2, #10
 8008876:	4648      	mov	r0, r9
 8008878:	f000 f968 	bl	8008b4c <__multadd>
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	e7eb      	b.n	8008858 <_dtoa_r+0xb70>
 8008880:	08009aa0 	.word	0x08009aa0
 8008884:	08009a24 	.word	0x08009a24

08008888 <_free_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4605      	mov	r5, r0
 800888c:	2900      	cmp	r1, #0
 800888e:	d041      	beq.n	8008914 <_free_r+0x8c>
 8008890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008894:	1f0c      	subs	r4, r1, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfb8      	it	lt
 800889a:	18e4      	addlt	r4, r4, r3
 800889c:	f000 f8e8 	bl	8008a70 <__malloc_lock>
 80088a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008918 <_free_r+0x90>)
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	b933      	cbnz	r3, 80088b4 <_free_r+0x2c>
 80088a6:	6063      	str	r3, [r4, #4]
 80088a8:	6014      	str	r4, [r2, #0]
 80088aa:	4628      	mov	r0, r5
 80088ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b0:	f000 b8e4 	b.w	8008a7c <__malloc_unlock>
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	d908      	bls.n	80088ca <_free_r+0x42>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	1821      	adds	r1, r4, r0
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf01      	itttt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	1809      	addeq	r1, r1, r0
 80088c6:	6021      	streq	r1, [r4, #0]
 80088c8:	e7ed      	b.n	80088a6 <_free_r+0x1e>
 80088ca:	461a      	mov	r2, r3
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b10b      	cbz	r3, 80088d4 <_free_r+0x4c>
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	d9fa      	bls.n	80088ca <_free_r+0x42>
 80088d4:	6811      	ldr	r1, [r2, #0]
 80088d6:	1850      	adds	r0, r2, r1
 80088d8:	42a0      	cmp	r0, r4
 80088da:	d10b      	bne.n	80088f4 <_free_r+0x6c>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	4401      	add	r1, r0
 80088e0:	1850      	adds	r0, r2, r1
 80088e2:	4283      	cmp	r3, r0
 80088e4:	6011      	str	r1, [r2, #0]
 80088e6:	d1e0      	bne.n	80088aa <_free_r+0x22>
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	6053      	str	r3, [r2, #4]
 80088ee:	4408      	add	r0, r1
 80088f0:	6010      	str	r0, [r2, #0]
 80088f2:	e7da      	b.n	80088aa <_free_r+0x22>
 80088f4:	d902      	bls.n	80088fc <_free_r+0x74>
 80088f6:	230c      	movs	r3, #12
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	e7d6      	b.n	80088aa <_free_r+0x22>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	1821      	adds	r1, r4, r0
 8008900:	428b      	cmp	r3, r1
 8008902:	bf04      	itt	eq
 8008904:	6819      	ldreq	r1, [r3, #0]
 8008906:	685b      	ldreq	r3, [r3, #4]
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	bf04      	itt	eq
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	6054      	str	r4, [r2, #4]
 8008912:	e7ca      	b.n	80088aa <_free_r+0x22>
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	200003dc 	.word	0x200003dc

0800891c <malloc>:
 800891c:	4b02      	ldr	r3, [pc, #8]	@ (8008928 <malloc+0xc>)
 800891e:	4601      	mov	r1, r0
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	f000 b825 	b.w	8008970 <_malloc_r>
 8008926:	bf00      	nop
 8008928:	20000018 	.word	0x20000018

0800892c <sbrk_aligned>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	4e0f      	ldr	r6, [pc, #60]	@ (800896c <sbrk_aligned+0x40>)
 8008930:	460c      	mov	r4, r1
 8008932:	6831      	ldr	r1, [r6, #0]
 8008934:	4605      	mov	r5, r0
 8008936:	b911      	cbnz	r1, 800893e <sbrk_aligned+0x12>
 8008938:	f000 fe92 	bl	8009660 <_sbrk_r>
 800893c:	6030      	str	r0, [r6, #0]
 800893e:	4621      	mov	r1, r4
 8008940:	4628      	mov	r0, r5
 8008942:	f000 fe8d 	bl	8009660 <_sbrk_r>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d103      	bne.n	8008952 <sbrk_aligned+0x26>
 800894a:	f04f 34ff 	mov.w	r4, #4294967295
 800894e:	4620      	mov	r0, r4
 8008950:	bd70      	pop	{r4, r5, r6, pc}
 8008952:	1cc4      	adds	r4, r0, #3
 8008954:	f024 0403 	bic.w	r4, r4, #3
 8008958:	42a0      	cmp	r0, r4
 800895a:	d0f8      	beq.n	800894e <sbrk_aligned+0x22>
 800895c:	1a21      	subs	r1, r4, r0
 800895e:	4628      	mov	r0, r5
 8008960:	f000 fe7e 	bl	8009660 <_sbrk_r>
 8008964:	3001      	adds	r0, #1
 8008966:	d1f2      	bne.n	800894e <sbrk_aligned+0x22>
 8008968:	e7ef      	b.n	800894a <sbrk_aligned+0x1e>
 800896a:	bf00      	nop
 800896c:	200003d8 	.word	0x200003d8

08008970 <_malloc_r>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	1ccd      	adds	r5, r1, #3
 8008976:	f025 0503 	bic.w	r5, r5, #3
 800897a:	3508      	adds	r5, #8
 800897c:	2d0c      	cmp	r5, #12
 800897e:	bf38      	it	cc
 8008980:	250c      	movcc	r5, #12
 8008982:	2d00      	cmp	r5, #0
 8008984:	4606      	mov	r6, r0
 8008986:	db01      	blt.n	800898c <_malloc_r+0x1c>
 8008988:	42a9      	cmp	r1, r5
 800898a:	d904      	bls.n	8008996 <_malloc_r+0x26>
 800898c:	230c      	movs	r3, #12
 800898e:	6033      	str	r3, [r6, #0]
 8008990:	2000      	movs	r0, #0
 8008992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a6c <_malloc_r+0xfc>
 800899a:	f000 f869 	bl	8008a70 <__malloc_lock>
 800899e:	f8d8 3000 	ldr.w	r3, [r8]
 80089a2:	461c      	mov	r4, r3
 80089a4:	bb44      	cbnz	r4, 80089f8 <_malloc_r+0x88>
 80089a6:	4629      	mov	r1, r5
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff ffbf 	bl	800892c <sbrk_aligned>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	4604      	mov	r4, r0
 80089b2:	d158      	bne.n	8008a66 <_malloc_r+0xf6>
 80089b4:	f8d8 4000 	ldr.w	r4, [r8]
 80089b8:	4627      	mov	r7, r4
 80089ba:	2f00      	cmp	r7, #0
 80089bc:	d143      	bne.n	8008a46 <_malloc_r+0xd6>
 80089be:	2c00      	cmp	r4, #0
 80089c0:	d04b      	beq.n	8008a5a <_malloc_r+0xea>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	4639      	mov	r1, r7
 80089c6:	4630      	mov	r0, r6
 80089c8:	eb04 0903 	add.w	r9, r4, r3
 80089cc:	f000 fe48 	bl	8009660 <_sbrk_r>
 80089d0:	4581      	cmp	r9, r0
 80089d2:	d142      	bne.n	8008a5a <_malloc_r+0xea>
 80089d4:	6821      	ldr	r1, [r4, #0]
 80089d6:	1a6d      	subs	r5, r5, r1
 80089d8:	4629      	mov	r1, r5
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ffa6 	bl	800892c <sbrk_aligned>
 80089e0:	3001      	adds	r0, #1
 80089e2:	d03a      	beq.n	8008a5a <_malloc_r+0xea>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	442b      	add	r3, r5
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	f8d8 3000 	ldr.w	r3, [r8]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	bb62      	cbnz	r2, 8008a4c <_malloc_r+0xdc>
 80089f2:	f8c8 7000 	str.w	r7, [r8]
 80089f6:	e00f      	b.n	8008a18 <_malloc_r+0xa8>
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	1b52      	subs	r2, r2, r5
 80089fc:	d420      	bmi.n	8008a40 <_malloc_r+0xd0>
 80089fe:	2a0b      	cmp	r2, #11
 8008a00:	d917      	bls.n	8008a32 <_malloc_r+0xc2>
 8008a02:	1961      	adds	r1, r4, r5
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	6025      	str	r5, [r4, #0]
 8008a08:	bf18      	it	ne
 8008a0a:	6059      	strne	r1, [r3, #4]
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	bf08      	it	eq
 8008a10:	f8c8 1000 	streq.w	r1, [r8]
 8008a14:	5162      	str	r2, [r4, r5]
 8008a16:	604b      	str	r3, [r1, #4]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f82f 	bl	8008a7c <__malloc_unlock>
 8008a1e:	f104 000b 	add.w	r0, r4, #11
 8008a22:	1d23      	adds	r3, r4, #4
 8008a24:	f020 0007 	bic.w	r0, r0, #7
 8008a28:	1ac2      	subs	r2, r0, r3
 8008a2a:	bf1c      	itt	ne
 8008a2c:	1a1b      	subne	r3, r3, r0
 8008a2e:	50a3      	strne	r3, [r4, r2]
 8008a30:	e7af      	b.n	8008992 <_malloc_r+0x22>
 8008a32:	6862      	ldr	r2, [r4, #4]
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	bf0c      	ite	eq
 8008a38:	f8c8 2000 	streq.w	r2, [r8]
 8008a3c:	605a      	strne	r2, [r3, #4]
 8008a3e:	e7eb      	b.n	8008a18 <_malloc_r+0xa8>
 8008a40:	4623      	mov	r3, r4
 8008a42:	6864      	ldr	r4, [r4, #4]
 8008a44:	e7ae      	b.n	80089a4 <_malloc_r+0x34>
 8008a46:	463c      	mov	r4, r7
 8008a48:	687f      	ldr	r7, [r7, #4]
 8008a4a:	e7b6      	b.n	80089ba <_malloc_r+0x4a>
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d1fb      	bne.n	8008a4c <_malloc_r+0xdc>
 8008a54:	2300      	movs	r3, #0
 8008a56:	6053      	str	r3, [r2, #4]
 8008a58:	e7de      	b.n	8008a18 <_malloc_r+0xa8>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	6033      	str	r3, [r6, #0]
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f000 f80c 	bl	8008a7c <__malloc_unlock>
 8008a64:	e794      	b.n	8008990 <_malloc_r+0x20>
 8008a66:	6005      	str	r5, [r0, #0]
 8008a68:	e7d6      	b.n	8008a18 <_malloc_r+0xa8>
 8008a6a:	bf00      	nop
 8008a6c:	200003dc 	.word	0x200003dc

08008a70 <__malloc_lock>:
 8008a70:	4801      	ldr	r0, [pc, #4]	@ (8008a78 <__malloc_lock+0x8>)
 8008a72:	f7ff b8ae 	b.w	8007bd2 <__retarget_lock_acquire_recursive>
 8008a76:	bf00      	nop
 8008a78:	200003d4 	.word	0x200003d4

08008a7c <__malloc_unlock>:
 8008a7c:	4801      	ldr	r0, [pc, #4]	@ (8008a84 <__malloc_unlock+0x8>)
 8008a7e:	f7ff b8a9 	b.w	8007bd4 <__retarget_lock_release_recursive>
 8008a82:	bf00      	nop
 8008a84:	200003d4 	.word	0x200003d4

08008a88 <_Balloc>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	69c6      	ldr	r6, [r0, #28]
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	460d      	mov	r5, r1
 8008a90:	b976      	cbnz	r6, 8008ab0 <_Balloc+0x28>
 8008a92:	2010      	movs	r0, #16
 8008a94:	f7ff ff42 	bl	800891c <malloc>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	61e0      	str	r0, [r4, #28]
 8008a9c:	b920      	cbnz	r0, 8008aa8 <_Balloc+0x20>
 8008a9e:	4b18      	ldr	r3, [pc, #96]	@ (8008b00 <_Balloc+0x78>)
 8008aa0:	4818      	ldr	r0, [pc, #96]	@ (8008b04 <_Balloc+0x7c>)
 8008aa2:	216b      	movs	r1, #107	@ 0x6b
 8008aa4:	f000 fdfa 	bl	800969c <__assert_func>
 8008aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aac:	6006      	str	r6, [r0, #0]
 8008aae:	60c6      	str	r6, [r0, #12]
 8008ab0:	69e6      	ldr	r6, [r4, #28]
 8008ab2:	68f3      	ldr	r3, [r6, #12]
 8008ab4:	b183      	cbz	r3, 8008ad8 <_Balloc+0x50>
 8008ab6:	69e3      	ldr	r3, [r4, #28]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008abe:	b9b8      	cbnz	r0, 8008af0 <_Balloc+0x68>
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ac6:	1d72      	adds	r2, r6, #5
 8008ac8:	0092      	lsls	r2, r2, #2
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fe04 	bl	80096d8 <_calloc_r>
 8008ad0:	b160      	cbz	r0, 8008aec <_Balloc+0x64>
 8008ad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ad6:	e00e      	b.n	8008af6 <_Balloc+0x6e>
 8008ad8:	2221      	movs	r2, #33	@ 0x21
 8008ada:	2104      	movs	r1, #4
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 fdfb 	bl	80096d8 <_calloc_r>
 8008ae2:	69e3      	ldr	r3, [r4, #28]
 8008ae4:	60f0      	str	r0, [r6, #12]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e4      	bne.n	8008ab6 <_Balloc+0x2e>
 8008aec:	2000      	movs	r0, #0
 8008aee:	bd70      	pop	{r4, r5, r6, pc}
 8008af0:	6802      	ldr	r2, [r0, #0]
 8008af2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008af6:	2300      	movs	r3, #0
 8008af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008afc:	e7f7      	b.n	8008aee <_Balloc+0x66>
 8008afe:	bf00      	nop
 8008b00:	08009a31 	.word	0x08009a31
 8008b04:	08009ab1 	.word	0x08009ab1

08008b08 <_Bfree>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	69c6      	ldr	r6, [r0, #28]
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	b976      	cbnz	r6, 8008b30 <_Bfree+0x28>
 8008b12:	2010      	movs	r0, #16
 8008b14:	f7ff ff02 	bl	800891c <malloc>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	61e8      	str	r0, [r5, #28]
 8008b1c:	b920      	cbnz	r0, 8008b28 <_Bfree+0x20>
 8008b1e:	4b09      	ldr	r3, [pc, #36]	@ (8008b44 <_Bfree+0x3c>)
 8008b20:	4809      	ldr	r0, [pc, #36]	@ (8008b48 <_Bfree+0x40>)
 8008b22:	218f      	movs	r1, #143	@ 0x8f
 8008b24:	f000 fdba 	bl	800969c <__assert_func>
 8008b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b2c:	6006      	str	r6, [r0, #0]
 8008b2e:	60c6      	str	r6, [r0, #12]
 8008b30:	b13c      	cbz	r4, 8008b42 <_Bfree+0x3a>
 8008b32:	69eb      	ldr	r3, [r5, #28]
 8008b34:	6862      	ldr	r2, [r4, #4]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b3c:	6021      	str	r1, [r4, #0]
 8008b3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	08009a31 	.word	0x08009a31
 8008b48:	08009ab1 	.word	0x08009ab1

08008b4c <__multadd>:
 8008b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b50:	690d      	ldr	r5, [r1, #16]
 8008b52:	4607      	mov	r7, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	461e      	mov	r6, r3
 8008b58:	f101 0c14 	add.w	ip, r1, #20
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	f8dc 3000 	ldr.w	r3, [ip]
 8008b62:	b299      	uxth	r1, r3
 8008b64:	fb02 6101 	mla	r1, r2, r1, r6
 8008b68:	0c1e      	lsrs	r6, r3, #16
 8008b6a:	0c0b      	lsrs	r3, r1, #16
 8008b6c:	fb02 3306 	mla	r3, r2, r6, r3
 8008b70:	b289      	uxth	r1, r1
 8008b72:	3001      	adds	r0, #1
 8008b74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b78:	4285      	cmp	r5, r0
 8008b7a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b82:	dcec      	bgt.n	8008b5e <__multadd+0x12>
 8008b84:	b30e      	cbz	r6, 8008bca <__multadd+0x7e>
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	42ab      	cmp	r3, r5
 8008b8a:	dc19      	bgt.n	8008bc0 <__multadd+0x74>
 8008b8c:	6861      	ldr	r1, [r4, #4]
 8008b8e:	4638      	mov	r0, r7
 8008b90:	3101      	adds	r1, #1
 8008b92:	f7ff ff79 	bl	8008a88 <_Balloc>
 8008b96:	4680      	mov	r8, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <__multadd+0x5a>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd0 <__multadd+0x84>)
 8008b9e:	480d      	ldr	r0, [pc, #52]	@ (8008bd4 <__multadd+0x88>)
 8008ba0:	21ba      	movs	r1, #186	@ 0xba
 8008ba2:	f000 fd7b 	bl	800969c <__assert_func>
 8008ba6:	6922      	ldr	r2, [r4, #16]
 8008ba8:	3202      	adds	r2, #2
 8008baa:	f104 010c 	add.w	r1, r4, #12
 8008bae:	0092      	lsls	r2, r2, #2
 8008bb0:	300c      	adds	r0, #12
 8008bb2:	f000 fd65 	bl	8009680 <memcpy>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ffa5 	bl	8008b08 <_Bfree>
 8008bbe:	4644      	mov	r4, r8
 8008bc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	615e      	str	r6, [r3, #20]
 8008bc8:	6125      	str	r5, [r4, #16]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd0:	08009aa0 	.word	0x08009aa0
 8008bd4:	08009ab1 	.word	0x08009ab1

08008bd8 <__hi0bits>:
 8008bd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008bdc:	4603      	mov	r3, r0
 8008bde:	bf36      	itet	cc
 8008be0:	0403      	lslcc	r3, r0, #16
 8008be2:	2000      	movcs	r0, #0
 8008be4:	2010      	movcc	r0, #16
 8008be6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bea:	bf3c      	itt	cc
 8008bec:	021b      	lslcc	r3, r3, #8
 8008bee:	3008      	addcc	r0, #8
 8008bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bf4:	bf3c      	itt	cc
 8008bf6:	011b      	lslcc	r3, r3, #4
 8008bf8:	3004      	addcc	r0, #4
 8008bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfe:	bf3c      	itt	cc
 8008c00:	009b      	lslcc	r3, r3, #2
 8008c02:	3002      	addcc	r0, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db05      	blt.n	8008c14 <__hi0bits+0x3c>
 8008c08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c0c:	f100 0001 	add.w	r0, r0, #1
 8008c10:	bf08      	it	eq
 8008c12:	2020      	moveq	r0, #32
 8008c14:	4770      	bx	lr

08008c16 <__lo0bits>:
 8008c16:	6803      	ldr	r3, [r0, #0]
 8008c18:	4602      	mov	r2, r0
 8008c1a:	f013 0007 	ands.w	r0, r3, #7
 8008c1e:	d00b      	beq.n	8008c38 <__lo0bits+0x22>
 8008c20:	07d9      	lsls	r1, r3, #31
 8008c22:	d421      	bmi.n	8008c68 <__lo0bits+0x52>
 8008c24:	0798      	lsls	r0, r3, #30
 8008c26:	bf49      	itett	mi
 8008c28:	085b      	lsrmi	r3, r3, #1
 8008c2a:	089b      	lsrpl	r3, r3, #2
 8008c2c:	2001      	movmi	r0, #1
 8008c2e:	6013      	strmi	r3, [r2, #0]
 8008c30:	bf5c      	itt	pl
 8008c32:	6013      	strpl	r3, [r2, #0]
 8008c34:	2002      	movpl	r0, #2
 8008c36:	4770      	bx	lr
 8008c38:	b299      	uxth	r1, r3
 8008c3a:	b909      	cbnz	r1, 8008c40 <__lo0bits+0x2a>
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	2010      	movs	r0, #16
 8008c40:	b2d9      	uxtb	r1, r3
 8008c42:	b909      	cbnz	r1, 8008c48 <__lo0bits+0x32>
 8008c44:	3008      	adds	r0, #8
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	0719      	lsls	r1, r3, #28
 8008c4a:	bf04      	itt	eq
 8008c4c:	091b      	lsreq	r3, r3, #4
 8008c4e:	3004      	addeq	r0, #4
 8008c50:	0799      	lsls	r1, r3, #30
 8008c52:	bf04      	itt	eq
 8008c54:	089b      	lsreq	r3, r3, #2
 8008c56:	3002      	addeq	r0, #2
 8008c58:	07d9      	lsls	r1, r3, #31
 8008c5a:	d403      	bmi.n	8008c64 <__lo0bits+0x4e>
 8008c5c:	085b      	lsrs	r3, r3, #1
 8008c5e:	f100 0001 	add.w	r0, r0, #1
 8008c62:	d003      	beq.n	8008c6c <__lo0bits+0x56>
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	4770      	bx	lr
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4770      	bx	lr
 8008c6c:	2020      	movs	r0, #32
 8008c6e:	4770      	bx	lr

08008c70 <__i2b>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	460c      	mov	r4, r1
 8008c74:	2101      	movs	r1, #1
 8008c76:	f7ff ff07 	bl	8008a88 <_Balloc>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	b928      	cbnz	r0, 8008c8a <__i2b+0x1a>
 8008c7e:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <__i2b+0x24>)
 8008c80:	4805      	ldr	r0, [pc, #20]	@ (8008c98 <__i2b+0x28>)
 8008c82:	f240 1145 	movw	r1, #325	@ 0x145
 8008c86:	f000 fd09 	bl	800969c <__assert_func>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	6144      	str	r4, [r0, #20]
 8008c8e:	6103      	str	r3, [r0, #16]
 8008c90:	bd10      	pop	{r4, pc}
 8008c92:	bf00      	nop
 8008c94:	08009aa0 	.word	0x08009aa0
 8008c98:	08009ab1 	.word	0x08009ab1

08008c9c <__multiply>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	4617      	mov	r7, r2
 8008ca2:	690a      	ldr	r2, [r1, #16]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	bfa8      	it	ge
 8008caa:	463b      	movge	r3, r7
 8008cac:	4689      	mov	r9, r1
 8008cae:	bfa4      	itt	ge
 8008cb0:	460f      	movge	r7, r1
 8008cb2:	4699      	movge	r9, r3
 8008cb4:	693d      	ldr	r5, [r7, #16]
 8008cb6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	eb05 060a 	add.w	r6, r5, sl
 8008cc2:	42b3      	cmp	r3, r6
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	bfb8      	it	lt
 8008cc8:	3101      	addlt	r1, #1
 8008cca:	f7ff fedd 	bl	8008a88 <_Balloc>
 8008cce:	b930      	cbnz	r0, 8008cde <__multiply+0x42>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	4b41      	ldr	r3, [pc, #260]	@ (8008dd8 <__multiply+0x13c>)
 8008cd4:	4841      	ldr	r0, [pc, #260]	@ (8008ddc <__multiply+0x140>)
 8008cd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008cda:	f000 fcdf 	bl	800969c <__assert_func>
 8008cde:	f100 0414 	add.w	r4, r0, #20
 8008ce2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4573      	cmp	r3, lr
 8008cec:	d320      	bcc.n	8008d30 <__multiply+0x94>
 8008cee:	f107 0814 	add.w	r8, r7, #20
 8008cf2:	f109 0114 	add.w	r1, r9, #20
 8008cf6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008cfa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008cfe:	9302      	str	r3, [sp, #8]
 8008d00:	1beb      	subs	r3, r5, r7
 8008d02:	3b15      	subs	r3, #21
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	3304      	adds	r3, #4
 8008d0a:	3715      	adds	r7, #21
 8008d0c:	42bd      	cmp	r5, r7
 8008d0e:	bf38      	it	cc
 8008d10:	2304      	movcc	r3, #4
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	9103      	str	r1, [sp, #12]
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	d80c      	bhi.n	8008d36 <__multiply+0x9a>
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	dd03      	ble.n	8008d28 <__multiply+0x8c>
 8008d20:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d055      	beq.n	8008dd4 <__multiply+0x138>
 8008d28:	6106      	str	r6, [r0, #16]
 8008d2a:	b005      	add	sp, #20
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	f843 2b04 	str.w	r2, [r3], #4
 8008d34:	e7d9      	b.n	8008cea <__multiply+0x4e>
 8008d36:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d3a:	f1ba 0f00 	cmp.w	sl, #0
 8008d3e:	d01f      	beq.n	8008d80 <__multiply+0xe4>
 8008d40:	46c4      	mov	ip, r8
 8008d42:	46a1      	mov	r9, r4
 8008d44:	2700      	movs	r7, #0
 8008d46:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d4a:	f8d9 3000 	ldr.w	r3, [r9]
 8008d4e:	fa1f fb82 	uxth.w	fp, r2
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d58:	443b      	add	r3, r7
 8008d5a:	f8d9 7000 	ldr.w	r7, [r9]
 8008d5e:	0c12      	lsrs	r2, r2, #16
 8008d60:	0c3f      	lsrs	r7, r7, #16
 8008d62:	fb0a 7202 	mla	r2, sl, r2, r7
 8008d66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d70:	4565      	cmp	r5, ip
 8008d72:	f849 3b04 	str.w	r3, [r9], #4
 8008d76:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008d7a:	d8e4      	bhi.n	8008d46 <__multiply+0xaa>
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	50e7      	str	r7, [r4, r3]
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d86:	3104      	adds	r1, #4
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	d020      	beq.n	8008dd0 <__multiply+0x134>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	4647      	mov	r7, r8
 8008d92:	46a4      	mov	ip, r4
 8008d94:	f04f 0a00 	mov.w	sl, #0
 8008d98:	f8b7 b000 	ldrh.w	fp, [r7]
 8008d9c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008da0:	fb09 220b 	mla	r2, r9, fp, r2
 8008da4:	4452      	add	r2, sl
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dac:	f84c 3b04 	str.w	r3, [ip], #4
 8008db0:	f857 3b04 	ldr.w	r3, [r7], #4
 8008db4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008db8:	f8bc 3000 	ldrh.w	r3, [ip]
 8008dbc:	fb09 330a 	mla	r3, r9, sl, r3
 8008dc0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008dc4:	42bd      	cmp	r5, r7
 8008dc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dca:	d8e5      	bhi.n	8008d98 <__multiply+0xfc>
 8008dcc:	9a01      	ldr	r2, [sp, #4]
 8008dce:	50a3      	str	r3, [r4, r2]
 8008dd0:	3404      	adds	r4, #4
 8008dd2:	e79f      	b.n	8008d14 <__multiply+0x78>
 8008dd4:	3e01      	subs	r6, #1
 8008dd6:	e7a1      	b.n	8008d1c <__multiply+0x80>
 8008dd8:	08009aa0 	.word	0x08009aa0
 8008ddc:	08009ab1 	.word	0x08009ab1

08008de0 <__pow5mult>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4615      	mov	r5, r2
 8008de6:	f012 0203 	ands.w	r2, r2, #3
 8008dea:	4607      	mov	r7, r0
 8008dec:	460e      	mov	r6, r1
 8008dee:	d007      	beq.n	8008e00 <__pow5mult+0x20>
 8008df0:	4c25      	ldr	r4, [pc, #148]	@ (8008e88 <__pow5mult+0xa8>)
 8008df2:	3a01      	subs	r2, #1
 8008df4:	2300      	movs	r3, #0
 8008df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dfa:	f7ff fea7 	bl	8008b4c <__multadd>
 8008dfe:	4606      	mov	r6, r0
 8008e00:	10ad      	asrs	r5, r5, #2
 8008e02:	d03d      	beq.n	8008e80 <__pow5mult+0xa0>
 8008e04:	69fc      	ldr	r4, [r7, #28]
 8008e06:	b97c      	cbnz	r4, 8008e28 <__pow5mult+0x48>
 8008e08:	2010      	movs	r0, #16
 8008e0a:	f7ff fd87 	bl	800891c <malloc>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	61f8      	str	r0, [r7, #28]
 8008e12:	b928      	cbnz	r0, 8008e20 <__pow5mult+0x40>
 8008e14:	4b1d      	ldr	r3, [pc, #116]	@ (8008e8c <__pow5mult+0xac>)
 8008e16:	481e      	ldr	r0, [pc, #120]	@ (8008e90 <__pow5mult+0xb0>)
 8008e18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e1c:	f000 fc3e 	bl	800969c <__assert_func>
 8008e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e24:	6004      	str	r4, [r0, #0]
 8008e26:	60c4      	str	r4, [r0, #12]
 8008e28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e30:	b94c      	cbnz	r4, 8008e46 <__pow5mult+0x66>
 8008e32:	f240 2171 	movw	r1, #625	@ 0x271
 8008e36:	4638      	mov	r0, r7
 8008e38:	f7ff ff1a 	bl	8008c70 <__i2b>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e42:	4604      	mov	r4, r0
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	f04f 0900 	mov.w	r9, #0
 8008e4a:	07eb      	lsls	r3, r5, #31
 8008e4c:	d50a      	bpl.n	8008e64 <__pow5mult+0x84>
 8008e4e:	4631      	mov	r1, r6
 8008e50:	4622      	mov	r2, r4
 8008e52:	4638      	mov	r0, r7
 8008e54:	f7ff ff22 	bl	8008c9c <__multiply>
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f7ff fe53 	bl	8008b08 <_Bfree>
 8008e62:	4646      	mov	r6, r8
 8008e64:	106d      	asrs	r5, r5, #1
 8008e66:	d00b      	beq.n	8008e80 <__pow5mult+0xa0>
 8008e68:	6820      	ldr	r0, [r4, #0]
 8008e6a:	b938      	cbnz	r0, 8008e7c <__pow5mult+0x9c>
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4638      	mov	r0, r7
 8008e72:	f7ff ff13 	bl	8008c9c <__multiply>
 8008e76:	6020      	str	r0, [r4, #0]
 8008e78:	f8c0 9000 	str.w	r9, [r0]
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	e7e4      	b.n	8008e4a <__pow5mult+0x6a>
 8008e80:	4630      	mov	r0, r6
 8008e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e86:	bf00      	nop
 8008e88:	08009b64 	.word	0x08009b64
 8008e8c:	08009a31 	.word	0x08009a31
 8008e90:	08009ab1 	.word	0x08009ab1

08008e94 <__lshift>:
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	460c      	mov	r4, r1
 8008e9a:	6849      	ldr	r1, [r1, #4]
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	4691      	mov	r9, r2
 8008ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eac:	f108 0601 	add.w	r6, r8, #1
 8008eb0:	42b3      	cmp	r3, r6
 8008eb2:	db0b      	blt.n	8008ecc <__lshift+0x38>
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	f7ff fde7 	bl	8008a88 <_Balloc>
 8008eba:	4605      	mov	r5, r0
 8008ebc:	b948      	cbnz	r0, 8008ed2 <__lshift+0x3e>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	4b28      	ldr	r3, [pc, #160]	@ (8008f64 <__lshift+0xd0>)
 8008ec2:	4829      	ldr	r0, [pc, #164]	@ (8008f68 <__lshift+0xd4>)
 8008ec4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ec8:	f000 fbe8 	bl	800969c <__assert_func>
 8008ecc:	3101      	adds	r1, #1
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	e7ee      	b.n	8008eb0 <__lshift+0x1c>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f100 0114 	add.w	r1, r0, #20
 8008ed8:	f100 0210 	add.w	r2, r0, #16
 8008edc:	4618      	mov	r0, r3
 8008ede:	4553      	cmp	r3, sl
 8008ee0:	db33      	blt.n	8008f4a <__lshift+0xb6>
 8008ee2:	6920      	ldr	r0, [r4, #16]
 8008ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ee8:	f104 0314 	add.w	r3, r4, #20
 8008eec:	f019 091f 	ands.w	r9, r9, #31
 8008ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ef8:	d02b      	beq.n	8008f52 <__lshift+0xbe>
 8008efa:	f1c9 0e20 	rsb	lr, r9, #32
 8008efe:	468a      	mov	sl, r1
 8008f00:	2200      	movs	r2, #0
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	fa00 f009 	lsl.w	r0, r0, r9
 8008f08:	4310      	orrs	r0, r2
 8008f0a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f12:	459c      	cmp	ip, r3
 8008f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f18:	d8f3      	bhi.n	8008f02 <__lshift+0x6e>
 8008f1a:	ebac 0304 	sub.w	r3, ip, r4
 8008f1e:	3b15      	subs	r3, #21
 8008f20:	f023 0303 	bic.w	r3, r3, #3
 8008f24:	3304      	adds	r3, #4
 8008f26:	f104 0015 	add.w	r0, r4, #21
 8008f2a:	4560      	cmp	r0, ip
 8008f2c:	bf88      	it	hi
 8008f2e:	2304      	movhi	r3, #4
 8008f30:	50ca      	str	r2, [r1, r3]
 8008f32:	b10a      	cbz	r2, 8008f38 <__lshift+0xa4>
 8008f34:	f108 0602 	add.w	r6, r8, #2
 8008f38:	3e01      	subs	r6, #1
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	612e      	str	r6, [r5, #16]
 8008f3e:	4621      	mov	r1, r4
 8008f40:	f7ff fde2 	bl	8008b08 <_Bfree>
 8008f44:	4628      	mov	r0, r5
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f4e:	3301      	adds	r3, #1
 8008f50:	e7c5      	b.n	8008ede <__lshift+0x4a>
 8008f52:	3904      	subs	r1, #4
 8008f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f5c:	459c      	cmp	ip, r3
 8008f5e:	d8f9      	bhi.n	8008f54 <__lshift+0xc0>
 8008f60:	e7ea      	b.n	8008f38 <__lshift+0xa4>
 8008f62:	bf00      	nop
 8008f64:	08009aa0 	.word	0x08009aa0
 8008f68:	08009ab1 	.word	0x08009ab1

08008f6c <__mcmp>:
 8008f6c:	690a      	ldr	r2, [r1, #16]
 8008f6e:	4603      	mov	r3, r0
 8008f70:	6900      	ldr	r0, [r0, #16]
 8008f72:	1a80      	subs	r0, r0, r2
 8008f74:	b530      	push	{r4, r5, lr}
 8008f76:	d10e      	bne.n	8008f96 <__mcmp+0x2a>
 8008f78:	3314      	adds	r3, #20
 8008f7a:	3114      	adds	r1, #20
 8008f7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f8c:	4295      	cmp	r5, r2
 8008f8e:	d003      	beq.n	8008f98 <__mcmp+0x2c>
 8008f90:	d205      	bcs.n	8008f9e <__mcmp+0x32>
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295
 8008f96:	bd30      	pop	{r4, r5, pc}
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	d3f3      	bcc.n	8008f84 <__mcmp+0x18>
 8008f9c:	e7fb      	b.n	8008f96 <__mcmp+0x2a>
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	e7f9      	b.n	8008f96 <__mcmp+0x2a>
	...

08008fa4 <__mdiff>:
 8008fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	4689      	mov	r9, r1
 8008faa:	4606      	mov	r6, r0
 8008fac:	4611      	mov	r1, r2
 8008fae:	4648      	mov	r0, r9
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	f7ff ffdb 	bl	8008f6c <__mcmp>
 8008fb6:	1e05      	subs	r5, r0, #0
 8008fb8:	d112      	bne.n	8008fe0 <__mdiff+0x3c>
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7ff fd63 	bl	8008a88 <_Balloc>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	b928      	cbnz	r0, 8008fd2 <__mdiff+0x2e>
 8008fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80090c4 <__mdiff+0x120>)
 8008fc8:	f240 2137 	movw	r1, #567	@ 0x237
 8008fcc:	483e      	ldr	r0, [pc, #248]	@ (80090c8 <__mdiff+0x124>)
 8008fce:	f000 fb65 	bl	800969c <__assert_func>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fd8:	4610      	mov	r0, r2
 8008fda:	b003      	add	sp, #12
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	bfbc      	itt	lt
 8008fe2:	464b      	movlt	r3, r9
 8008fe4:	46a1      	movlt	r9, r4
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008fec:	bfba      	itte	lt
 8008fee:	461c      	movlt	r4, r3
 8008ff0:	2501      	movlt	r5, #1
 8008ff2:	2500      	movge	r5, #0
 8008ff4:	f7ff fd48 	bl	8008a88 <_Balloc>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	b918      	cbnz	r0, 8009004 <__mdiff+0x60>
 8008ffc:	4b31      	ldr	r3, [pc, #196]	@ (80090c4 <__mdiff+0x120>)
 8008ffe:	f240 2145 	movw	r1, #581	@ 0x245
 8009002:	e7e3      	b.n	8008fcc <__mdiff+0x28>
 8009004:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009008:	6926      	ldr	r6, [r4, #16]
 800900a:	60c5      	str	r5, [r0, #12]
 800900c:	f109 0310 	add.w	r3, r9, #16
 8009010:	f109 0514 	add.w	r5, r9, #20
 8009014:	f104 0e14 	add.w	lr, r4, #20
 8009018:	f100 0b14 	add.w	fp, r0, #20
 800901c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009020:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	46d9      	mov	r9, fp
 8009028:	f04f 0c00 	mov.w	ip, #0
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009032:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	fa1f f38a 	uxth.w	r3, sl
 800903c:	4619      	mov	r1, r3
 800903e:	b283      	uxth	r3, r0
 8009040:	1acb      	subs	r3, r1, r3
 8009042:	0c00      	lsrs	r0, r0, #16
 8009044:	4463      	add	r3, ip
 8009046:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800904a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800904e:	b29b      	uxth	r3, r3
 8009050:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009054:	4576      	cmp	r6, lr
 8009056:	f849 3b04 	str.w	r3, [r9], #4
 800905a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800905e:	d8e5      	bhi.n	800902c <__mdiff+0x88>
 8009060:	1b33      	subs	r3, r6, r4
 8009062:	3b15      	subs	r3, #21
 8009064:	f023 0303 	bic.w	r3, r3, #3
 8009068:	3415      	adds	r4, #21
 800906a:	3304      	adds	r3, #4
 800906c:	42a6      	cmp	r6, r4
 800906e:	bf38      	it	cc
 8009070:	2304      	movcc	r3, #4
 8009072:	441d      	add	r5, r3
 8009074:	445b      	add	r3, fp
 8009076:	461e      	mov	r6, r3
 8009078:	462c      	mov	r4, r5
 800907a:	4544      	cmp	r4, r8
 800907c:	d30e      	bcc.n	800909c <__mdiff+0xf8>
 800907e:	f108 0103 	add.w	r1, r8, #3
 8009082:	1b49      	subs	r1, r1, r5
 8009084:	f021 0103 	bic.w	r1, r1, #3
 8009088:	3d03      	subs	r5, #3
 800908a:	45a8      	cmp	r8, r5
 800908c:	bf38      	it	cc
 800908e:	2100      	movcc	r1, #0
 8009090:	440b      	add	r3, r1
 8009092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009096:	b191      	cbz	r1, 80090be <__mdiff+0x11a>
 8009098:	6117      	str	r7, [r2, #16]
 800909a:	e79d      	b.n	8008fd8 <__mdiff+0x34>
 800909c:	f854 1b04 	ldr.w	r1, [r4], #4
 80090a0:	46e6      	mov	lr, ip
 80090a2:	0c08      	lsrs	r0, r1, #16
 80090a4:	fa1c fc81 	uxtah	ip, ip, r1
 80090a8:	4471      	add	r1, lr
 80090aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090ae:	b289      	uxth	r1, r1
 80090b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090b4:	f846 1b04 	str.w	r1, [r6], #4
 80090b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090bc:	e7dd      	b.n	800907a <__mdiff+0xd6>
 80090be:	3f01      	subs	r7, #1
 80090c0:	e7e7      	b.n	8009092 <__mdiff+0xee>
 80090c2:	bf00      	nop
 80090c4:	08009aa0 	.word	0x08009aa0
 80090c8:	08009ab1 	.word	0x08009ab1

080090cc <__d2b>:
 80090cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	460f      	mov	r7, r1
 80090d2:	2101      	movs	r1, #1
 80090d4:	ec59 8b10 	vmov	r8, r9, d0
 80090d8:	4616      	mov	r6, r2
 80090da:	f7ff fcd5 	bl	8008a88 <_Balloc>
 80090de:	4604      	mov	r4, r0
 80090e0:	b930      	cbnz	r0, 80090f0 <__d2b+0x24>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b23      	ldr	r3, [pc, #140]	@ (8009174 <__d2b+0xa8>)
 80090e6:	4824      	ldr	r0, [pc, #144]	@ (8009178 <__d2b+0xac>)
 80090e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80090ec:	f000 fad6 	bl	800969c <__assert_func>
 80090f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090f8:	b10d      	cbz	r5, 80090fe <__d2b+0x32>
 80090fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	f1b8 0300 	subs.w	r3, r8, #0
 8009104:	d023      	beq.n	800914e <__d2b+0x82>
 8009106:	4668      	mov	r0, sp
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	f7ff fd84 	bl	8008c16 <__lo0bits>
 800910e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009112:	b1d0      	cbz	r0, 800914a <__d2b+0x7e>
 8009114:	f1c0 0320 	rsb	r3, r0, #32
 8009118:	fa02 f303 	lsl.w	r3, r2, r3
 800911c:	430b      	orrs	r3, r1
 800911e:	40c2      	lsrs	r2, r0
 8009120:	6163      	str	r3, [r4, #20]
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9b01      	ldr	r3, [sp, #4]
 8009126:	61a3      	str	r3, [r4, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bf0c      	ite	eq
 800912c:	2201      	moveq	r2, #1
 800912e:	2202      	movne	r2, #2
 8009130:	6122      	str	r2, [r4, #16]
 8009132:	b1a5      	cbz	r5, 800915e <__d2b+0x92>
 8009134:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009138:	4405      	add	r5, r0
 800913a:	603d      	str	r5, [r7, #0]
 800913c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009140:	6030      	str	r0, [r6, #0]
 8009142:	4620      	mov	r0, r4
 8009144:	b003      	add	sp, #12
 8009146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800914a:	6161      	str	r1, [r4, #20]
 800914c:	e7ea      	b.n	8009124 <__d2b+0x58>
 800914e:	a801      	add	r0, sp, #4
 8009150:	f7ff fd61 	bl	8008c16 <__lo0bits>
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	6163      	str	r3, [r4, #20]
 8009158:	3020      	adds	r0, #32
 800915a:	2201      	movs	r2, #1
 800915c:	e7e8      	b.n	8009130 <__d2b+0x64>
 800915e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009162:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009166:	6038      	str	r0, [r7, #0]
 8009168:	6918      	ldr	r0, [r3, #16]
 800916a:	f7ff fd35 	bl	8008bd8 <__hi0bits>
 800916e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009172:	e7e5      	b.n	8009140 <__d2b+0x74>
 8009174:	08009aa0 	.word	0x08009aa0
 8009178:	08009ab1 	.word	0x08009ab1

0800917c <__sfputc_r>:
 800917c:	6893      	ldr	r3, [r2, #8]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	b410      	push	{r4}
 8009184:	6093      	str	r3, [r2, #8]
 8009186:	da08      	bge.n	800919a <__sfputc_r+0x1e>
 8009188:	6994      	ldr	r4, [r2, #24]
 800918a:	42a3      	cmp	r3, r4
 800918c:	db01      	blt.n	8009192 <__sfputc_r+0x16>
 800918e:	290a      	cmp	r1, #10
 8009190:	d103      	bne.n	800919a <__sfputc_r+0x1e>
 8009192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009196:	f7fe bc0a 	b.w	80079ae <__swbuf_r>
 800919a:	6813      	ldr	r3, [r2, #0]
 800919c:	1c58      	adds	r0, r3, #1
 800919e:	6010      	str	r0, [r2, #0]
 80091a0:	7019      	strb	r1, [r3, #0]
 80091a2:	4608      	mov	r0, r1
 80091a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <__sfputs_r>:
 80091aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	18d5      	adds	r5, r2, r3
 80091b4:	42ac      	cmp	r4, r5
 80091b6:	d101      	bne.n	80091bc <__sfputs_r+0x12>
 80091b8:	2000      	movs	r0, #0
 80091ba:	e007      	b.n	80091cc <__sfputs_r+0x22>
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	463a      	mov	r2, r7
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ffda 	bl	800917c <__sfputc_r>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d1f3      	bne.n	80091b4 <__sfputs_r+0xa>
 80091cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091d0 <_vfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	460d      	mov	r5, r1
 80091d6:	b09d      	sub	sp, #116	@ 0x74
 80091d8:	4614      	mov	r4, r2
 80091da:	4698      	mov	r8, r3
 80091dc:	4606      	mov	r6, r0
 80091de:	b118      	cbz	r0, 80091e8 <_vfiprintf_r+0x18>
 80091e0:	6a03      	ldr	r3, [r0, #32]
 80091e2:	b90b      	cbnz	r3, 80091e8 <_vfiprintf_r+0x18>
 80091e4:	f7fe fafa 	bl	80077dc <__sinit>
 80091e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ea:	07d9      	lsls	r1, r3, #31
 80091ec:	d405      	bmi.n	80091fa <_vfiprintf_r+0x2a>
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	059a      	lsls	r2, r3, #22
 80091f2:	d402      	bmi.n	80091fa <_vfiprintf_r+0x2a>
 80091f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f6:	f7fe fcec 	bl	8007bd2 <__retarget_lock_acquire_recursive>
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	071b      	lsls	r3, r3, #28
 80091fe:	d501      	bpl.n	8009204 <_vfiprintf_r+0x34>
 8009200:	692b      	ldr	r3, [r5, #16]
 8009202:	b99b      	cbnz	r3, 800922c <_vfiprintf_r+0x5c>
 8009204:	4629      	mov	r1, r5
 8009206:	4630      	mov	r0, r6
 8009208:	f7fe fc10 	bl	8007a2c <__swsetup_r>
 800920c:	b170      	cbz	r0, 800922c <_vfiprintf_r+0x5c>
 800920e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009210:	07dc      	lsls	r4, r3, #31
 8009212:	d504      	bpl.n	800921e <_vfiprintf_r+0x4e>
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	b01d      	add	sp, #116	@ 0x74
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	0598      	lsls	r0, r3, #22
 8009222:	d4f7      	bmi.n	8009214 <_vfiprintf_r+0x44>
 8009224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009226:	f7fe fcd5 	bl	8007bd4 <__retarget_lock_release_recursive>
 800922a:	e7f3      	b.n	8009214 <_vfiprintf_r+0x44>
 800922c:	2300      	movs	r3, #0
 800922e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009230:	2320      	movs	r3, #32
 8009232:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009236:	f8cd 800c 	str.w	r8, [sp, #12]
 800923a:	2330      	movs	r3, #48	@ 0x30
 800923c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093ec <_vfiprintf_r+0x21c>
 8009240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009244:	f04f 0901 	mov.w	r9, #1
 8009248:	4623      	mov	r3, r4
 800924a:	469a      	mov	sl, r3
 800924c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009250:	b10a      	cbz	r2, 8009256 <_vfiprintf_r+0x86>
 8009252:	2a25      	cmp	r2, #37	@ 0x25
 8009254:	d1f9      	bne.n	800924a <_vfiprintf_r+0x7a>
 8009256:	ebba 0b04 	subs.w	fp, sl, r4
 800925a:	d00b      	beq.n	8009274 <_vfiprintf_r+0xa4>
 800925c:	465b      	mov	r3, fp
 800925e:	4622      	mov	r2, r4
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff ffa1 	bl	80091aa <__sfputs_r>
 8009268:	3001      	adds	r0, #1
 800926a:	f000 80a7 	beq.w	80093bc <_vfiprintf_r+0x1ec>
 800926e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009270:	445a      	add	r2, fp
 8009272:	9209      	str	r2, [sp, #36]	@ 0x24
 8009274:	f89a 3000 	ldrb.w	r3, [sl]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 809f 	beq.w	80093bc <_vfiprintf_r+0x1ec>
 800927e:	2300      	movs	r3, #0
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009288:	f10a 0a01 	add.w	sl, sl, #1
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009294:	931a      	str	r3, [sp, #104]	@ 0x68
 8009296:	4654      	mov	r4, sl
 8009298:	2205      	movs	r2, #5
 800929a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929e:	4853      	ldr	r0, [pc, #332]	@ (80093ec <_vfiprintf_r+0x21c>)
 80092a0:	f7f6 ffb6 	bl	8000210 <memchr>
 80092a4:	9a04      	ldr	r2, [sp, #16]
 80092a6:	b9d8      	cbnz	r0, 80092e0 <_vfiprintf_r+0x110>
 80092a8:	06d1      	lsls	r1, r2, #27
 80092aa:	bf44      	itt	mi
 80092ac:	2320      	movmi	r3, #32
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b2:	0713      	lsls	r3, r2, #28
 80092b4:	bf44      	itt	mi
 80092b6:	232b      	movmi	r3, #43	@ 0x2b
 80092b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092bc:	f89a 3000 	ldrb.w	r3, [sl]
 80092c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c2:	d015      	beq.n	80092f0 <_vfiprintf_r+0x120>
 80092c4:	9a07      	ldr	r2, [sp, #28]
 80092c6:	4654      	mov	r4, sl
 80092c8:	2000      	movs	r0, #0
 80092ca:	f04f 0c0a 	mov.w	ip, #10
 80092ce:	4621      	mov	r1, r4
 80092d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d4:	3b30      	subs	r3, #48	@ 0x30
 80092d6:	2b09      	cmp	r3, #9
 80092d8:	d94b      	bls.n	8009372 <_vfiprintf_r+0x1a2>
 80092da:	b1b0      	cbz	r0, 800930a <_vfiprintf_r+0x13a>
 80092dc:	9207      	str	r2, [sp, #28]
 80092de:	e014      	b.n	800930a <_vfiprintf_r+0x13a>
 80092e0:	eba0 0308 	sub.w	r3, r0, r8
 80092e4:	fa09 f303 	lsl.w	r3, r9, r3
 80092e8:	4313      	orrs	r3, r2
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	46a2      	mov	sl, r4
 80092ee:	e7d2      	b.n	8009296 <_vfiprintf_r+0xc6>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	1d19      	adds	r1, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9103      	str	r1, [sp, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfbb      	ittet	lt
 80092fc:	425b      	neglt	r3, r3
 80092fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009302:	9307      	strge	r3, [sp, #28]
 8009304:	9307      	strlt	r3, [sp, #28]
 8009306:	bfb8      	it	lt
 8009308:	9204      	strlt	r2, [sp, #16]
 800930a:	7823      	ldrb	r3, [r4, #0]
 800930c:	2b2e      	cmp	r3, #46	@ 0x2e
 800930e:	d10a      	bne.n	8009326 <_vfiprintf_r+0x156>
 8009310:	7863      	ldrb	r3, [r4, #1]
 8009312:	2b2a      	cmp	r3, #42	@ 0x2a
 8009314:	d132      	bne.n	800937c <_vfiprintf_r+0x1ac>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9203      	str	r2, [sp, #12]
 800931e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009322:	3402      	adds	r4, #2
 8009324:	9305      	str	r3, [sp, #20]
 8009326:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093fc <_vfiprintf_r+0x22c>
 800932a:	7821      	ldrb	r1, [r4, #0]
 800932c:	2203      	movs	r2, #3
 800932e:	4650      	mov	r0, sl
 8009330:	f7f6 ff6e 	bl	8000210 <memchr>
 8009334:	b138      	cbz	r0, 8009346 <_vfiprintf_r+0x176>
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	eba0 000a 	sub.w	r0, r0, sl
 800933c:	2240      	movs	r2, #64	@ 0x40
 800933e:	4082      	lsls	r2, r0
 8009340:	4313      	orrs	r3, r2
 8009342:	3401      	adds	r4, #1
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934a:	4829      	ldr	r0, [pc, #164]	@ (80093f0 <_vfiprintf_r+0x220>)
 800934c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009350:	2206      	movs	r2, #6
 8009352:	f7f6 ff5d 	bl	8000210 <memchr>
 8009356:	2800      	cmp	r0, #0
 8009358:	d03f      	beq.n	80093da <_vfiprintf_r+0x20a>
 800935a:	4b26      	ldr	r3, [pc, #152]	@ (80093f4 <_vfiprintf_r+0x224>)
 800935c:	bb1b      	cbnz	r3, 80093a6 <_vfiprintf_r+0x1d6>
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	3307      	adds	r3, #7
 8009362:	f023 0307 	bic.w	r3, r3, #7
 8009366:	3308      	adds	r3, #8
 8009368:	9303      	str	r3, [sp, #12]
 800936a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936c:	443b      	add	r3, r7
 800936e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009370:	e76a      	b.n	8009248 <_vfiprintf_r+0x78>
 8009372:	fb0c 3202 	mla	r2, ip, r2, r3
 8009376:	460c      	mov	r4, r1
 8009378:	2001      	movs	r0, #1
 800937a:	e7a8      	b.n	80092ce <_vfiprintf_r+0xfe>
 800937c:	2300      	movs	r3, #0
 800937e:	3401      	adds	r4, #1
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	4619      	mov	r1, r3
 8009384:	f04f 0c0a 	mov.w	ip, #10
 8009388:	4620      	mov	r0, r4
 800938a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800938e:	3a30      	subs	r2, #48	@ 0x30
 8009390:	2a09      	cmp	r2, #9
 8009392:	d903      	bls.n	800939c <_vfiprintf_r+0x1cc>
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0c6      	beq.n	8009326 <_vfiprintf_r+0x156>
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	e7c4      	b.n	8009326 <_vfiprintf_r+0x156>
 800939c:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a0:	4604      	mov	r4, r0
 80093a2:	2301      	movs	r3, #1
 80093a4:	e7f0      	b.n	8009388 <_vfiprintf_r+0x1b8>
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4b12      	ldr	r3, [pc, #72]	@ (80093f8 <_vfiprintf_r+0x228>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7fd fdd1 	bl	8006f58 <_printf_float>
 80093b6:	4607      	mov	r7, r0
 80093b8:	1c78      	adds	r0, r7, #1
 80093ba:	d1d6      	bne.n	800936a <_vfiprintf_r+0x19a>
 80093bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093be:	07d9      	lsls	r1, r3, #31
 80093c0:	d405      	bmi.n	80093ce <_vfiprintf_r+0x1fe>
 80093c2:	89ab      	ldrh	r3, [r5, #12]
 80093c4:	059a      	lsls	r2, r3, #22
 80093c6:	d402      	bmi.n	80093ce <_vfiprintf_r+0x1fe>
 80093c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ca:	f7fe fc03 	bl	8007bd4 <__retarget_lock_release_recursive>
 80093ce:	89ab      	ldrh	r3, [r5, #12]
 80093d0:	065b      	lsls	r3, r3, #25
 80093d2:	f53f af1f 	bmi.w	8009214 <_vfiprintf_r+0x44>
 80093d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093d8:	e71e      	b.n	8009218 <_vfiprintf_r+0x48>
 80093da:	ab03      	add	r3, sp, #12
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	462a      	mov	r2, r5
 80093e0:	4b05      	ldr	r3, [pc, #20]	@ (80093f8 <_vfiprintf_r+0x228>)
 80093e2:	a904      	add	r1, sp, #16
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7fe f84f 	bl	8007488 <_printf_i>
 80093ea:	e7e4      	b.n	80093b6 <_vfiprintf_r+0x1e6>
 80093ec:	08009b0a 	.word	0x08009b0a
 80093f0:	08009b14 	.word	0x08009b14
 80093f4:	08006f59 	.word	0x08006f59
 80093f8:	080091ab 	.word	0x080091ab
 80093fc:	08009b10 	.word	0x08009b10

08009400 <__sflush_r>:
 8009400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	0716      	lsls	r6, r2, #28
 800940a:	4605      	mov	r5, r0
 800940c:	460c      	mov	r4, r1
 800940e:	d454      	bmi.n	80094ba <__sflush_r+0xba>
 8009410:	684b      	ldr	r3, [r1, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	dc02      	bgt.n	800941c <__sflush_r+0x1c>
 8009416:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	dd48      	ble.n	80094ae <__sflush_r+0xae>
 800941c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800941e:	2e00      	cmp	r6, #0
 8009420:	d045      	beq.n	80094ae <__sflush_r+0xae>
 8009422:	2300      	movs	r3, #0
 8009424:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009428:	682f      	ldr	r7, [r5, #0]
 800942a:	6a21      	ldr	r1, [r4, #32]
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	d030      	beq.n	8009492 <__sflush_r+0x92>
 8009430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	0759      	lsls	r1, r3, #29
 8009436:	d505      	bpl.n	8009444 <__sflush_r+0x44>
 8009438:	6863      	ldr	r3, [r4, #4]
 800943a:	1ad2      	subs	r2, r2, r3
 800943c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800943e:	b10b      	cbz	r3, 8009444 <__sflush_r+0x44>
 8009440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009442:	1ad2      	subs	r2, r2, r3
 8009444:	2300      	movs	r3, #0
 8009446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009448:	6a21      	ldr	r1, [r4, #32]
 800944a:	4628      	mov	r0, r5
 800944c:	47b0      	blx	r6
 800944e:	1c43      	adds	r3, r0, #1
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	d106      	bne.n	8009462 <__sflush_r+0x62>
 8009454:	6829      	ldr	r1, [r5, #0]
 8009456:	291d      	cmp	r1, #29
 8009458:	d82b      	bhi.n	80094b2 <__sflush_r+0xb2>
 800945a:	4a2a      	ldr	r2, [pc, #168]	@ (8009504 <__sflush_r+0x104>)
 800945c:	40ca      	lsrs	r2, r1
 800945e:	07d6      	lsls	r6, r2, #31
 8009460:	d527      	bpl.n	80094b2 <__sflush_r+0xb2>
 8009462:	2200      	movs	r2, #0
 8009464:	6062      	str	r2, [r4, #4]
 8009466:	04d9      	lsls	r1, r3, #19
 8009468:	6922      	ldr	r2, [r4, #16]
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	d504      	bpl.n	8009478 <__sflush_r+0x78>
 800946e:	1c42      	adds	r2, r0, #1
 8009470:	d101      	bne.n	8009476 <__sflush_r+0x76>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	b903      	cbnz	r3, 8009478 <__sflush_r+0x78>
 8009476:	6560      	str	r0, [r4, #84]	@ 0x54
 8009478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800947a:	602f      	str	r7, [r5, #0]
 800947c:	b1b9      	cbz	r1, 80094ae <__sflush_r+0xae>
 800947e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009482:	4299      	cmp	r1, r3
 8009484:	d002      	beq.n	800948c <__sflush_r+0x8c>
 8009486:	4628      	mov	r0, r5
 8009488:	f7ff f9fe 	bl	8008888 <_free_r>
 800948c:	2300      	movs	r3, #0
 800948e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009490:	e00d      	b.n	80094ae <__sflush_r+0xae>
 8009492:	2301      	movs	r3, #1
 8009494:	4628      	mov	r0, r5
 8009496:	47b0      	blx	r6
 8009498:	4602      	mov	r2, r0
 800949a:	1c50      	adds	r0, r2, #1
 800949c:	d1c9      	bne.n	8009432 <__sflush_r+0x32>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0c6      	beq.n	8009432 <__sflush_r+0x32>
 80094a4:	2b1d      	cmp	r3, #29
 80094a6:	d001      	beq.n	80094ac <__sflush_r+0xac>
 80094a8:	2b16      	cmp	r3, #22
 80094aa:	d11e      	bne.n	80094ea <__sflush_r+0xea>
 80094ac:	602f      	str	r7, [r5, #0]
 80094ae:	2000      	movs	r0, #0
 80094b0:	e022      	b.n	80094f8 <__sflush_r+0xf8>
 80094b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b6:	b21b      	sxth	r3, r3
 80094b8:	e01b      	b.n	80094f2 <__sflush_r+0xf2>
 80094ba:	690f      	ldr	r7, [r1, #16]
 80094bc:	2f00      	cmp	r7, #0
 80094be:	d0f6      	beq.n	80094ae <__sflush_r+0xae>
 80094c0:	0793      	lsls	r3, r2, #30
 80094c2:	680e      	ldr	r6, [r1, #0]
 80094c4:	bf08      	it	eq
 80094c6:	694b      	ldreq	r3, [r1, #20]
 80094c8:	600f      	str	r7, [r1, #0]
 80094ca:	bf18      	it	ne
 80094cc:	2300      	movne	r3, #0
 80094ce:	eba6 0807 	sub.w	r8, r6, r7
 80094d2:	608b      	str	r3, [r1, #8]
 80094d4:	f1b8 0f00 	cmp.w	r8, #0
 80094d8:	dde9      	ble.n	80094ae <__sflush_r+0xae>
 80094da:	6a21      	ldr	r1, [r4, #32]
 80094dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094de:	4643      	mov	r3, r8
 80094e0:	463a      	mov	r2, r7
 80094e2:	4628      	mov	r0, r5
 80094e4:	47b0      	blx	r6
 80094e6:	2800      	cmp	r0, #0
 80094e8:	dc08      	bgt.n	80094fc <__sflush_r+0xfc>
 80094ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094fc:	4407      	add	r7, r0
 80094fe:	eba8 0800 	sub.w	r8, r8, r0
 8009502:	e7e7      	b.n	80094d4 <__sflush_r+0xd4>
 8009504:	20400001 	.word	0x20400001

08009508 <_fflush_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	690b      	ldr	r3, [r1, #16]
 800950c:	4605      	mov	r5, r0
 800950e:	460c      	mov	r4, r1
 8009510:	b913      	cbnz	r3, 8009518 <_fflush_r+0x10>
 8009512:	2500      	movs	r5, #0
 8009514:	4628      	mov	r0, r5
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	b118      	cbz	r0, 8009522 <_fflush_r+0x1a>
 800951a:	6a03      	ldr	r3, [r0, #32]
 800951c:	b90b      	cbnz	r3, 8009522 <_fflush_r+0x1a>
 800951e:	f7fe f95d 	bl	80077dc <__sinit>
 8009522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0f3      	beq.n	8009512 <_fflush_r+0xa>
 800952a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800952c:	07d0      	lsls	r0, r2, #31
 800952e:	d404      	bmi.n	800953a <_fflush_r+0x32>
 8009530:	0599      	lsls	r1, r3, #22
 8009532:	d402      	bmi.n	800953a <_fflush_r+0x32>
 8009534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009536:	f7fe fb4c 	bl	8007bd2 <__retarget_lock_acquire_recursive>
 800953a:	4628      	mov	r0, r5
 800953c:	4621      	mov	r1, r4
 800953e:	f7ff ff5f 	bl	8009400 <__sflush_r>
 8009542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009544:	07da      	lsls	r2, r3, #31
 8009546:	4605      	mov	r5, r0
 8009548:	d4e4      	bmi.n	8009514 <_fflush_r+0xc>
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	059b      	lsls	r3, r3, #22
 800954e:	d4e1      	bmi.n	8009514 <_fflush_r+0xc>
 8009550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009552:	f7fe fb3f 	bl	8007bd4 <__retarget_lock_release_recursive>
 8009556:	e7dd      	b.n	8009514 <_fflush_r+0xc>

08009558 <__swhatbuf_r>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	460c      	mov	r4, r1
 800955c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009560:	2900      	cmp	r1, #0
 8009562:	b096      	sub	sp, #88	@ 0x58
 8009564:	4615      	mov	r5, r2
 8009566:	461e      	mov	r6, r3
 8009568:	da0d      	bge.n	8009586 <__swhatbuf_r+0x2e>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009570:	f04f 0100 	mov.w	r1, #0
 8009574:	bf14      	ite	ne
 8009576:	2340      	movne	r3, #64	@ 0x40
 8009578:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800957c:	2000      	movs	r0, #0
 800957e:	6031      	str	r1, [r6, #0]
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	b016      	add	sp, #88	@ 0x58
 8009584:	bd70      	pop	{r4, r5, r6, pc}
 8009586:	466a      	mov	r2, sp
 8009588:	f000 f848 	bl	800961c <_fstat_r>
 800958c:	2800      	cmp	r0, #0
 800958e:	dbec      	blt.n	800956a <__swhatbuf_r+0x12>
 8009590:	9901      	ldr	r1, [sp, #4]
 8009592:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009596:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800959a:	4259      	negs	r1, r3
 800959c:	4159      	adcs	r1, r3
 800959e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095a2:	e7eb      	b.n	800957c <__swhatbuf_r+0x24>

080095a4 <__smakebuf_r>:
 80095a4:	898b      	ldrh	r3, [r1, #12]
 80095a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095a8:	079d      	lsls	r5, r3, #30
 80095aa:	4606      	mov	r6, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	d507      	bpl.n	80095c0 <__smakebuf_r+0x1c>
 80095b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	6123      	str	r3, [r4, #16]
 80095b8:	2301      	movs	r3, #1
 80095ba:	6163      	str	r3, [r4, #20]
 80095bc:	b003      	add	sp, #12
 80095be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c0:	ab01      	add	r3, sp, #4
 80095c2:	466a      	mov	r2, sp
 80095c4:	f7ff ffc8 	bl	8009558 <__swhatbuf_r>
 80095c8:	9f00      	ldr	r7, [sp, #0]
 80095ca:	4605      	mov	r5, r0
 80095cc:	4639      	mov	r1, r7
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff f9ce 	bl	8008970 <_malloc_r>
 80095d4:	b948      	cbnz	r0, 80095ea <__smakebuf_r+0x46>
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	059a      	lsls	r2, r3, #22
 80095dc:	d4ee      	bmi.n	80095bc <__smakebuf_r+0x18>
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	f043 0302 	orr.w	r3, r3, #2
 80095e6:	81a3      	strh	r3, [r4, #12]
 80095e8:	e7e2      	b.n	80095b0 <__smakebuf_r+0xc>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	6020      	str	r0, [r4, #0]
 80095ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095fa:	b15b      	cbz	r3, 8009614 <__smakebuf_r+0x70>
 80095fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009600:	4630      	mov	r0, r6
 8009602:	f000 f81d 	bl	8009640 <_isatty_r>
 8009606:	b128      	cbz	r0, 8009614 <__smakebuf_r+0x70>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	f023 0303 	bic.w	r3, r3, #3
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	431d      	orrs	r5, r3
 8009618:	81a5      	strh	r5, [r4, #12]
 800961a:	e7cf      	b.n	80095bc <__smakebuf_r+0x18>

0800961c <_fstat_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4d07      	ldr	r5, [pc, #28]	@ (800963c <_fstat_r+0x20>)
 8009620:	2300      	movs	r3, #0
 8009622:	4604      	mov	r4, r0
 8009624:	4608      	mov	r0, r1
 8009626:	4611      	mov	r1, r2
 8009628:	602b      	str	r3, [r5, #0]
 800962a:	f7f8 fbe3 	bl	8001df4 <_fstat>
 800962e:	1c43      	adds	r3, r0, #1
 8009630:	d102      	bne.n	8009638 <_fstat_r+0x1c>
 8009632:	682b      	ldr	r3, [r5, #0]
 8009634:	b103      	cbz	r3, 8009638 <_fstat_r+0x1c>
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	bd38      	pop	{r3, r4, r5, pc}
 800963a:	bf00      	nop
 800963c:	200003d0 	.word	0x200003d0

08009640 <_isatty_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4d06      	ldr	r5, [pc, #24]	@ (800965c <_isatty_r+0x1c>)
 8009644:	2300      	movs	r3, #0
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	f7f8 fbe2 	bl	8001e14 <_isatty>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_isatty_r+0x1a>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_isatty_r+0x1a>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	200003d0 	.word	0x200003d0

08009660 <_sbrk_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	@ (800967c <_sbrk_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f8 fbea 	bl	8001e44 <_sbrk>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_sbrk_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_sbrk_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	200003d0 	.word	0x200003d0

08009680 <memcpy>:
 8009680:	440a      	add	r2, r1
 8009682:	4291      	cmp	r1, r2
 8009684:	f100 33ff 	add.w	r3, r0, #4294967295
 8009688:	d100      	bne.n	800968c <memcpy+0xc>
 800968a:	4770      	bx	lr
 800968c:	b510      	push	{r4, lr}
 800968e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009696:	4291      	cmp	r1, r2
 8009698:	d1f9      	bne.n	800968e <memcpy+0xe>
 800969a:	bd10      	pop	{r4, pc}

0800969c <__assert_func>:
 800969c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969e:	4614      	mov	r4, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	4b09      	ldr	r3, [pc, #36]	@ (80096c8 <__assert_func+0x2c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4605      	mov	r5, r0
 80096a8:	68d8      	ldr	r0, [r3, #12]
 80096aa:	b14c      	cbz	r4, 80096c0 <__assert_func+0x24>
 80096ac:	4b07      	ldr	r3, [pc, #28]	@ (80096cc <__assert_func+0x30>)
 80096ae:	9100      	str	r1, [sp, #0]
 80096b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096b4:	4906      	ldr	r1, [pc, #24]	@ (80096d0 <__assert_func+0x34>)
 80096b6:	462b      	mov	r3, r5
 80096b8:	f000 f842 	bl	8009740 <fiprintf>
 80096bc:	f000 f852 	bl	8009764 <abort>
 80096c0:	4b04      	ldr	r3, [pc, #16]	@ (80096d4 <__assert_func+0x38>)
 80096c2:	461c      	mov	r4, r3
 80096c4:	e7f3      	b.n	80096ae <__assert_func+0x12>
 80096c6:	bf00      	nop
 80096c8:	20000018 	.word	0x20000018
 80096cc:	08009b25 	.word	0x08009b25
 80096d0:	08009b32 	.word	0x08009b32
 80096d4:	08009b60 	.word	0x08009b60

080096d8 <_calloc_r>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	fba1 5402 	umull	r5, r4, r1, r2
 80096de:	b934      	cbnz	r4, 80096ee <_calloc_r+0x16>
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7ff f945 	bl	8008970 <_malloc_r>
 80096e6:	4606      	mov	r6, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <_calloc_r+0x1e>
 80096ea:	4630      	mov	r0, r6
 80096ec:	bd70      	pop	{r4, r5, r6, pc}
 80096ee:	220c      	movs	r2, #12
 80096f0:	6002      	str	r2, [r0, #0]
 80096f2:	2600      	movs	r6, #0
 80096f4:	e7f9      	b.n	80096ea <_calloc_r+0x12>
 80096f6:	462a      	mov	r2, r5
 80096f8:	4621      	mov	r1, r4
 80096fa:	f7fe f9ed 	bl	8007ad8 <memset>
 80096fe:	e7f4      	b.n	80096ea <_calloc_r+0x12>

08009700 <__ascii_mbtowc>:
 8009700:	b082      	sub	sp, #8
 8009702:	b901      	cbnz	r1, 8009706 <__ascii_mbtowc+0x6>
 8009704:	a901      	add	r1, sp, #4
 8009706:	b142      	cbz	r2, 800971a <__ascii_mbtowc+0x1a>
 8009708:	b14b      	cbz	r3, 800971e <__ascii_mbtowc+0x1e>
 800970a:	7813      	ldrb	r3, [r2, #0]
 800970c:	600b      	str	r3, [r1, #0]
 800970e:	7812      	ldrb	r2, [r2, #0]
 8009710:	1e10      	subs	r0, r2, #0
 8009712:	bf18      	it	ne
 8009714:	2001      	movne	r0, #1
 8009716:	b002      	add	sp, #8
 8009718:	4770      	bx	lr
 800971a:	4610      	mov	r0, r2
 800971c:	e7fb      	b.n	8009716 <__ascii_mbtowc+0x16>
 800971e:	f06f 0001 	mvn.w	r0, #1
 8009722:	e7f8      	b.n	8009716 <__ascii_mbtowc+0x16>

08009724 <__ascii_wctomb>:
 8009724:	4603      	mov	r3, r0
 8009726:	4608      	mov	r0, r1
 8009728:	b141      	cbz	r1, 800973c <__ascii_wctomb+0x18>
 800972a:	2aff      	cmp	r2, #255	@ 0xff
 800972c:	d904      	bls.n	8009738 <__ascii_wctomb+0x14>
 800972e:	228a      	movs	r2, #138	@ 0x8a
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	4770      	bx	lr
 8009738:	700a      	strb	r2, [r1, #0]
 800973a:	2001      	movs	r0, #1
 800973c:	4770      	bx	lr
	...

08009740 <fiprintf>:
 8009740:	b40e      	push	{r1, r2, r3}
 8009742:	b503      	push	{r0, r1, lr}
 8009744:	4601      	mov	r1, r0
 8009746:	ab03      	add	r3, sp, #12
 8009748:	4805      	ldr	r0, [pc, #20]	@ (8009760 <fiprintf+0x20>)
 800974a:	f853 2b04 	ldr.w	r2, [r3], #4
 800974e:	6800      	ldr	r0, [r0, #0]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	f7ff fd3d 	bl	80091d0 <_vfiprintf_r>
 8009756:	b002      	add	sp, #8
 8009758:	f85d eb04 	ldr.w	lr, [sp], #4
 800975c:	b003      	add	sp, #12
 800975e:	4770      	bx	lr
 8009760:	20000018 	.word	0x20000018

08009764 <abort>:
 8009764:	b508      	push	{r3, lr}
 8009766:	2006      	movs	r0, #6
 8009768:	f000 f82c 	bl	80097c4 <raise>
 800976c:	2001      	movs	r0, #1
 800976e:	f7f8 faf1 	bl	8001d54 <_exit>

08009772 <_raise_r>:
 8009772:	291f      	cmp	r1, #31
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4605      	mov	r5, r0
 8009778:	460c      	mov	r4, r1
 800977a:	d904      	bls.n	8009786 <_raise_r+0x14>
 800977c:	2316      	movs	r3, #22
 800977e:	6003      	str	r3, [r0, #0]
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009788:	b112      	cbz	r2, 8009790 <_raise_r+0x1e>
 800978a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800978e:	b94b      	cbnz	r3, 80097a4 <_raise_r+0x32>
 8009790:	4628      	mov	r0, r5
 8009792:	f000 f831 	bl	80097f8 <_getpid_r>
 8009796:	4622      	mov	r2, r4
 8009798:	4601      	mov	r1, r0
 800979a:	4628      	mov	r0, r5
 800979c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a0:	f000 b818 	b.w	80097d4 <_kill_r>
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d00a      	beq.n	80097be <_raise_r+0x4c>
 80097a8:	1c59      	adds	r1, r3, #1
 80097aa:	d103      	bne.n	80097b4 <_raise_r+0x42>
 80097ac:	2316      	movs	r3, #22
 80097ae:	6003      	str	r3, [r0, #0]
 80097b0:	2001      	movs	r0, #1
 80097b2:	e7e7      	b.n	8009784 <_raise_r+0x12>
 80097b4:	2100      	movs	r1, #0
 80097b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097ba:	4620      	mov	r0, r4
 80097bc:	4798      	blx	r3
 80097be:	2000      	movs	r0, #0
 80097c0:	e7e0      	b.n	8009784 <_raise_r+0x12>
	...

080097c4 <raise>:
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <raise+0xc>)
 80097c6:	4601      	mov	r1, r0
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	f7ff bfd2 	b.w	8009772 <_raise_r>
 80097ce:	bf00      	nop
 80097d0:	20000018 	.word	0x20000018

080097d4 <_kill_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d07      	ldr	r5, [pc, #28]	@ (80097f4 <_kill_r+0x20>)
 80097d8:	2300      	movs	r3, #0
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	f7f8 faa7 	bl	8001d34 <_kill>
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	d102      	bne.n	80097f0 <_kill_r+0x1c>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	b103      	cbz	r3, 80097f0 <_kill_r+0x1c>
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	200003d0 	.word	0x200003d0

080097f8 <_getpid_r>:
 80097f8:	f7f8 ba94 	b.w	8001d24 <_getpid>

080097fc <_init>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr

08009808 <_fini>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr
